# Starts a new GA from the latest beta found in the same release branch of
# the Release ticket supplied as input.
name: Promote beta to GA

on:
  workflow_dispatch:
    inputs:
      releaseTicket:
        description: 'Release Ticket (NOTE: it must have a fixVersion which will be used as release version)'
        required: true

jobs:
  publish:
    name: Promote beta to GA
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup git
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      # only needed for npm version and npx
      - name: Setup Node.js Environment
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
      - name: Promote latest
        env:
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        run: |
          set -e

          release_ticket="${{ github.event.inputs.releaseTicket }}"

          ticket_info=$( \
            curl -H "Authorization: Bearer ${JIRA_API_TOKEN}" \
            "https://jira.mongodb.org/rest/api/2/issue/${release_ticket}"
          )

          issue_type=$(echo "${ticket_info}" | jq  -r '.fields.issuetype.name')

          if [[ "${issue_type}" != "Release" ]]; then
            echo "Error: ${release_ticket} is not a "Release" ticket."
            exit 1;
          fi

          next_ga=$(echo "${ticket_info}" | jq  -r '.fields.fixVersions[0].name')

          if [[ ! $next_ga =~ "^[0-9]+\.[0-9]+\.[0-9]+$" ]]; then
            echo "Error: ${next_ga} is not a valid version string."
            exit 1;
          fi

          release_branch=$(echo "${next_ga}" | awk -F. '{print $1 "." $2}')-releases

          git checkout "${release_branch}"
          package_json_version=$(cat package.json | jq .version)

          if [[ ! $package_json_version =~ "^[0-9]+\.[0-9]+\.[0-9]+-beta\.[0-9]+$" ]] || \
            npx semver@latest -r ">=${next_ga}" "${package_json_version}" || \
            npx semver@latest -r "<=${next_ga}-beta.0" "${package_json_version}"; then
              echo "Error: the previous release in ${release_branch} (${package_json_version}) is not a valid beta for ${next_ga}."
              exit 1
          fi

          # bump the package version and push
          npm version "${next_ga}"
          git commit -m "v${next_ga}" -- package.json package-lock.json
          git tag "v${next_ga}"
          git push origin "${release_branch}"
          git push --tags
