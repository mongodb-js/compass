stepback: false
exec_timeout_secs: 5400
ignore:
  - AUTHORS
  - THIRD-PARTY-NOTICES.md

## Variables
variables:
  - &save-artifact
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      bucket: mciuploads
      permissions: public-read
      content_type: application/octet-stream

post:
  - &save-diagnostic-file
    <<: *save-artifact
    params:
      local_files_include_filter:
        - src/.deps/.npm/_logs/*.log
      remote_file: ${project}/${revision}/${build_variant}/${task_name}
      content_type: text/plain
  - <<: *save-diagnostic-file
    params:
      local_files_include_filter:
        - src/packages/compass-e2e-tests/.log/**/*.log
        - src/packages/compass-e2e-tests/.log/**/*.json
  - <<: *save-diagnostic-file
    params:
      local_files_include_filter:
        - ~/.mongodb/runner/*.log
  - command: attach.results
    params:
      file_location: src/packages/compass-e2e-tests/.log/report.json

functions:
  'prepare':
    - command: git.get_project
      params:
        directory: src

    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          echo "Setting up ~/compass_env.sh"

          cat <<EOF_BUILD_SH > ~/compass_env.sh
          export CI=1
          export EVERGREEN=1

          # XXX: This is a workaround for the issues we are getting in Evergreen
          # ci with the way cygwin drives are set up and linked and the Node.js
          # bug that we can't really do anything about.
          #
          # For more context, see:
          # - https://github.com/nodejs/node/issues/34866
          # - https://github.com/mongodb-js/compass/pull/2403
          # - https://github.com/mongodb-js/compass/pull/2410
          if [[ "\$OSTYPE" == "cygwin" ]]; then
            # Change cygdrive from c to z without chanding rest of the path
            CHANGE_DIR_TO="\$(pwd | sed 's/^\/cygdrive\/c/\/cygdrive\/z/')"
            cd \$CHANGE_DIR_TO;
            echo "Changed cwd on cygwin. Current working dir: \$(pwd)"
          fi

          # Make default evergreen expansions accessible to hadron-build
          export EVERGREEN_ASSET_PREFIX="s3://mciuploads/${project}/${revision}";
          export EVERGREEN_AUTHOR="${author}";
          export EVERGREEN_AWS_ACCESS_KEY_ID="${aws_key}";
          export EVERGREEN_AWS_SECRET_ACCESS_KEY="${aws_secret}";
          export EVERGREEN_BRANCH_NAME="${branch_name}";
          export EVERGREEN_BUILD_ID="${build_id}";
          export EVERGREEN_BUILD_VARIANT="${build_variant}";
          export EVERGREEN_EXECUTION="${execution}";
          export EVERGREEN_IS_PATCH=${is_patch};
          export EVERGREEN_PROJECT="${project}";
          export EVERGREEN_REVISION="${revision}";
          export EVERGREEN_TASK_ID="${task_id}";
          export EVERGREEN_TASK_NAME="${task_name}";
          export EVERGREEN_TASK_URL="https://evergreen.mongodb.com/task/${task_id}";
          export EVERGREEN_VERSION_ID="${version_id}";
          export EVERGREEN_WORKDIR="${workdir}";

          export HADRON_METRICS_BUGSNAG_KEY="${metrics_bugsnag_key}";
          export HADRON_METRICS_INTERCOM_APP_ID="${metrics_intercom_app_id}";
          export HADRON_METRICS_STITCH_APP_ID="${metrics_stitch_app_id}";
          export HADRON_METRICS_SEGMENT_API_KEY="${metrics_segment_api_key}";

          # Directories used to install node, npm, and store artifacts
          export ARTIFACTS_PATH="$(pwd)/.deps"
          export NPM_CACHE_DIR="$(pwd)/.deps/.npm"
          export NPM_TMP_DIR="$(pwd)/.deps/tmp"

          export NODE_JS_VERSION="14.17.5"
          export NPM_VERSION="7"

          # npm configuration
          # all var names need to be lowercase
          # see: https://docs.npmjs.com/cli/v7/using-npm/config#environment-variables
          export npm_config_cache="\$NPM_CACHE_DIR"
          # npm tmp is deprecated, but let's keep it around just in case
          export npm_config_tmp="\$NPM_TMP_DIR"

          if [[ "\$OSTYPE" == "cygwin" ]]; then
            # NOTE lucas: for git-core addition, See
            # https://jira.mongodb.org/browse/COMPASS-4122
            export PATH="/cygdrive/c/Program Files/Git/mingw32/libexec/git-core/:$(pwd)/.deps:/cygdrive/c/wixtools/bin/:\$PATH"
            export APPDATA=Z:\\\;
          fi

          if [[ "\$OSTYPE" != "cygwin" ]]; then
            export PATH="$(pwd)/.deps/bin:\$PATH"
          fi

          if [ "\$EVERGREEN_BUILD_VARIANT" = rhel ]; then
            # To build node modules on RHEL post electron 13 we need
            # a newer c++ compiler version, this adds it.
            # https://jira.mongodb.org/browse/COMPASS-5150
            export PATH="/opt/mongodbtoolchain/v3/bin:\$PATH"
          fi

          EOF_BUILD_SH

          source ~/compass_env.sh

          # Make all the dirs
          mkdir -p $ARTIFACTS_PATH
          mkdir -p $NPM_CACHE_DIR
          mkdir -p $NPM_TMP_DIR

    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          source ~/compass_env.sh

    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          source ~/compass_env.sh
          bash .evergreen/preinstall.sh

  install:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          source ~/compass_env.sh

          echo "Installing Compass dependencies with the following npm configuration"
          npm config ls -l
          echo "(if npm fails, debug.log will be uploaded to S3)"

          # Install dependencies and prepare all workspaces
          npm run bootstrap-ci --unsafe-perm -- --stream

  verify:
    command: shell.exec
    params:
      working_dir: src
      shell: bash
      script: |
        set -e
        source ~/compass_env.sh

        echo "Run static analysis..."
        npm run check-ci

  test:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e

          # Load environment variables
          source ~/compass_env.sh
          echo "Running tests"

          bash .evergreen/pretest.sh

          export E2E_TESTS_METRICS_URI="${e2e_tests_metrics_string}"
          export E2E_TESTS_ATLAS_HOST="${e2e_tests_atlas_host}"
          export E2E_TESTS_DATA_LAKE_HOST="${e2e_tests_data_lake_host}"
          export E2E_TESTS_SERVERLESS_HOST="${e2e_tests_serverless_host}"
          export E2E_TESTS_ANALYTICS_NODE_HOST="${e2e_tests_analytics_node_host}"
          export E2E_TESTS_FREE_TIER_HOST="${e2e_tests_free_tier_host}"
          export E2E_TESTS_ATLAS_USERNAME="${e2e_tests_atlas_username}"
          export E2E_TESTS_ATLAS_PASSWORD="${e2e_tests_atlas_password}"
          export E2E_TESTS_ATLAS_X509_PEM="${e2e_tests_atlas_x509_pem}"

          # NOTE (@imlucas) Starting with MongoDB 4.0.4, the Server binaries
          # have dropped support for macOS 10.10 because it is now outside
          # of the supported version range.
          # https://docs.google.com/document/d/1IfQGC7wTtrlsc2SqURirvt_4uMuU606nXNbu-stw6bQ/edit
          # debug option is not very useful in normal runs, but helpful when
          # debugging any issues with tests. Set to "mocha*", "hadron*", or
          # "mongo*" for some helpful output from the test tooling we are using
          DEBUG=${debug} MONGODB_VERSION=${mongodb_version|4} npm run test-ci --unsafe-perm -- --stream

  'package':
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          # Load environment variables generated by `prepare`
          source ~/compass_env.sh
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          # Load environment variables generated by `prepare`
          source ~/compass_env.sh

          echo "Synchronizing evergreen environment from Compass build tools..."

          # Generates and expansion file with build target metadata in packages/compass/expansions.yml
          npm run evergreen-expansions ${compass_distribution} --workspace mongodb-compass
    - command: expansions.update
      params:
        # The only variables used from hadron-build generated expansions seems
        # to be all the `*_filename` vars and nothing else
        file: src/packages/compass/expansions.yml
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          source ~/compass_env.sh

          cat <<EOF_BUILD_SH > ~/compass_package.sh
          #! /usr/bin/env bash
          cd $(pwd)

          # Load environment variables
          source ~/compass_env.sh

          # For debugging any problems when the notary service fails.
          # @see https://github.com/mongodb-js/notary-service-client For details on what notary service is.
          export DEBUG=mongodb-notary*

          # Required to sign release assets
          export NOTARY_URL="http://notary-service.build.10gen.cc:5000"
          export NOTARY_AUTH_TOKEN="${signing_auth_token}"
          export NOTARY_SIGNING_KEY="${signing_key_name}"
          export NOTARY_SIGNING_COMMENT="Evergreen project mongodb/compass ${revision} - ${build_variant} - ${branch_name}"

          if [ `uname` == Darwin ]; then
            # We do print the environment during the build process in a few places
            # but we probably should stop doing that. After that, we can go back
            # to using plain APPLE_USERNAME and APPLE_PASSWORD environment variables.
            echo '{"appleUsername": "${apple_username}", "applePassword": "${apple_password}"}' > /tmp/compass-apple-cred.json
            export APPLE_CREDENTIALS_FILE="/tmp/compass-apple-cred.json"
          fi

          echo "Creating signed release build..."

          if [[ "$OSTYPE" == "cygwin" ]]; then
            echo "Starting Installer Service..."
            net start MSIServer
          fi

          # Provide a verbose logging for the release process
          export npm_config_loglevel="${npm_loglevel}"
          export DEBUG="${debug}"

          npm run package-compass ${compass_distribution};

          rm -f /tmp/compass-apple-cred.json
          EOF_BUILD_SH

          if [ `uname` == Darwin ]; then
            echo "Signing via ssh tunnel..."
            ssh -v -p 2222 localhost "bash ~/compass_package.sh"
          else
            if [[ "$OSTYPE" == "cygwin" ]]; then
              # If not possible to remove this hack, we should find a better way
              # to do this instead of directly referencing node_module paths,
              # but first figure out what exactly was changed in our fork of
              # electron-wix-msi
              #
              # TODO: https://jira.mongodb.org/browse/COMPASS-4888

              echo "Fetching signtool -> notary-service hack..."

              curl -fs \
                -o "signtool.exe" \
                --url "https://s3.amazonaws.com/boxes.10gen.com/build/signtool.exe"
              rm -f node_modules/electron-winstaller/vendor/signtool.exe
              rm -f node_modules/@mongodb-js/electron-wix-msi/vendor/signtool.exe
              chmod +x signtool.exe
              cp signtool.exe node_modules/@mongodb-js/electron-wix-msi/vendor/signtool.exe
              cp signtool.exe node_modules/electron-winstaller/vendor/signtool.exe
            fi
            bash ~/compass_package.sh
            ls -la packages/compass/dist
          fi

  'publish':
    command: shell.exec
    params:
      working_dir: src
      shell: bash
      script: |
        set -e
        # Load environment variables
        source ~/compass_env.sh

        # Required to upload release assets to GitHub
        export GITHUB_TOKEN=${devtoolsbot_github_token}

        # Required to upload release assets to s3 for download center
        export DOWNLOAD_CENTER_AWS_ACCESS_KEY_ID=${aws_key_evergreen_integrations}
        export DOWNLOAD_CENTER_AWS_SECRET_ACCESS_KEY=${aws_secret_evergreen_integrations}

        echo "Uploading release assets to S3 and GitHub if needed..."
        npm run upload ${compass_distribution} --workspace mongodb-compass

  'save windows artifacts':
    # setup
    - <<: *save-artifact
      params:
        local_file: src/packages/compass/dist/${windows_setup_filename}
        remote_file: ${project}/${revision}/${windows_setup_filename}
    # MSI
    - <<: *save-artifact
      params:
        local_file: src/packages/compass/dist/${windows_msi_filename}
        remote_file: ${project}/${revision}/${windows_msi_filename}
    # ZIP
    - <<: *save-artifact
      params:
        local_file: src/packages/compass/dist/${windows_zip_filename}
        remote_file: ${project}/${revision}/${windows_zip_filename}
        content_type: application/zip
    # RELEASES file
    - <<: *save-artifact
      params:
        local_file: src/packages/compass/dist/RELEASES
        remote_file: ${project}/${revision}/${compass_distribution}-RELEASES
    # nupkg full
    - <<: *save-artifact
      params:
        local_file: src/packages/compass/dist/${windows_nupkg_full_filename}
        remote_file: ${project}/${revision}/${windows_nupkg_full_filename}

  'save osx artifacts':
    # .dmg
    - <<: *save-artifact
      params:
        local_file: src/packages/compass/dist/${osx_dmg_filename}
        remote_file: ${project}/${revision}/${osx_dmg_filename}
        content_type: 'application/x-apple-diskimage'
    # .zip
    - <<: *save-artifact
      params:
        local_file: src/packages/compass/dist/${osx_zip_filename}
        remote_file: ${project}/${revision}/${osx_zip_filename}
        content_type: application/zip

  'save linux artifacts':
    # .deb
    - <<: *save-artifact
      params:
        local_file: src/packages/compass/dist/${linux_deb_filename}
        remote_file: ${project}/${revision}/${linux_deb_filename}
        content_type: 'application/vnd.debian.binary-package'
    # .tar.gz
    - <<: *save-artifact
      params:
        local_file: src/packages/compass/dist/${linux_tar_filename}
        remote_file: ${project}/${revision}/${linux_tar_filename}
        content_type: application/x-gzip

  'save rhel artifacts':
    # .rpm
    - <<: *save-artifact
      params:
        local_file: src/packages/compass/dist/${linux_rpm_filename}
        remote_file: ${project}/${revision}/${linux_rpm_filename}
        content_type: application/x-redhat-package-manager
    # .tar.gz
    - <<: *save-artifact
      params:
        local_file: src/packages/compass/dist/${linux_tar_filename}
        remote_file: ${project}/${revision}/${linux_tar_filename}
        content_type: application/x-gzip

# Tasks
tasks:
  - name: oneshot-compile-test-package-publish
    commands:
      - func: prepare

      - func: install

      - func: verify
        variants: [windows, macos, ubuntu, rhel]

      - func: test
        vars:
          debug: 'hadron*,mongo*,compass-e2e-tests*'

      - func: package
        vars:
          npm_loglevel: http
          debug: 'hadron*,mongo*,compass*'
          compass_distribution: compass
      - func: publish
        vars:
          compass_distribution: compass
      - func: 'save windows artifacts'
        variants: [windows]
      - func: 'save osx artifacts'
        variants: [macos]
      - func: 'save linux artifacts'
        variants: [ubuntu]
      - func: 'save rhel artifacts'
        variants: [rhel]

      - func: package
        vars:
          npm_loglevel: http
          debug: 'hadron*,mongo*,compass*'
          compass_distribution: compass-isolated
      - func: publish
        vars:
          compass_distribution: compass-isolated
      - func: 'save windows artifacts'
        variants: [windows]
      - func: 'save osx artifacts'
        variants: [macos]
      - func: 'save linux artifacts'
        variants: [ubuntu]
      - func: 'save rhel artifacts'
        variants: [rhel]

      - func: package
        vars:
          npm_loglevel: http
          debug: 'hadron*,mongo*,compass*'
          compass_distribution: compass-readonly
      - func: publish
        vars:
          compass_distribution: compass-readonly
      - func: 'save windows artifacts'
        variants: [windows]
      - func: 'save osx artifacts'
        variants: [macos]
      - func: 'save linux artifacts'
        variants: [ubuntu]
      - func: 'save rhel artifacts'
        variants: [rhel]

# TODO (@imlucas) determine OS/version deprecation policy, following server, so we don't fall behind
# what maximal resources we're using.
# See https://docs.google.com/document/d/1IfQGC7wTtrlsc2SqURirvt_4uMuU606nXNbu-stw6bQ/edit
buildvariants:
  - name: macos
    display_name: MacOS
    run_on: macos-1014-codesign
    tasks:
      - name: oneshot-compile-test-package-publish

  - name: windows
    display_name: Windows
    run_on: windows-vsCurrent-large
    expansions:
      compass_distribution: compass
    tasks:
      - name: oneshot-compile-test-package-publish

  - name: ubuntu
    display_name: Ubuntu
    run_on: ubuntu1604-large
    tasks:
      - name: oneshot-compile-test-package-publish

  - name: rhel
    display_name: RHEL
    run_on: rhel76-large
    tasks:
      - name: oneshot-compile-test-package-publish
