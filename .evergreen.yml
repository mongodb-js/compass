stepback: false
exec_timeout_secs: 5400
ignore:
  - AUTHORS
  - THIRD-PARTY-NOTICES.md

## Variables
variables:
  - &save-artifact
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      bucket: mciuploads
      permissions: public-read
      content_type: application/octet-stream
  - &compass-env
      # NOTE: anything added here should probably also be added to the list
      # in .evergreen/export-compass-env.js
      WORKDIR: ${workdir}
      CI: "1"
      EVERGREEN: "1"
      EVERGREEN_AUTHOR: ${author}
      EVERGREEN_BRANCH_NAME: ${branch_name}
      EVERGREEN_BUILD_ID: ${build_id}
      EVERGREEN_BUILD_VARIANT: ${build_variant}
      EVERGREEN_EXECUTION: ${execution}
      EVERGREEN_IS_PATCH: ${is_patch}
      EVERGREEN_PROJECT: ${project}
      EVERGREEN_REVISION: ${revision}
      EVERGREEN_TASK_ID: ${task_id}
      EVERGREEN_TASK_NAME: ${task_name}
      EVERGREEN_TASK_URL: https://evergreen.mongodb.com/task/${task_id}
      EVERGREEN_VERSION_ID: ${version_id}
      EVERGREEN_WORKDIR: ${workdir}
      NODE_JS_VERSION: "14.17.5"
      NPM_VERSION: "7"
      # secrets
      HADRON_METRICS_BUGSNAG_KEY: ${metrics_bugsnag_key}
      HADRON_METRICS_INTERCOM_APP_ID: ${metrics_intercom_app_id}
      HADRON_METRICS_STITCH_APP_ID: ${metrics_stitch_app_id}
      HADRON_METRICS_SEGMENT_API_KEY: ${metrics_segment_api_key}
      E2E_TESTS_METRICS_URI: ${e2e_tests_metrics_string}
      E2E_TESTS_ATLAS_HOST: ${e2e_tests_atlas_host}
      E2E_TESTS_DATA_LAKE_HOST: ${e2e_tests_data_lake_host}
      E2E_TESTS_SERVERLESS_HOST: ${e2e_tests_serverless_host}
      E2E_TESTS_ANALYTICS_NODE_HOST: ${e2e_tests_analytics_node_host}
      E2E_TESTS_FREE_TIER_HOST: ${e2e_tests_free_tier_host}
      E2E_TESTS_ATLAS_USERNAME: ${e2e_tests_atlas_username}
      E2E_TESTS_ATLAS_PASSWORD: ${e2e_tests_atlas_password}
      E2E_TESTS_ATLAS_X509_PEM: ${e2e_tests_atlas_x509_pem}
      NOTARY_URL: http://notary-service.build.10gen.cc:5000
      NOTARY_AUTH_TOKEN: ${signing_auth_token}
      NOTARY_SIGNING_KEY: ${signing_key_name}
      NOTARY_SIGNING_COMMENT: Evergreen project mongodb/compass ${revision} - ${build_variant} - ${branch_name}
      APPLE_CREDENTIALS: '{\"appleUsername\": \"${apple_username}\", \"applePassword\": \"${apple_password}\"}'
      GITHUB_TOKEN: ${devtoolsbot_github_token}
      DOWNLOAD_CENTER_AWS_ACCESS_KEY_ID: ${aws_key_evergreen_integrations}
      DOWNLOAD_CENTER_AWS_SECRET_ACCESS_KEY: ${aws_secret_evergreen_integrations}


post:
  - &save-diagnostic-file
    <<: *save-artifact
    params:
      local_files_include_filter:
        - src/.deps/.npm/_logs/*.log
      remote_file: ${project}/${revision}/${build_variant}/${task_name}
      content_type: text/plain
  - <<: *save-diagnostic-file
    params:
      local_files_include_filter:
        - src/packages/compass-e2e-tests/.log/**/*.log
        - src/packages/compass-e2e-tests/.log/**/*.json
  - <<: *save-diagnostic-file
    params:
      local_files_include_filter:
        - ~/.mongodb/runner/*.log
  - command: attach.results
    params:
      file_location: src/packages/compass-e2e-tests/.log/report.json

functions:
  prepare:
    - command: git.get_project
      params:
        directory: src

    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
        script: |
          set -e
          eval $(.evergreen/print-compass-env.sh)

          # Make all the dirs
          mkdir -p $ARTIFACTS_PATH
          mkdir -p $NPM_CACHE_DIR
          mkdir -p $NPM_TMP_DIR

    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
        script: |
          set -e
          eval $(.evergreen/print-compass-env.sh)

          .evergreen/preinstall.sh

          # Make sure install worked
          echo "node -v";
          node -v;
          echo "npm -v";
          npm -v;

  install:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
        script: |
          set -e
          eval $(.evergreen/print-compass-env.sh)

          echo "Installing Compass dependencies with the following npm configuration"
          npm config ls -l
          echo "(if npm fails, debug.log will be uploaded to S3)"

          # Install dependencies and prepare all workspaces
          npm run bootstrap-ci --unsafe-perm -- --stream

  verify:
    command: shell.exec
    params:
      working_dir: src
      shell: bash
      env:
        <<: *compass-env
      script: |
        set -e
        eval $(.evergreen/print-compass-env.sh)

        echo "Run static analysis..."
        npm run check-ci

  test:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
        script: |
          set -e

          # Load environment variables
          eval $(.evergreen/print-compass-env.sh)

          echo "Running tests"

          .evergreen/pretest.sh

          # NOTE (@imlucas) Starting with MongoDB 4.0.4, the Server binaries
          # have dropped support for macOS 10.10 because it is now outside
          # of the supported version range.
          # https://docs.google.com/document/d/1IfQGC7wTtrlsc2SqURirvt_4uMuU606nXNbu-stw6bQ/edit
          # debug option is not very useful in normal runs, but helpful when
          # debugging any issues with tests. Set to "mocha*", "hadron*", or
          # "mongo*" for some helpful output from the test tooling we are using
          DEBUG=${debug} MONGODB_VERSION=${mongodb_version|4} npm run test-ci --unsafe-perm -- --stream

  package:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
        script: |
          set -e
          # Load environment variables
          eval $(.evergreen/print-compass-env.sh)

          echo "Synchronizing evergreen environment from Compass build tools..."

          # Generates and expansion file with build target metadata in packages/compass/expansions.yml
          npm run evergreen-expansions ${compass_distribution} --workspace mongodb-compass
    - command: expansions.update
      params:
        # The only variables used from hadron-build generated expansions seems
        # to be all the `*_filename` vars and nothing else
        file: src/packages/compass/expansions.yml
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
          # NOTE: anything added here should also be added to export-compass-env.js
          DEBUG: ${debug}
          npm_config_loglevel: ${npm_loglevel}
          COMPASS_DISTRIBUTION: ${compass_distribution}
        script: |
          set -e

          eval $(.evergreen/print-compass-env.sh)

          if [ `uname` == Darwin ]; then
            # write env vars (including secrets) to a script so we can restore them after running ssh
            .evergreen/export-compass-env.js >> env-vars.sh

            echo "Signing via ssh tunnel..."
            ssh -v -p 2222 localhost "cd ${workdir}/src/; .evergreen/package_mac.sh"

            rm env-vars.sh
          else
            .evergreen/package_notmac.sh
          fi

  publish:
    command: shell.exec
    params:
      working_dir: src
      shell: bash
      env:
        <<: *compass-env
      script: |
        set -e
        # Load environment variables
        eval $(.evergreen/print-compass-env.sh)

        echo "Uploading release assets to S3 and GitHub if needed..."
        npm run upload ${compass_distribution} --workspace mongodb-compass

  'save windows artifacts':
    # setup
    - <<: *save-artifact
      params:
        local_file: src/packages/compass/dist/${windows_setup_filename}
        remote_file: ${project}/${revision}/${windows_setup_filename}
    # MSI
    - <<: *save-artifact
      params:
        local_file: src/packages/compass/dist/${windows_msi_filename}
        remote_file: ${project}/${revision}/${windows_msi_filename}
    # ZIP
    - <<: *save-artifact
      params:
        local_file: src/packages/compass/dist/${windows_zip_filename}
        remote_file: ${project}/${revision}/${windows_zip_filename}
        content_type: application/zip
    # RELEASES file
    - <<: *save-artifact
      params:
        local_file: src/packages/compass/dist/RELEASES
        remote_file: ${project}/${revision}/${compass_distribution}-RELEASES
    # nupkg full
    - <<: *save-artifact
      params:
        local_file: src/packages/compass/dist/${windows_nupkg_full_filename}
        remote_file: ${project}/${revision}/${windows_nupkg_full_filename}

  'save osx artifacts':
    # .dmg
    - <<: *save-artifact
      params:
        local_file: src/packages/compass/dist/${osx_dmg_filename}
        remote_file: ${project}/${revision}/${osx_dmg_filename}
        content_type: 'application/x-apple-diskimage'
    # .zip
    - <<: *save-artifact
      params:
        local_file: src/packages/compass/dist/${osx_zip_filename}
        remote_file: ${project}/${revision}/${osx_zip_filename}
        content_type: application/zip

  'save linux artifacts':
    # .deb
    - <<: *save-artifact
      params:
        local_file: src/packages/compass/dist/${linux_deb_filename}
        remote_file: ${project}/${revision}/${linux_deb_filename}
        content_type: 'application/vnd.debian.binary-package'
    # .tar.gz
    - <<: *save-artifact
      params:
        local_file: src/packages/compass/dist/${linux_tar_filename}
        remote_file: ${project}/${revision}/${linux_tar_filename}
        content_type: application/x-gzip

  'save rhel artifacts':
    # .rpm
    - <<: *save-artifact
      params:
        local_file: src/packages/compass/dist/${linux_rpm_filename}
        remote_file: ${project}/${revision}/${linux_rpm_filename}
        content_type: application/x-redhat-package-manager
    # .tar.gz
    - <<: *save-artifact
      params:
        local_file: src/packages/compass/dist/${linux_tar_filename}
        remote_file: ${project}/${revision}/${linux_tar_filename}
        content_type: application/x-gzip

# Tasks
tasks:
  - name: oneshot-compile-test-package-publish
    commands:
      - func: prepare

      - func: install

      - func: verify
        variants: [windows, macos, ubuntu, rhel]

      - func: test
        vars:
          debug: 'hadron*,mongo*,compass-e2e-tests*'

      - func: package
        vars:
          npm_loglevel: http
          debug: 'hadron*,mongo*,compass*'
          compass_distribution: compass
      - func: publish
        vars:
          compass_distribution: compass
      - func: 'save windows artifacts'
        variants: [windows]
      - func: 'save osx artifacts'
        variants: [macos]
      - func: 'save linux artifacts'
        variants: [ubuntu]
      - func: 'save rhel artifacts'
        variants: [rhel]

      - func: package
        vars:
          npm_loglevel: http
          debug: 'hadron*,mongo*,compass*'
          compass_distribution: compass-isolated
      - func: publish
        vars:
          compass_distribution: compass-isolated
      - func: 'save windows artifacts'
        variants: [windows]
      - func: 'save osx artifacts'
        variants: [macos]
      - func: 'save linux artifacts'
        variants: [ubuntu]
      - func: 'save rhel artifacts'
        variants: [rhel]

      - func: package
        vars:
          npm_loglevel: http
          debug: 'hadron*,mongo*,compass*'
          compass_distribution: compass-readonly
      - func: publish
        vars:
          compass_distribution: compass-readonly
      - func: 'save windows artifacts'
        variants: [windows]
      - func: 'save osx artifacts'
        variants: [macos]
      - func: 'save linux artifacts'
        variants: [ubuntu]
      - func: 'save rhel artifacts'
        variants: [rhel]

# TODO (@imlucas) determine OS/version deprecation policy, following server, so we don't fall behind
# what maximal resources we're using.
# See https://docs.google.com/document/d/1IfQGC7wTtrlsc2SqURirvt_4uMuU606nXNbu-stw6bQ/edit
buildvariants:
  - name: macos
    display_name: MacOS
    run_on: macos-1014-codesign
    tasks:
      - name: oneshot-compile-test-package-publish

  - name: windows
    display_name: Windows
    run_on: windows-vsCurrent-large
    expansions:
      compass_distribution: compass
    tasks:
      - name: oneshot-compile-test-package-publish

  - name: ubuntu
    display_name: Ubuntu
    run_on: ubuntu1604-large
    tasks:
      - name: oneshot-compile-test-package-publish

  - name: rhel
    display_name: RHEL
    run_on: rhel76-large
    tasks:
      - name: oneshot-compile-test-package-publish
