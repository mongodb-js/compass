#######################################################################################
# Compass Evergreen CI configuration
#
# References:
# https://github.com/evergreen-ci/evergreen/wiki/Project-Files
# https://github.com/evergreen-ci/evergreen/blob/master/config_dev/project/sample.yml
#######################################################################################

stepback: false

variables:
# function "save release variants" is conditional on the following
# -> all except ubuntu
- &save_release_variants
  - osx-1010
  - windows-64


#######################################
#            Functions                #
#######################################

functions:
  "fetch source" :
    - command: git.get_project
      params:
        directory: src
    - command: git.apply_patch
      params:
        directory: src

  # Install node,npm from a tarball in S3 to src/.deps/bin
  # To use "npm" installed by this, each shell.exec script must add:
  #     export PATH="$PATH:${node_path|}"
  #
  # Only when this is a single-step command can we reuse via *fetch_npm_tarball below.
  #
  # Ubuntu:   has curl+wget
  # Windows:  has curl
  # OSX:      has curl
  #
  # So we use curl.
  # Tried "command: s3.get" but it's challenging to blend into "setup ci" below.
  # Also, command "s3.get"s extract_to target chokes on symlinks. EVG-609.
  #
  "fetch npm tarball" : &fetch_npm_tarball
    command: shell.exec
    params:
      working_dir: src
      script: |
        mkdir -p .deps
        set -ev
        curl -fs \
          -o ".deps/${fetch_npm_tarball}" \
          --url "http://mongodb-dx-public.s3.amazonaws.com/evergreen-deps/${fetch_npm_tarball}"
        cd .deps
        tar xzf ${fetch_npm_tarball} --strip-components=1

  "chmod npm" :
    command: shell.exec
    params:
      working_dir: src/.deps
      script: |
        set -ev
        chmod +x npm.cmd

  "npm install" :
    command: shell.exec
    params:
      working_dir: src
      script: |
        set -ev
        export CI=1
        export EVERGREEN=1
        export PATH="${node_path}:$PATH"
        ls -alh ${node_path}
        test -n '${add_env_appdata|}' && export APPDATA='${add_env_appdata|}'
        ${npm|npm} version --json
        # less chatty installs: "--depth 0" reduces detail of "npm ls" tree output
        export NPM_CONFIG_DEPTH=0
        export NPM_CONFIG_LOGLEVEL=error
        ${npm|npm} install
        # INT-1081 Attach parseable log of installed packages.
        # Don't allow it to fail build.
        ${npm|npm} ls --depth=Infinity --json=true > npm_install.json || true

  # For Windows: retrieve a fake "signtool.exe" which proxies to notary-service,
  # and remove the real one from our path. Must run after "npm install"
  "fetch signtool" : &fetch_signtool
    command: shell.exec
    params:
      working_dir: src
      script: |
        set -ev
        curl -fs \
          -o "signtool.exe" \
          --url "https://s3.amazonaws.com/boxes.10gen.com/build/signtool.exe"
        rm -f node_modules/electron-winstaller/vendor/signtool.exe
        chmod +x signtool.exe

  # Environment variables set for use by notary-service signtool.exe on Windows:
  # NOTARY_URL, NOTARY_AUTH_TOKEN, NOTARY_SIGNING_KEY, NOTARY_SIGNING_COMMENT
  #
  # SIGNTOOL_PARAMS is set to a non-empty value to activate signing logic in Squirrel.Windows
  #
  "build" :
    command: shell.exec
    params:
      working_dir: src
      script: |
        set -ev
        rm -f ~/compass_build.log
        cat <<EOF_BUILD_SH > ~/compass_build.sh
        set -ev
        cd $(pwd)
        export PATH="${node_path}:$PATH"
        export CI=1
        export EVERGREEN=1
        export EVERGREEN_PROJECT=${project}
        export NOTARY_URL="http://notary-service.build.10gen.cc:5000"
        export NOTARY_AUTH_TOKEN="${signing_auth_token}"
        export NOTARY_SIGNING_KEY="${signing_key_name}"
        export NOTARY_SIGNING_COMMENT="Evergreen project mongodb/compass ${revision} - ${build_variant} - ${branch_name}"
        export SIGNTOOL_PARAMS="yes"
        test -n '${add_env_appdata|}' && export APPDATA='${add_env_appdata|}'

        # Run static analysis on code and project configuration
        # ${npm|npm} run check

        # Create a release build
        ${npm|npm} run release;

        ls -alh dist/

        # Test the release build
        ${npm|npm} run test-unit;
        EOF_BUILD_SH

        #
        # Use ".", not "source" below to read script. Required for /bin/sh on Ubuntu.
        #
        if [ -n "${build_via_local_tunnel|}" ]
        then
          ssh -v -p 2222 localhost ". compass_build.sh"
        else
          . ~/compass_build.sh
        fi

  "test_ssh_localhost" :
    command: shell.exec
    params:
      working_dir: src
      script: |
        set -ev
        if [ -n "${build_via_local_tunnel|}" ]
        then
          ssh -p 2222 localhost "echo SSH_LOCALHOST_TEST_OK"
        fi

  "save npm_install.json":
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: "src/npm_install.json"
      remote_file: "${project}/${build_variant}/${revision}/npm_install.json"
      bucket: mciuploads
      permissions: public-read
      content_type: application/json
      display_name: "npm_install.json"

  "save windows artifacts":
    # setup
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/dist/${windows_setup_filename}"
        remote_file: "${project}/${build_variant}/${revision}/${windows_setup_filename}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
        display_name: "${windows_setup_label}"
    # MSI
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/dist/${windows_msi_filename}"
        remote_file: "${project}/${build_variant}/${revision}/${windows_msi_filename}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
        display_name: "${windows_msi_label}"
    # ZIP
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/dist/${windows_zip_filename}"
        remote_file: "${project}/${build_variant}/${revision}/${windows_zip_filename}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/zip
        display_name: "${windows_zip_label}"
    # RELEASES file
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/dist/RELEASES"
        remote_file: "${project}/${build_variant}/${revision}/RELEASES"
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
        display_name: "RELEASES"
    # nupkg full
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/dist/${windows_nupkg_full_filename}"
        remote_file: "${project}/${build_variant}/${revision}/${windows_nupkg_full_filename}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
        display_name: "${windows_nupkg_full_label}"

  "save osx artifacts":
    # .dmg
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/dist/${osx_dmg_filename}"
        remote_file: "${project}/${build_variant}/${revision}/${osx_dmg_filename}"
        bucket: mciuploads
        permissions: public-read
        content_type: "application/x-apple-diskimage"
        display_name: "${osx_dmg_label}"
    # .zip
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/dist/${osx_zip_filename}"
        remote_file: "${project}/${build_variant}/${revision}/${osx_zip_filename}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/zip
        display_name: "${osx_zip_label}"

  "save LICENSE":
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: "src/dist/LICENSE"
      remote_file: "${project}/${build_variant}/${revision}/LICENSE"
      bucket: mciuploads
      permissions: public-read
      content_type: text/plain
      display_name: LICENSE

  "save version":
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: "src/dist/version"
      remote_file: "${project}/${build_variant}/${revision}/version"
      bucket: mciuploads
      permissions: public-read
      content_type: text/plain
      display_name: version

  "upload release":
    command: shell.exec
    params:
      working_dir: src
      script: |
        set -ev
        export DEBUG=*;
        export PATH="${node_path}:$PATH"
        export CI=1
        export EVERGREEN=1
        test -n '${add_env_appdata|}' && export APPDATA='${add_env_appdata|}'
        ${npm|npm} run upload;


#######################################
#               Tasks                 #
#######################################

pre:
- command: shell.track
- command: shell.exec
  params:
    silent: true
    script: |
      ${killall_evergreen|pkill -9 mongod; pkill -9 mongos; pkill -9 mongo} >/dev/null 2>&1
      rm -rf src /data/db/*
      mkdir -p src

post:
- command: attach.results
  params:
    file_location: src/report.json
- command: shell.exec
  params:
    silent: true
    script: |
      ${killall_evergreen|pkill -9 mongod; pkill -9 mongos; pkill -9 mongo} >/dev/null 2>&1
      exit 0
- command: shell.cleanup


tasks:
- name: compile
  depends_on: []
  commands:
  - func: "test_ssh_localhost"
    variants:
      - osx-1010
  - func: "fetch source"
  - func: "fetch npm tarball"
  - func: "chmod npm"
    variants:
      - windows-64
  - func: "npm install"
  - command: shell.exec
    params:
      working_dir: src
      script: |
        set -ev
        export PATH="${node_path}:$PATH"
        test -n '${add_env_appdata|}' && export APPDATA='${add_env_appdata|}'
        ${npm|npm} run evergreen-expansions
        cat expansions.yml
  - command: expansions.update
    params:
      file: src/expansions.yml
  - func: "fetch signtool"
    variants:
      - windows-64
  - func: "build"
  - func: "save npm_install.json"
  - func: "save windows artifacts"
    variants:
      - windows-64
  - func: "save osx artifacts"
    variants:
      - osx-1010
  - func: "save LICENSE"
    variants:
      - windows-64
  - func: "save version"
    variants:
      - windows-64
  - func: "upload release"

# Define shortcut for use below
variables:
- &all_tasks
  - name: compile

#######################################
#           Buildvariants             #
#######################################

buildvariants:
- name: osx-1010
  display_name: OS X 10.10
  modules: ~
  run_on:
  - "osx-1010-compass"
  expansions:
    build_via_local_tunnel: true
    fetch_npm_tarball: node-v5.5.0-npm-3.3.12-darwin-x64.tgz
    node_path: "$(pwd)/.deps/bin"
    num_cores: $(sysctl -n hw.logicalcpu)
  tasks:
    *all_tasks

- name: windows-64
  display_name: Windows 64-bit
  modules: ~
  run_on:
  - "windows-64-vs2013-test"
  expansions:
    fetch_npm_tarball: node-v5.5.0-npm-3.3.12-windows-x64.tgz
    node_path: "$(pwd)/.deps"
    num_cores: $(grep -c ^processor /proc/cpuinfo)
    add_env_appdata: Z:\
  tasks:
    *all_tasks

- name: ubuntu
  display_name: Ubuntu 14.04
  modules: ~
  run_on:
  - "ubuntu1404-test"
  expansions:
    fetch_npm_tarball: node-v5.5.0-npm-3.3.12-linux-x64.tgz
    node_path: "$(pwd)/.deps/bin"
    compile_env: CC=/opt/mongodbtoolchain/bin/gcc CXX=/opt/mongodbtoolchain/bin/g++
    num_cores: $(grep -c ^processor /proc/cpuinfo)
  tasks:
    *all_tasks
