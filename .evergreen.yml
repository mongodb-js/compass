#######################################################################################
# Compass Evergreen CI configuration
#
# References:
# https://github.com/evergreen-ci/evergreen/wiki/Project-Files
# https://github.com/evergreen-ci/evergreen/blob/master/config_dev/project/sample.yml
#######################################################################################

stepback: false

pre:
- command: shell.track

post:
- command: shell.cleanup

variables:
# function "fetch npm tarball" is conditional on the following
# -> all except windows
- &fetch_npm_tarball_variants
  - osx-108
  - ubuntu

# function "upgrade npm windows" is conditional based on {upgrade_npm_version}
# as set in the buildvariant declaration
# -> only windows

# function "save release variants" is conditional on the following
# -> all except ubuntu
- &save_release_variants
  - osx-108
  - windows-64


#######################################
#            Functions                #
#######################################

functions:
  "fetch source" :
    - command: git.get_project
      params:
        directory: src
    - command: git.apply_patch
      params:
        directory: src
    - command: shell.exec
      params:
        working_dir: src
        script: |
          mkdir .deps

  # Install node,npm from a tarball in S3 to src/.deps/bin
  # To use "npm" installed by this, each shell.exec script must add:
  #     export PATH="$PATH:${node_path|}"
  "fetch npm tarball" :
    - command: s3.get
      params:
        build_variants:
          *fetch_npm_tarball_variants
        aws_key: ${aws_key_evergreen_integrations}
        aws_secret: ${aws_secret_evergreen_integrations}
        bucket: mongodb-dx-public
        remote_file: evergreen-deps/${fetch_npm_tarball}
        local_file: src/.deps/${fetch_npm_tarball}
    - command: shell.exec
      params:
        working_dir: src/.deps
        script: |
          if [ -z "${fetch_npm_tarball|}" ]; then
            echo "fetch_npm_tarball: fetch_npm_tarball is unset; skipping"
            exit 0
          fi
          set -ev
          tar xzf ${fetch_npm_tarball} --strip-components=1
          ls

  # THIS COMMAND WORKS ON WINDOWS ONLY, SHOULD BE CONSIDERED OBSOLETE
  # To use "npm" installed by this, each shell.exec script must add:
  #     export PATH="`npm -g bin`:$PATH"
  "upgrade npm windows" :
    - command: shell.exec
      params:
        working_dir: src
        script: |
          if [ -z "${upgrade_npm_version|}" ]; then
            echo "upgrade_npm: upgrade_npm_version is unset; skipping"
            exit 0
          fi
          set -ev
          test -n "${add_environment|}" && export "${add_environment|}"
          export PATH="$PATH:${node_path|}"
          ${npm|npm} install -g npm@${upgrade_npm_version|xx}

  "npm install" :
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -ev
          test -n "${add_environment|}" && export "${add_environment|}"
          export PATH="$PATH:${node_path|}"
          export PATH="`npm -g bin`:$PATH"
          ${node|node} --version
          ${npm|npm} --version
          ${npm|npm} config set loglevel error
          ${npm|npm} config -g list -l
          ${npm|npm} install

  "build" :
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -ev
          test -n "${add_environment|}" && export "${add_environment|}"
          export PATH="$PATH:${node_path|}"
          export PATH="`npm -g bin`:$PATH"
          ${npm|npm} run ci
          ${npm|npm} run test
          ${npm|npm} run release

  "save release":
    - command: s3.put
      params:
        build_variants:
          *save_release_variants
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/dist/${installer_filename}"
        remote_file: "mongodbjs-scout-master/${build_variant}/${revision}/${installer_filename}"
        bucket: mciuploads
        permissions: public-read
        content_type: ${installer_content_type|application/octet-stream}
        display_name: "Installer: ${installer_filename}"

#######################################
#               Tasks                 #
#######################################

tasks:
- name: compile
  depends_on: []
  commands:
  - func: "fetch source"
  - func: "fetch npm tarball"
  - func: "upgrade npm windows"
  - func: "npm install"
  - func: "build"
  - func: "save release"


#######################################
#           Buildvariants             #
#######################################

buildvariants:
- name: osx-108
  display_name: OS X 10.8
  modules: ~
  run_on:
  - "osx-108"
  expansions:
    fetch_npm_tarball: node-v0.12.7-npm-3.3.5-darwin-x64.tgz
    node_path: "$(pwd)/.deps/bin"
    installer_content_type: "application/x-apple-diskimage"
    installer_filename: "MongoDB Compass.dmg"
    num_cores: $(sysctl -n hw.logicalcpu)
  tasks:
  - name: compile

- name: windows-64
  display_name: Windows 64-bit
  modules: ~
  run_on:
  - "windows-64-vs2013-test"
  expansions:
    add_environment: "APPDATA=C:\\Program Files (x86)\\nodejs\\node_modules"
    upgrade_npm_version: "3"
    node_path: "/cygdrive/c/Program Files (x86)/nodejs"
    installer_content_type: "application/octet-stream"
    installer_filename: "MongoDBCompassSetup.exe"
    num_cores: $(grep -c ^processor /proc/cpuinfo)
  tasks:
  - name: compile

- name: ubuntu
  display_name: Ubuntu 14.04
  modules: ~
  run_on:
  - "ubuntu1404-test"
  expansions:
    fetch_npm_tarball: node-v0.12.7-npm-3.3.5-linux-x64.tar.gz
    node_path: "$(pwd)/.deps/bin"
    compile_env: CC=/opt/mongodbtoolchain/bin/gcc CXX=/opt/mongodbtoolchain/bin/g++
    num_cores: $(grep -c ^processor /proc/cpuinfo)
  tasks:
  - name: compile
