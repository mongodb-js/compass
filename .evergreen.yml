#######################################################################################
# Compass Evergreen CI configuration
#
# References:
# https://github.com/evergreen-ci/evergreen/wiki/Project-Files
# https://github.com/evergreen-ci/evergreen/blob/master/config_dev/project/sample.yml
#######################################################################################

stepback: false

# Upper bound on any shell.exec task. 30 min should be plenty of time.
exec_timeout_secs: 1800

#######################################
#            Functions                #
#######################################
functions:
  "configure":
      command: shell.exec
      params:
        working_dir: src
        script: |
          set -ev
          cat <<EOF_BUILD_SH > ~/compass_env.sh
          export PATH="${node_path}:$PATH"
          export APPDATA=${add_env_appdata|}
          export CI=1
          export EVERGREEN=1

          # Tweak as needed for more or less debugging output in logs
          export DEBUG="hadron*,electron*,mongodb-notary-service*";

          # Make default evergreen expansions accessible to hadron-build
          export EVERGREEN_ASSET_PREFIX="s3://mciuploads/${project}/${revision}";
          export EVERGREEN_AUTHOR="${author}";
          export EVERGREEN_AWS_ACCESS_KEY_ID="${aws_key}";
          export EVERGREEN_AWS_SECRET_ACCESS_KEY="${aws_secret}";
          export EVERGREEN_BRANCH_NAME="${branch_name}";
          export EVERGREEN_BUILD_ID="${build_id}";
          export EVERGREEN_BUILD_VARIANT="${build_variant}";
          export EVERGREEN_EXECUTION="${execution}";
          export EVERGREEN_IS_PATCH=${is_patch};
          export EVERGREEN_PROJECT="${project}";
          export EVERGREEN_REVISION="${revision}";
          export EVERGREEN_TASK_ID="${task_id}";
          export EVERGREEN_TASK_NAME="${task_name}";
          export EVERGREEN_TASK_URL="https://evergreen.mongodb.com/task/${task_id}";
          export EVERGREEN_VERSION_ID="${version_id}";
          export EVERGREEN_WORKDIR="${workdir}";

          # Required to sign release assets
          export NOTARY_URL="http://notary-service.build.10gen.cc:5000"
          export NOTARY_AUTH_TOKEN="${signing_auth_token}"
          export NOTARY_SIGNING_KEY="${signing_key_name}"
          export NOTARY_SIGNING_COMMENT="Evergreen project mongodb/compass ${revision} - ${build_variant} - ${branch_name}"

          # Required to upload release assets to GitHub
          export GITHUB_TOKEN=${leafybot_github_token}

          # Required to upload release assets to s3 for download center
          export DOWNLOAD_CENTER_AWS_ACCESS_KEY_ID=${aws_key_evergreen_integrations}
          export DOWNLOAD_CENTER_AWS_SECRET_ACCESS_KEY=${aws_secret_evergreen_integrations}
          EOF_BUILD_SH

  "install" :
    command: shell.exec
    params:
      working_dir: src
      script: |
        set -ev
        # Load environment variables generated by `configure`
        . ~/compass_env.sh
        echo "//registry.npmjs.org/:_authToken=${compass_npm_token}" >> .npmrc
        npm install -g node-gyp yarn
        npm install
        npm run evergreen-expansions ${compass_distribution}
        cat expansions.yml

  "build" :
    command: shell.exec
    params:
      working_dir: src
      script: |
        set -ev
        cat <<EOF_BUILD_SH > ~/compass_build.sh
        cd $(pwd)
        # Load environment variables
        . ~/compass_env.sh

        # Run static analysis on code and project configuration
        npm run check;

        # Create a release build
        npm run release ${compass_distribution};
        ls -alh dist || true;

        # Upload release assets to S3 and GitHub
        npm run upload ${compass_distribution}
        EOF_BUILD_SH

        #
        # Use ".", not "source" below to read script. Required for /bin/sh on Ubuntu.
        #
        if [ -n "${build_via_local_tunnel|}" ]
        then
          ssh -v -p 2222 localhost ". compass_build.sh"
        else
          . ~/compass_build.sh
        fi

  "test_ssh_localhost" :
    command: shell.exec
    params:
      working_dir: src
      script: |
        set -ev
        if [ -n "${build_via_local_tunnel|}" ]
        then
          ssh -p 2222 localhost "echo SSH_LOCALHOST_TEST_OK"
        fi

  "save windows artifacts":
    # setup
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/dist/${windows_setup_filename}
        remote_file: ${project}/${revision}/${windows_setup_filename}
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
        display_name: windows-installer
    # MSI
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/dist/${windows_msi_filename}
        remote_file: ${project}/${revision}/${windows_msi_filename}
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
        display_name: windows-msi-installer
    # ZIP
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/dist/${windows_zip_filename}
        remote_file: ${project}/${revision}/${windows_zip_filename}
        bucket: mciuploads
        permissions: public-read
        content_type: application/zip
        display_name: windows-zip
    # RELEASES file
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/dist/RELEASES
        remote_file: ${project}/${revision}/${compass_distribution}-RELEASES
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
        display_name: windows-auto-update-manifest
    # nupkg full
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/dist/${windows_nupkg_full_filename}
        remote_file: ${project}/${revision}/${windows_nupkg_full_filename}
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
        display_name: windows-auto-update-payload

  "save osx artifacts":
    # .dmg
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/dist/${osx_dmg_filename}
        remote_file: ${project}/${revision}/${osx_dmg_filename}
        bucket: mciuploads
        permissions: public-read
        content_type: "application/x-apple-diskimage"
        display_name: macos-installer
    # .zip
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/dist/${osx_zip_filename}
        remote_file: ${project}/${revision}/${osx_zip_filename}
        bucket: mciuploads
        permissions: public-read
        content_type: application/zip
        display_name: macos-auto-update-payload

  "save linux artifacts":
    # .deb
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/dist/${linux_deb_filename}
        remote_file: ${project}/${revision}/${linux_deb_filename}
        bucket: mciuploads
        permissions: public-read
        content_type: "application/vnd.debian.binary-package"
        display_name: linux-deb-installer
    # .tar.gz
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/dist/${linux_tar_filename}
        remote_file: ${project}/${revision}/${linux_tar_filename}
        bucket: mciuploads
        permissions: public-read
        content_type: application/x-gzip
        display_name: linux-tarball

  "save rhel artifacts":
    # .rpm
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/dist/${linux_rpm_filename}
        remote_file: ${project}/${revision}/${linux_rpm_filename}
        bucket: mciuploads
        permissions: public-read
        content_type: application/x-redhat-package-manager
        display_name: linux-rpm-installer
    # .tar.gz
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/dist/${linux_tar_filename}
        remote_file: ${project}/${revision}/${linux_tar_filename}
        bucket: mciuploads
        permissions: public-read
        content_type: application/x-gzip
        display_name: linux-rhel-tarball

#######################################
#               Tasks                 #
#######################################

pre:
- command: shell.exec
  params:
    silent: true
    script: |
      set -ev
      rm -rf src /data/db/*
      mkdir -p src

tasks:
- name: compile
  depends_on: []
  commands:
  - func: "test_ssh_localhost"
    variants:
      - macos-compass
      - macos-compass-community
  - command: git.get_project
    params:
      directory: src
  - command: git.apply_patch
    params:
      directory: src
  # TODO (imlucas) We should
  # - 1. get this out of bash. npm already on these boxes and must be existing
  #   modules to do this already out there/already written them.
  # - 2. use precompiled node.js binaries from source instead of
  #  maintaining our own. See https://nodejs.org/download/release/v7.3.0/
  - command: shell.exec
    params:
      working_dir: src
      script: |
        mkdir -p .deps
        set -ev
        # is node already installed?
        npm version || true

        # Get precompiled
        curl -fs \
          -o ".deps/${fetch_npm_tarball}" \
          --url "http://mongodb-dx-public.s3.amazonaws.com/evergreen-deps/${fetch_npm_tarball}"
        cd .deps
        tar xzf ${fetch_npm_tarball} --strip-components=1

        chmod +x npm.cmd || true

    # TODO (imlucas) Move this to `hadron-build`. Way too much bash
    # in this process no one else knows exists already.
    # For Windows: retrieve a fake "signtool.exe" which proxies to notary-service,
    # and remove the real one from our path. Must run after "npm install"
  - command: shell.exec
    params:
      working_dir: src
      script: |
        set -ev
        curl -fs \
          -o "signtool.exe" \
          --url "https://s3.amazonaws.com/boxes.10gen.com/build/signtool.exe"
        rm -f node_modules/electron-winstaller/vendor/signtool.exe
        chmod +x signtool.exe
    variants:
      - windows-compass
      - windows-compass-community
  - command: shell.exec
    params:
      working_dir: src
      script: |
        set -ev
        wget https://github.com/mongodb-js/node-keytar/releases/download/v3.0.0/libsecret-1.so.0
        cp ./libsecret-1.so.0 /usr/lib64/libsecret-1.so.0
    variants:
      - rhel-compass
      - rhel-compass-community
  - func: "configure"
  - func: "install"
  - command: expansions.update
    params:
      file: src/expansions.yml
  - command: shell.exec
    params:
      working_dir: src
      script: |
        curl -fs \
          -o ".deps/macos-alias-0.2.11-abi-51.tgz" \
          --url "http://mongodb-dx-public.s3.amazonaws.com/evergreen-deps/macos-alias-0.2.11-abi-51.tgz"
        curl -fs \
          -o ".deps/fs-xattr-0.1.15-abi-51.tgz" \
          --url "http://mongodb-dx-public.s3.amazonaws.com/evergreen-deps/fs-xattr-0.1.15-abi-51.tgz"
        rm -rf node_modules/macos-alias
        rm -rf node_modules/fs-xattr
        cd .deps
        tar xzf macos-alias-0.2.11-abi-51.tgz
        tar xzf fs-xattr-0.1.15-abi-51.tgz
        mv node_modules/macos-alias ../node_modules/macos-alias
        mv node_modules/fs-xattr ../node_modules/fs-xattr
        rm -rf node_modules/
        cd ..
    variants:
      - macos-compass
      - macos-compass-community
  - func: "build"
  - func: "save windows artifacts"
    variants:
      - windows-compass
      - windows-compass-community
  - func: "save osx artifacts"
    variants:
      - macos-compass
      - macos-compass-community
  - func: "save linux artifacts"
    variants:
      - ubuntu-compass
      - ubuntu-compass-community
  - func: "save rhel artifacts"
    variants:
      - rhel-compass
      - rhel-compass-community

#######################################
#           Buildvariants             #
#######################################
# TODO (imlucas) Figure out how evergreen variables work here
# so we can reduce the copy and paste in `buildvariants` below.
#
# variables:
# - &variant
#   - name: platform-id-lowercase
#     display_name: platform-productName
#     modules: ~
#     run_on:
#       - "evergreen-distro-id"
#     expansions:
#       fetch_npm_tarball: node-v6.3.1-npm-3.10.3-linux-x64.tgz
#       node_path: "$(pwd)/.deps/bin"
#       compile_env: CC=/opt/mongodbtoolchain/bin/gcc CXX=/opt/mongodbtoolchain/bin/g++
#       num_cores: $(grep -c ^processor /proc/cpuinfo)
#     tasks:
#       - name: compile

buildvariants:
- name: macos-compass
  display_name: MacOS (Compass)
  modules: ~
  run_on:
  - "osx-1010-compass"
  expansions:
    build_via_local_tunnel: true
    fetch_npm_tarball: node-v7.4.0-darwin-x64.tgz
    node_path: "$(pwd)/.deps/bin"
    num_cores: $(sysctl -n hw.logicalcpu)
    compass_distribution: compass
  tasks:
    - name: compile

- name: macos-compass-community
  display_name: MacOS (Compass Community)
  modules: ~
  run_on:
  - "osx-1010-compass"
  expansions:
    build_via_local_tunnel: true
    fetch_npm_tarball: node-v7.4.0-darwin-x64.tgz
    node_path: "$(pwd)/.deps/bin"
    num_cores: $(sysctl -n hw.logicalcpu)
    compass_distribution: compass-community
  tasks:
    - name: compile

- name: windows-compass
  display_name: Windows (Compass)
  modules: ~
  run_on:
  - "windows-64-vs2013-test"
  expansions:
    fetch_npm_tarball: node-v7.4.0-win32-x64.tgz
    node_path: "$(pwd)/.deps"
    num_cores: $(grep -c ^processor /proc/cpuinfo)
    add_env_appdata: Z:\
    compass_distribution: compass
  tasks:
    - name: compile

- name: windows-compass-community
  display_name: Windows (Compass Community)
  modules: ~
  run_on:
  - "windows-64-vs2013-test"
  expansions:
    fetch_npm_tarball: node-v7.4.0-win32-x64.tgz
    node_path: "$(pwd)/.deps"
    num_cores: $(grep -c ^processor /proc/cpuinfo)
    add_env_appdata: Z:\
    compass_distribution: compass-community
  tasks:
    - name: compile

- name: ubuntu-compass
  display_name: Ubuntu (Compass)
  modules: ~
  run_on:
  - "ubuntu1404-test"
  expansions:
    fetch_npm_tarball: node-v7.4.0-linux-x64.tgz
    node_path: "$(pwd)/.deps/bin"
    compile_env: CC=/opt/mongodbtoolchain/bin/gcc CXX=/opt/mongodbtoolchain/bin/g++
    num_cores: $(grep -c ^processor /proc/cpuinfo)
    compass_distribution: compass
  tasks:
    - name: compile

- name: ubuntu-compass-community
  display_name: Ubuntu (Compass Community)
  modules: ~
  run_on:
  - "ubuntu1404-test"
  expansions:
    fetch_npm_tarball: node-v7.4.0-linux-x64.tgz
    node_path: "$(pwd)/.deps/bin"
    compile_env: CC=/opt/mongodbtoolchain/bin/gcc CXX=/opt/mongodbtoolchain/bin/g++
    num_cores: $(grep -c ^processor /proc/cpuinfo)
    compass_distribution: compass-community
  tasks:
    - name: compile

- name: rhel-compass
  display_name: RHEL (Compass)
  modules: ~
  run_on:
  - "rhel70"
  expansions:
    fetch_npm_tarball: node-v7.4.0-linux-x64.tgz
    node_path: "$(pwd)/.deps/bin"
    compile_env: CC=/opt/mongodbtoolchain/bin/gcc CXX=/opt/mongodbtoolchain/bin/g++
    num_cores: $(grep -c ^processor /proc/cpuinfo)
    compass_distribution: compass
  tasks:
    - name: compile

- name: rhel-compass-community
  display_name: RHEL (Compass Community)
  modules: ~
  run_on:
  - "rhel70"
  expansions:
    fetch_npm_tarball: node-v7.4.0-linux-x64.tgz
    node_path: "$(pwd)/.deps/bin"
    compile_env: CC=/opt/mongodbtoolchain/bin/gcc CXX=/opt/mongodbtoolchain/bin/g++
    num_cores: $(grep -c ^processor /proc/cpuinfo)
    compass_distribution: compass-community
  tasks:
    - name: compile
