#######################################################################################
# Compass Evergreen CI configuration
#
# References:
# https://github.com/evergreen-ci/evergreen/wiki/Project-Files
# https://github.com/evergreen-ci/evergreen/blob/master/config_dev/project/sample.yml
#######################################################################################

stepback: false

# Upper bound on any shell.exec task. 30 min should be plenty of time.
exec_timeout_secs: 1800

#######################################
#            Functions                #
#######################################
functions:
  "fetch source" :
    - command: git.get_project
      params:
        directory: src
    - command: git.apply_patch
      params:
        directory: src

  # TODO (imlucas) We should
  # - 1. get this out of bash. npm already on these boxes and must be existing
  #   modules to do this already out there/already written them.
  # - 2. use precompiled node.js binaries from source instead of
  #  maintaining our own. See https://nodejs.org/download/release/v7.3.0/
  "fetch npm tarball" : &fetch_npm_tarball
    command: shell.exec
    params:
      working_dir: src
      script: |
        mkdir -p .deps
        set -ev
        curl -fs \
          -o ".deps/${fetch_npm_tarball}" \
          --url "http://mongodb-dx-public.s3.amazonaws.com/evergreen-deps/${fetch_npm_tarball}"
        cd .deps
        tar xzf ${fetch_npm_tarball} --strip-components=1

  "chmod npm" :
    command: shell.exec
    params:
      working_dir: src/.deps
      script: |
        set -ev
        chmod +x npm.cmd

  "npm install" :
    command: shell.exec
    params:
      working_dir: src
      script: |
        set -ev
        export CI=1
        export EVERGREEN=1
        export PATH="${node_path}:$PATH"
        test -n '${add_env_appdata|}' && export APPDATA='${add_env_appdata|}'
        ${npm|npm} install node-gyp
        ${npm|npm} install

  # TODO (imlucas) Move this to `hadron-build`. Way too much bash
  # in this process no one else knows exists already.
  # For Windows: retrieve a fake "signtool.exe" which proxies to notary-service,
  # and remove the real one from our path. Must run after "npm install"
  "fetch signtool" : &fetch_signtool
    command: shell.exec
    params:
      working_dir: src
      script: |
        set -ev
        curl -fs \
          -o "signtool.exe" \
          --url "https://s3.amazonaws.com/boxes.10gen.com/build/signtool.exe"
        rm -f node_modules/electron-winstaller/vendor/signtool.exe
        chmod +x signtool.exe

  # Environment variables set for use by notary-service signtool.exe on Windows:
  # NOTARY_URL, NOTARY_AUTH_TOKEN, NOTARY_SIGNING_KEY, NOTARY_SIGNING_COMMENT
  #
  # SIGNTOOL_PARAMS is set to a non-empty value to activate signing logic in Squirrel.Windows
  #
  "build" :
    command: shell.exec
    params:
      working_dir: src
      script: |
        set -ev
        rm -f ~/compass_build.log
        cat <<EOF_BUILD_SH > ~/compass_build.sh
        cd $(pwd)
        export PATH="${node_path}:$PATH"
        test -n '${add_env_appdata|}' && export APPDATA='${add_env_appdata|}'
        export CI=1
        export EVERGREEN=1
        lsb_release -a --short || true

        # Export expansions as environment variables so we can use them
        # in hadron-build.
        # @see https://github.com/evergreen-ci/evergreen/wiki/Project-Files#default-expansions
        export EVERGREEN_ASSET_PREFIX="s3://mciuploads/${project}/${revision}";
        export EVERGREEN_AUTHOR="${author}";
        export EVERGREEN_AWS_ACCESS_KEY_ID="${aws_key}";
        export EVERGREEN_AWS_SECRET_ACCESS_KEY="${aws_secret}";
        export EVERGREEN_BRANCH_NAME="${branch_name}";
        export EVERGREEN_BUILD_ID="${build_id}";
        export EVERGREEN_BUILD_VARIANT="${build_variant}";
        export EVERGREEN_EXECUTION="${execution}";
        export EVERGREEN_IS_PATCH="${is_patch}";
        export EVERGREEN_PROJECT="${project}";
        export EVERGREEN_REVISION="${revision}";
        export EVERGREEN_TASK_ID="${task_id}";
        export EVERGREEN_TASK_NAME="${task_name}";
        export EVERGREEN_TASK_URL="https://evergreen.mongodb.com/task/${task_id}";
        export EVERGREEN_VERSION_ID="${version_id}";
        export EVERGREEN_WORKDIR="${workdir}";

        # Run static analysis on code and project configuration
        ${npm|npm} run check;

        # Create a release build
        export DEBUG="hadron*,electron*";
        export NOTARY_URL="http://notary-service.build.10gen.cc:5000"
        export NOTARY_AUTH_TOKEN="${signing_auth_token}"
        export NOTARY_SIGNING_KEY="${signing_key_name}"

        # TODO (imlucas) Do this in hadron-build instead:
        # process.env.NOTARY_SIGNING_COMMENT = process.env.EVERGREEN_PROJECT process.env.EVERGREEN_TASK_URL
        export NOTARY_SIGNING_COMMENT="Evergreen project mongodb/compass ${revision} - ${build_variant} - ${branch_name}"
        ${npm|npm} run release;

        ls -alh dist || true;

        # Upload release assets to S3 and GitHub
        export GITHUB_TOKEN=${leafybot_github_token}
        export DOWNLOAD_CENTER_AWS_ACCESS_KEY_ID=${aws_key_evergreen_integrations}
        export DOWNLOAD_CENTER_AWS_SECRET_ACCESS_KEY=${aws_secret_evergreen_integrations}
        ${npm|npm} run upload;
        EOF_BUILD_SH

        #
        # Use ".", not "source" below to read script. Required for /bin/sh on Ubuntu.
        #
        if [ -n "${build_via_local_tunnel|}" ]
        then
          ssh -v -p 2222 localhost ". compass_build.sh > build.log 2>&1"
        else
          . ~/compass_build.sh > build.log 2>&1
        fi

  "test_ssh_localhost" :
    command: shell.exec
    params:
      working_dir: src
      script: |
        set -ev
        if [ -n "${build_via_local_tunnel|}" ]
        then
          ssh -p 2222 localhost "echo SSH_LOCALHOST_TEST_OK"
        fi

  "save windows artifacts":
    # setup
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/dist/${windows_setup_filename}"
        remote_file: "${project}/${revision}/${windows_setup_filename}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
        display_name: "${windows_setup_filename}"
    # MSI
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/dist/${windows_msi_filename}"
        remote_file: "${project}/${revision}/${windows_msi_filename}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
        display_name: "${windows_msi_filename}"
    # ZIP
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/dist/${windows_zip_filename}"
        remote_file: "${project}/${revision}/${windows_zip_filename}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/zip
        display_name: "${windows_zip_filename}"
    # RELEASES file
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/dist/RELEASES"
        remote_file: "${project}/${revision}/RELEASES"
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
        display_name: "RELEASES"
    # nupkg full
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/dist/${windows_nupkg_full_filename}"
        remote_file: "${project}/${revision}/${windows_nupkg_full_filename}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
        display_name: "${windows_nupkg_full_label}"
    # Squirrel.Windows Packaging Log
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/node_modules/electron-winstaller/vendor/SquirrelSetup.log"
        remote_file: "${project}/${revision}/SquirrelSetup.log"
        bucket: mciuploads
        permissions: public-read
        content_type: text/plain
        display_name: "SquirrelSetup.log"

  "save osx artifacts":
    # .dmg
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/dist/${osx_dmg_filename}"
        remote_file: "${project}/${revision}/${osx_dmg_filename}"
        bucket: mciuploads
        permissions: public-read
        content_type: "application/x-apple-diskimage"
        display_name: "${osx_dmg_filename}"
    # .zip
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/dist/${osx_zip_filename}"
        remote_file: "${project}/${revision}/${osx_zip_filename}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/zip
        display_name: "${osx_zip_filename}"

  "save linux artifacts":
    # .deb
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/dist/${linux_deb_filename}"
        remote_file: "${project}/${revision}/${linux_deb_filename}"
        bucket: mciuploads
        permissions: public-read
        content_type: "application/vnd.debian.binary-package"
        display_name: "${linux_deb_filename}"
    # .tar.gz
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/dist/${linux_tar_filename}"
        remote_file: "${project}/${revision}/${linux_tar_filename}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/x-gzip
        display_name: "${linux_tar_filename}"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/build.log"
        remote_file: "${project}/${revision}/ubuntu-build.log"
        bucket: mciuploads
        permissions: public-read
        content_type: text/plain
        display_name: ubuntu-build.log

  "save rhel artifacts":
    # .rpm
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/dist/${linux_rpm_filename}"
        remote_file: "${project}/${revision}/${linux_rpm_filename}"
        bucket: mciuploads
        permissions: public-read
        content_type: application/x-redhat-package-manager
        display_name: "${linux_rpm_filename}"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/build.log"
        remote_file: "${project}/${revision}/rhel-build.log"
        bucket: mciuploads
        permissions: public-read
        content_type: text/plain
        display_name: rhel-build.log

#######################################
#               Tasks                 #
#######################################

pre:
- command: shell.exec
  params:
    silent: true
    script: |
      set -ev
      rm -rf src /data/db/*
      mkdir -p src

tasks:
- name: compile
  depends_on: []
  commands:
  - func: "test_ssh_localhost"
    variants:
      - macos
  - func: "fetch source"
  - func: "fetch npm tarball"
  - func: "chmod npm"
    variants:
      - windows
  - command: shell.exec
    params:
      working_dir: src
      script: |
        set -ev
        export CI=1
        export EVERGREEN=1
        export PATH="${node_path}:$PATH"
        wget https://github.com/mongodb-js/node-keytar/releases/download/v3.0.0/libsecret-1.so.0
        cp ./libsecret-1.so.0 /usr/lib64/libsecret-1.so.0
    variants:
      - rhel
  - func: "npm install"
  - command: shell.exec
    params:
      working_dir: src
      script: |
        set -ev
        export CI=1
        export EVERGREEN=1
        export PATH="${node_path}:$PATH"
        test -n '${add_env_appdata|}' && export APPDATA='${add_env_appdata|}'

        # NOTE (imlucas) Rather than lots of YAML/bash hacking in here,
        # `hadron-build` will do all of this in clean JS then spits out
        # YAML. `expansions.update` will then read `expansions.yml` so we can
        # just use `Target` properties as variables in this evergreen config file.
        #
        # @see https://github.com/mongodb-js/hadron-build/blob/master/commands/info.js
        ${npm|npm} run evergreen-expansions
        cat expansions.yml
  - command: expansions.update
    params:
      file: src/expansions.yml
  - func: "fetch signtool"
    variants:
      - windows
  - func: "build"
  - func: "save windows artifacts"
    variants:
      - windows
  - func: "save osx artifacts"
    variants:
      - macos
  - func: "save linux artifacts"
    variants:
      - ubuntu
  - func: "save rhel artifacts"
    variants:
      - rhel

#######################################
#           Buildvariants             #
#######################################
# TODO (imlucas) Figure out how evergreen variables work here
# so we can reduce the copy and paste in `buildvariants` below.
#
# variables:
# - &variant
#   - name: platform-id-lowercase
#     display_name: platform-productName
#     modules: ~
#     run_on:
#       - "evergreen-distro-id"
#     expansions:
#       fetch_npm_tarball: node-v6.3.1-npm-3.10.3-linux-x64.tgz
#       node_path: "$(pwd)/.deps/bin"
#       compile_env: CC=/opt/mongodbtoolchain/bin/gcc CXX=/opt/mongodbtoolchain/bin/g++
#       num_cores: $(grep -c ^processor /proc/cpuinfo)
#     tasks:
#       - name: compile

buildvariants:
- name: macos
  display_name: macOS
  modules: ~
  run_on:
  - "osx-1010-compass"
  expansions:
    build_via_local_tunnel: true
    fetch_npm_tarball: node-v6.3.1-npm-3.10.3-darwin-x64.tgz
    node_path: "$(pwd)/.deps/bin"
    num_cores: $(sysctl -n hw.logicalcpu)
  tasks:
    - name: compile

- name: windows
  display_name: Windows
  modules: ~
  run_on:
  - "windows-64-vs2013-test"
  expansions:
    fetch_npm_tarball: node-v6.3.1-npm-3.10.3-windows-x64.tgz
    node_path: "$(pwd)/.deps"
    num_cores: $(grep -c ^processor /proc/cpuinfo)
    add_env_appdata: Z:\
  tasks:
    - name: compile

- name: ubuntu
  display_name: Ubuntu
  modules: ~
  run_on:
  - "ubuntu1404-test"
  expansions:
    fetch_npm_tarball: node-v6.3.1-npm-3.10.3-linux-x64.tgz
    node_path: "$(pwd)/.deps/bin"
    compile_env: CC=/opt/mongodbtoolchain/bin/gcc CXX=/opt/mongodbtoolchain/bin/g++
    num_cores: $(grep -c ^processor /proc/cpuinfo)
  tasks:
    - name: compile

- name: rhel
  display_name: RHEL
  modules: ~
  run_on:
  - "rhel70"
  expansions:
    fetch_npm_tarball: node-v6.3.1-npm-3.10.3-linux-x64.tgz
    node_path: "$(pwd)/.deps/bin"
    compile_env: CC=/opt/mongodbtoolchain/bin/gcc CXX=/opt/mongodbtoolchain/bin/g++
    num_cores: $(grep -c ^processor /proc/cpuinfo)
  tasks:
    - name: compile
