# Javascript Templates
Templates:
  # Misc
  RegexFlags: &RegexFlags
    i: 'i'
    m: 'm'
    u: 'u'
    y: 'y'
    g: 'g'
  BSONRegexFlags: &BSONRegexFlags
    i: 'i'
    m: 'm'
    x: 'x'
    s: 's'
    l: 'l'
    u: 'u'
  # Syntax
  DriverTemplate: !!js/function &DriverTemplate |
    (spec) => {
        const comment = `/*
     * Requires the MongoDB Node.js Driver
     * https://mongodb.github.io/node-mongodb-native
     */`;
        const translateKey = {
            project: 'projection'
        };

        const exportMode = spec.exportMode;
        delete spec.exportMode;

        const args = {};
        Object.keys(spec).forEach((k) => {
            if (k !== 'options') {
                args[k in translateKey ? translateKey[k] : k] = spec[k];
            }
        });

        let cmd;
        let defs;
        if (exportMode == 'Delete Query') {
            defs = `const filter = ${args.filter};\n`;
            cmd = `const result = coll.deleteMany(filter);`;
        }
        if ('aggregation' in spec) {
            const agg = spec.aggregation;
            cmd = `const cursor = coll.aggregate(agg);\nconst result = await cursor.toArray();`;
            defs = `const agg = ${agg};\n`;
        } else if (!cmd) {
            let opts = '';

            if (Object.keys(args).length > 0) {
                defs = Object.keys(args).reduce((s, k) => {
                    if (k !== 'filter') {
                        if (opts === '') {
                            opts = `${k}`;
                        } else {
                            opts = `${opts}, ${k}`;
                        }
                    }
                    return `${s}const ${k} = ${args[k]};\n`;
                }, '');
                opts = opts === '' ? '' : `, { ${opts} }`;
            }
            cmd = `const cursor = coll.find(filter${opts});\nconst result = await cursor.toArray();`;
        }
        return `${comment}\n\n${defs}
    const client = await MongoClient.connect(
      '${spec.options.uri}'
    );
    const coll = client.db('${spec.options.database}').collection('${spec.options.collection}');
    ${cmd}
    await client.close();`;
    }
  EqualitySyntaxTemplate: !!js/function &EqualitySyntaxTemplate >
    (lhs, op, rhs) => {
        if (op.includes('!') || op.includes('not')) {
            return `${lhs} !== ${rhs}`;
        } else if (op === '==' || op === '===' || op === 'is') {
            return `${lhs} === ${rhs}`;
        }
        return `${lhs} ${op} ${rhs}`;
    }
  InSyntaxTemplate: !!js/function &InSyntaxTemplate >
    (lhs, op, rhs) => {
        let str = '!==';
        if (op.includes('!') || op.includes('not')) {
            str = '===';
        }
        return `${rhs}.indexOf(${lhs}) ${str} -1`
    }
  AndSyntaxTemplate: !!js/function &AndSyntaxTemplate >
    (args) => {
        return args.join(' && ');
    }
  OrSyntaxTemplate: !!js/function &OrSyntaxTemplate >
    (args) => {
        return args.join(' || ');
    }
  NotSyntaxTemplate: !!js/function &NotSyntaxTemplate >
    (arg) => {
        return `!${arg}`;
    }
  UnarySyntaxTemplate: &UnarySyntaxTemplate null
  BinarySyntaxTemplate: !!js/function &BinarySyntaxTemplate >
    (args) => {
        return args.reduce((s, op, i, arr) => {
            if (i % 2 === 0) {
                return s;
            }
            const rhs = arr[i + 1];
            switch(op) {
                case '//':
                    return `Math.floor(${s}, ${rhs})`;
                case '**':
                    return `Math.pow(${s}, ${rhs})`;
                default:
                    return `${s} ${op} ${rhs}`;
            }
        }, args[0]);
    }
  ParensSyntaxTemplate: &ParensSyntaxTemplate null
  EosSyntaxTemplate: &EosSyntaxTemplate null
  EofSyntaxTemplate: &EofSyntaxTemplate null
  NewTemplate: !!js/function &NewSyntaxTemplate >
    (expr, skip, code) => {
        // Add classes that don't use "new" to array.
        // So far: [Date.now, Decimal128/NumberDecimal, Long/NumberLong]
        noNew = [200.1, 112, 106];
        if (skip || (code && noNew.indexOf(code) !== -1)) {
            return expr;
        }
        return `new ${expr}`;
    }
  # BSON Object Type templates
  CodeTypeTemplate: &CodeTypeTemplate null
  StringTypeTemplate: !!js/function &StringTypeTemplate >
    (str) => {
      let newStr = str;
      if (
        (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
        (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
        newStr = str.substr(1, str.length - 2);
      }
      return `'${newStr.replace(/\\([\s\S])|(')/g, '\\$1$2')}'`;
    }
  RegexTypeTemplate: !!js/function &RegexTypeTemplate >
    (pattern, flags) => {
        const str = pattern;
        let newStr = str;
        if (
          (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
          (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
            newStr = str.substr(1, str.length - 2);
        }
        pattern = `'${newStr.replace(/\\([\s\S])|(')/g, '\\$1$2')}'`;
        return `RegExp(${pattern}${flags ? ', ' + '\'' + flags + '\'': ''})`;
    }
  BoolTypeTemplate: !!js/function &BoolTypeTemplate >
    (literal) => {
        return literal.toLowerCase();
    }
  IntegerTypeTemplate: &IntegerTypeTemplate null
  DecimalTypeTemplate: &DecimalTypeTemplate null
  LongBasicTypeTemplate: &LongBasicTypeTemplate null
  HexTypeTemplate: &HexTypeTemplate null
  OctalTypeTemplate: &OctalTypeTemplate null
  NumericTypeTemplate: &NumericTypeTemplate null
  ArrayTypeTemplate: !!js/function &ArrayTypeTemplate >
    (literal, depth) => {
        depth++;
        if (literal === '') {
            return '[]'
        }
        const indent = '\n' + '  '.repeat(depth);
        const closingIndent = '\n' + '  '.repeat(depth - 1);

        return `[${indent}${literal}${closingIndent}]`;
    }
  ArrayTypeArgsTemplate: &ArrayTypeArgsTemplate null
  NullTypeTemplate: !!js/function &NullTypeTemplate >
    () => {
        return 'null';
    }
  UndefinedTypeTemplate: !!js/function &UndefinedTypeTemplate >
    () => {
        return 'undefined';
    }
  ObjectTypeTemplate: !!js/function &ObjectTypeTemplate >
    (literal) => {
        if (literal === '') {
            return '{}';
        }
        return literal;
    }
  ObjectTypeArgsTemplate: !!js/function &ObjectTypeArgsTemplate >
    (args, depth) => {
        if (args.length === 0) {
            return '{}';
        }
        depth++;
        const indent = '\n' + '  '.repeat(depth);
        const closingIndent = '\n' + '  '.repeat(depth - 1);
        const singleStringify = (str) => {
            let newStr = str;
            if (
              (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
              (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
                newStr = str.substr(1, str.length - 2);
            }
            return `'${newStr.replace(/\\([\s\S])|(')/g, '\\$1$2')}'`;
        }
        const pairs = args.map((arg) => {
            return `${indent}${singleStringify(arg[0])}: ${arg[1]}`;
        }).join(', ');

        return `{${pairs}${closingIndent}}`
    }
  # BSON Object Method templates
  CodeCodeTemplate: &CodeCodeTemplate null
  CodeCodeArgsTemplate: &CodeCodeArgsTemplate null
  CodeScopeTemplate: &CodeScopeTemplate null
  CodeScopeArgsTemplate: &CodeScopeArgsTemplate null
  ObjectIdToStringTemplate: &ObjectIdToStringTemplate null
  ObjectIdToStringArgsTemplate: &ObjectIdToStringArgsTemplate null
  ObjectIdEqualsTemplate: &ObjectIdEqualsTemplate null
  ObjectIdEqualsArgsTemplate: &ObjectIdEqualsArgsTemplate null
  ObjectIdGetTimestampTemplate: &ObjectIdGetTimestampTemplate null
  ObjectIdGetTimestampArgsTemplate: &ObjectIdGetTimestampArgsTemplate null
  BinaryValueTemplate: &BinaryValueTemplate null
  BinaryValueArgsTemplate: &BinaryValueArgsTemplate null
  BinaryLengthTemplate: &BinaryLengthTemplate null
  BinaryLengthArgsTemplate: &BinaryLengthArgsTemplate null
  BinaryToStringTemplate: &BinaryToStringTemplate null
  BinaryToStringArgsTemplate: &BinaryToStringArgsTemplate null
  BinarySubtypeTemplate: !!js/function &BinarySubtypeTemplate >
    (lhs) => {
        return `${lhs}.sub_type`;
    }
  BinarySubtypeArgsTemplate: !!js/function &BinarySubtypeArgsTemplate >
    () => {
        return '';
    }
  DBRefGetDBTemplate: !!js/function &DBRefGetDBTemplate >
    (lhs) => {
        return `${lhs}.db`;
    }
  DBRefGetCollectionTemplate: !!js/function &DBRefGetCollectionTemplate >
    (lhs) => {
        return `${lhs}.namespace`;
    }
  DBRefGetIdTemplate: !!js/function &DBRefGetIdTemplate >
    (lhs) => {
        return `${lhs}.oid`;
    }
  DBRefGetDBArgsTemplate: !!js/function &DBRefGetDBArgsTemplate >
    () => {
        return '';
    }
  DBRefGetCollectionArgsTemplate:
    !!js/function &DBRefGetCollectionArgsTemplate >
    () => {
        return '';
    }
  DBRefGetIdArgsTemplate: !!js/function &DBRefGetIdArgsTemplate >
    () => {
        return '';
    }
  LongEqualsTemplate: &LongEqualsTemplate null
  LongEqualsArgsTemplate: &LongEqualsArgsTemplate null
  LongToStringTemplate: &LongToStringTemplate null
  LongToStringArgsTemplate: &LongToStringArgsTemplate null
  LongToIntTemplate: !!js/function &LongToIntTemplate >
    (lhs) => {
        return `${lhs}.toInt`;
    }
  LongToIntArgsTemplate: &LongToIntArgsTemplate null
  LongToNumberTemplate: &LongToNumberTemplate null
  LongToNumberArgsTemplate: &LongToNumberArgsTemplate null
  LongAddTemplate: &LongAddTemplate null
  LongAddArgsTemplate: &LongAddArgsTemplate null
  LongSubtractTemplate: &LongSubtractTemplate null
  LongSubtractArgsTemplate: &LongSubtractArgsTemplate null
  LongMultiplyTemplate: &LongMultiplyTemplate null
  LongMultiplyArgsTemplate: &LongMultiplyArgsTemplate null
  LongDivTemplate: &LongDivTemplate null
  LongDivArgsTemplate: &LongDivArgsTemplate null
  LongModuloTemplate: &LongModuloTemplate null
  LongModuloArgsTemplate: &LongModuloArgsTemplate null
  LongAndTemplate: &LongAndTemplate null
  LongAndArgsTemplate: &LongAndArgsTemplate null
  LongOrTemplate: &LongOrTemplate null
  LongOrArgsTemplate: &LongOrArgsTemplate null
  LongXorTemplate: &LongXorTemplate null
  LongXorArgsTemplate: &LongXorArgsTemplate null
  LongShiftLeftTemplate: &LongShiftLeftTemplate null
  LongShiftLeftArgsTemplate: &LongShiftLeftArgsTemplate null
  LongShiftRightTemplate: &LongShiftRightTemplate null
  LongShiftRightArgsTemplate: &LongShiftRightArgsTemplate null
  LongCompareTemplate: &LongCompareTemplate null
  LongCompareArgsTemplate: &LongCompareArgsTemplate null
  LongIsOddTemplate: &LongIsOddTemplate null
  LongIsOddArgsTemplate: &LongIsOddArgsTemplate null
  LongIsZeroTemplate: &LongIsZeroTemplate null
  LongIsZeroArgsTemplate: &LongIsZeroArgsTemplate null
  LongIsNegativeTemplate: &LongIsNegativeTemplate null
  LongIsNegativeArgsTemplate: &LongIsNegativeArgsTemplate null
  LongNegateTemplate: &LongNegateTemplate null
  LongNegateArgsTemplate: &LongNegateArgsTemplate null
  LongNotTemplate: &LongNotTemplate null
  LongNotArgsTemplate: &LongNotArgsTemplate null
  LongNotEqualsTemplate: &LongNotEqualsTemplate null
  LongNotEqualsArgsTemplate: &LongNotEqualsArgsTemplate null
  LongGreaterThanTemplate: &LongGreaterThanTemplate null
  LongGreaterThanArgsTemplate: &LongGreaterThanArgsTemplate null
  LongGreaterThanOrEqualTemplate: &LongGreaterThanOrEqualTemplate null
  LongGreaterThanOrEqualArgsTemplate: &LongGreaterThanOrEqualArgsTemplate null
  LongLessThanTemplate: &LongLessThanTemplate null
  LongLessThanArgsTemplate: &LongLessThanArgsTemplate null
  LongLessThanOrEqualTemplate: &LongLessThanOrEqualTemplate null
  LongLessThanOrEqualArgsTemplate: &LongLessThanOrEqualArgsTemplate null
  LongFloatApproxTemplate: !!js/function &LongFloatApproxTemplate >
    (lhs) => {
        return `${lhs}.toNumber()`;
    }
  LongTopTemplate: !!js/function &LongTopTemplate >
    (lhs) => {
        return `${lhs}.getHighBits()`;
    }
  LongBottomTemplate: !!js/function &LongBottomTemplate >
    (lhs) => {
        return `${lhs}.getLowBits()`;
    }
  TimestampToStringTemplate: &TimestampToStringTemplate null
  TimestampToStringArgsTemplate: &TimestampToStringArgsTemplate null
  TimestampEqualsTemplate: &TimestampEqualsTemplate null
  TimestampEqualsArgsTemplate: &TimestampEqualsArgsTemplate null
  TimestampGetLowBitsTemplate: !!js/function &TimestampGetLowBitsTemplate >
    (lhs) => {
        return `${lhs}.getLowBits`;
    }
  TimestampGetLowBitsArgsTemplate: &TimestampGetLowBitsArgsTemplate null
  TimestampGetHighBitsTemplate: !!js/function &TimestampGetHighBitsTemplate >
    (lhs) => {
        return `${lhs}.getHighBits`;
    }
  TimestampGetHighBitsArgsTemplate: &TimestampGetHighBitsArgsTemplate null
  TimestampTTemplate: !!js/function &TimestampTTemplate >
    (lhs) => {
        return `${lhs}.getLowBits()`;
    }
  TimestampITemplate: !!js/function &TimestampITemplate >
    (lhs) => {
        return `${lhs}.getHighBits()`;
    }
  TimestampAsDateTemplate: !!js/function &TimestampAsDateTemplate >
    (lhs) => {
        return `new Date(${lhs}.getHighBits() * 1000)`;
    }
  TimestampAsDateArgsTemplate: !!js/function &TimestampAsDateArgsTemplate >
    () => {
        return '';
    }
  TimestampCompareTemplate: &TimestampCompareTemplate null
  TimestampCompareArgsTemplate: &TimestampCompareArgsTemplate null
  TimestampNotEqualsTemplate: &TimestampNotEqualsTemplate null
  TimestampNotEqualsArgsTemplate: &TimestampNotEqualsArgsTemplate null
  TimestampGreaterThanTemplate: &TimestampGreaterThanTemplate null
  TimestampGreaterThanArgsTemplate: &TimestampGreaterThanArgsTemplate null
  TimestampGreaterThanOrEqualTemplate: &TimestampGreaterThanOrEqualTemplate null
  TimestampGreaterThanOrEqualArgsTemplate: &TimestampGreaterThanOrEqualArgsTemplate null
  TimestampLessThanTemplate: &TimestampLessThanTemplate null
  TimestampLessThanArgsTemplate: &TimestampLessThanArgsTemplate null
  TimestampLessThanOrEqualTemplate: &TimestampLessThanOrEqualTemplate null
  TimestampLessThanOrEqualArgsTemplate: &TimestampLessThanOrEqualArgsTemplate null
  SymbolValueOfTemplate: &SymbolValueOfTemplate null
  SymbolValueOfArgsTemplate: &SymbolValueOfArgsTemplate null
  SymbolInspectTemplate: &SymbolInspectTemplate null
  SymbolInspectArgsTemplate: &SymbolInspectArgsTemplate null
  SymbolToStringTemplate: &SymbolToStringTemplate null
  SymbolToStringArgsTemplate: &SymbolToStringArgsTemplate null
  # Symbol Templates
  CodeSymbolTemplate: &CodeSymbolTemplate null
  CodeSymbolArgsTemplate: !!js/function &CodeSymbolArgsTemplate >
    (lhs, code, scope) => {
        code = code === undefined ? '\'\'' : code;
        scope = scope === undefined ? '' : `, ${scope}`;
        return `(${code}${scope})`;
    }
  ObjectIdSymbolTemplate: &ObjectIdSymbolTemplate null
  ObjectIdSymbolArgsTemplate: !!js/function &ObjectIdSymbolArgsTemplate >
    (lhs, str) => {
      if (!str || str.length === 0) {
        return '()';
      }
      let newStr = str;
      if (
        (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
        (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
        newStr = str.substr(1, str.length - 2);
      }
      return `('${newStr.replace(/\\([\s\S])|(")/g, '\\$1$2')}')`;
    }
  BinarySymbolTemplate: !!js/function &BinarySymbolTemplate >
    () => {
        return 'Binary';
    }
  BinarySymbolArgsTemplate: !!js/function &BinarySymbolArgsTemplate >
    (lhs, buffer, subtype) => {
        return `(${buffer.toString('base64')}, '${subtype}')`;
    }
  BinarySymbolSubtypeDefaultTemplate: &BinarySymbolSubtypeDefaultTemplate null
  BinarySymbolSubtypeFunctionTemplate: &BinarySymbolSubtypeFunctionTemplate null
  BinarySymbolSubtypeByteArrayTemplate: &BinarySymbolSubtypeByteArrayTemplate null
  BinarySymbolSubtypeUuidOldTemplate: &BinarySymbolSubtypeUuidOldTemplate null
  BinarySymbolSubtypeUuidTemplate: &BinarySymbolSubtypeUuidTemplate null
  BinarySymbolSubtypeMd5Template: &BinarySymbolSubtypeMd5Template null
  BinarySymbolSubtypeUserDefinedTemplate: &BinarySymbolSubtypeUserDefinedTemplate null
  DBRefSymbolTemplate: &DBRefSymbolTemplate null
  DBRefSymbolArgsTemplate: &DBRefSymbolArgsTemplate null
  DoubleSymbolTemplate: !!js/function &DoubleSymbolTemplate >
    () => {
        return 'Double';
    }
  DoubleSymbolArgsTemplate: &DoubleSymbolArgsTemplate null
  Int32SymbolTemplate: !!js/function &Int32SymbolTemplate >
    () => {
        return 'Int32';
    }
  Int32SymbolArgsTemplate: !!js/function &Int32SymbolArgsTemplate >
    (lhs, arg) => {
        arg = arg === undefined ? 0 : arg;
        return `(${arg})`;
    }
  LongSymbolTemplate: !!js/function &LongSymbolTemplate >
    () => {
        return '';
    }
  LongSymbolArgsTemplate: !!js/function &LongSymbolArgsTemplate >
    (lhs, arg, type) => {
        arg = arg === undefined ? 0 : arg;
        if (type === '_string') {
            return `Long.fromString(${arg})`;
        }
        return `Long.fromNumber(${arg})`;
    }
  LongSymbolMaxTemplate: &LongSymbolMaxTemplate null
  LongSymbolMaxArgsTemplate: &LongSymbolMaxArgsTemplate null
  LongSymbolMinTemplate: &LongSymbolMinTemplate null
  LongSymbolMinArgsTemplate: &LongSymbolMinArgsTemplate null
  LongSymbolZeroTemplate: &LongSymbolZeroTemplate null
  LongSymbolZeroArgsTemplate: &LongSymbolZeroArgsTemplate null
  LongSymbolOneTemplate: &LongSymbolOneTemplate null
  LongSymbolOneArgsTemplate: &LongSymbolOneArgsTemplate null
  LongSymbolNegOneTemplate: &LongSymbolNegOneTemplate null
  LongSymbolNegOneArgsTemplate: &LongSymbolNegOneArgsTemplate null
  LongSymbolFromBitsTemplate: &LongSymbolFromBitsTemplate null
  LongSymbolFromBitsArgsTemplate: &LongSymbolFromBitsArgsTemplate null
  LongSymbolFromIntTemplate: &LongSymbolFromIntTemplate null
  LongSymbolFromIntArgsTemplate: &LongSymbolFromIntArgsTemplate null
  LongSymbolFromNumberTemplate: &LongSymbolFromNumberTemplate null
  LongSymbolFromNumberArgsTemplate: &LongSymbolFromNumberArgsTemplate null
  LongSymbolFromStringTemplate: &LongSymbolFromStringTemplate null
  LongSymbolFromStringArgsTemplate: &LongSymbolFromStringArgsTemplate null
  MinKeySymbolTemplate: &MinKeySymbolTemplate null
  MinKeySymbolArgsTemplate: &MinKeySymbolArgsTemplate null
  MaxKeySymbolTemplate: &MaxKeySymbolTemplate null
  MaxKeySymbolArgsTemplate: &MaxKeySymbolArgsTemplate null
  TimestampSymbolTemplate: &TimestampSymbolTemplate null
  TimestampSymbolArgsTemplate: !!js/function &TimestampSymbolArgsTemplate >
    (lhs, arg1, arg2) => {
        return `(${arg1 === undefined ? 0 : arg1}, ${arg2 === undefined ? 0 : arg2})`;
    }
  SymbolSymbolTemplate: !!js/function &SymbolSymbolTemplate >
    () => {
        return 'BSONSymbol';
    }
  SymbolSymbolArgsTemplate: &SymbolSymbolArgsTemplate null
  BSONRegExpSymbolTemplate: !!js/function &BSONRegExpSymbolTemplate >
    () => {
        return 'BSONRegExp';
    }
  BSONRegExpSymbolArgsTemplate: !!js/function &BSONRegExpSymbolArgsTemplate >
    (lhs, pattern, flags) => {
        const singleStringify = (str) => {
            let newStr = str;
            if (
                (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
                (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
                newStr = str.substr(1, str.length - 2);
            }
            return `'${newStr.replace(/\\([\s\S])|(")/g, '\\$1$2')}'`;
        }
        return `(${singleStringify(pattern)}${flags ? ', ' + singleStringify(flags) : ''})`;
    }
  Decimal128SymbolTemplate: !!js/function &Decimal128SymbolTemplate >
    () => {
        return 'Decimal128';
    }
  Decimal128SymbolArgsTemplate: !!js/function &Decimal128SymbolArgsTemplate >
    (lhs, arg) => {
        arg = arg === undefined ? '0' : arg.toString();
        if (arg.charAt(0) === '\'' && arg.charAt(arg.length - 1) === '\'') {
            return `.fromString(${arg})`;
        }
        return `.fromString('${arg}')`;
    }
  Decimal128SymbolFromStringTemplate: &Decimal128SymbolFromStringTemplate null
  Decimal128SymbolFromStringArgsTemplate: &Decimal128SymbolFromStringArgsTemplate null
  Decimal128ToStringTemplate: &Decimal128ToStringTemplate null
  Decimal128ToStringArgsTemplate: &Decimal128ToStringArgsTemplate null
  # BSON Util Templates
  ObjectIdCreateFromHexStringTemplate: &ObjectIdCreateFromHexStringTemplate null
  ObjectIdCreateFromHexStringArgsTemplate: &ObjectIdCreateFromHexStringArgsTemplate null
  ObjectIdCreateFromTimeTemplate:
    !!js/function &ObjectIdCreateFromTimeTemplate >
    () => {
        return `ObjectId.createFromTime`;
    }
  ObjectIdCreateFromTimeArgsTemplate:
    !!js/function &ObjectIdCreateFromTimeArgsTemplate >
    (lhs, arg, isNumber) => {
        if (!isNumber) {
            return `(${arg}.getTime() / 1000)`;
        }
        return `(${arg})`;
    }
  ObjectIdIsValidTemplate: !!js/function &ObjectIdIsValidTemplate >
    (lhs) => {
        return `${lhs}.isValid`;
    }
  ObjectIdIsValidArgsTemplate: &ObjectIdIsValidArgsTemplate null
  # JS Symbol Templates
  NumberSymbolTemplate: !!js/function &NumberSymbolTemplate >
    () => {
        return 'Number';
    }
  NumberSymbolArgsTemplate: !!js/function &NumberSymbolArgsTemplate >
    (lhs, arg) => {
        arg = arg === undefined ? '0' : arg;
        return `(${arg})`;
    }
  DateSymbolTemplate: !!js/function &DateSymbolTemplate >
    () => {
        return 'Date';
    }
  DateSymbolArgsTemplate: &DateSymbolArgsTemplate null
  DateSymbolNowTemplate: !!js/function &DateSymbolNowTemplate >
    () => {
        return 'Date.now';
    }
  DateSymbolNowArgsTemplate: &DateSymbolNowArgsTemplate null
  RegExpSymbolTemplate: !!js/function &RegExpSymbolTemplate >
    () => {
        return 'RegExp';
    }
  RegExpSymbolArgsTemplate: &RegExpSymbolArgsTemplate null
  ImportTemplate: !!js/function &ImportTemplate >
    (args) => {
        const bson = [];
        const other = [];
        Object.keys(args).map(
            (m) => {
                if (m > 99 && m < 200) {
                    bson.push(args[m]);
                } else {
                    other.push(args[m]);
                }
            }
        );
        if (bson.length) {
            other.push(`import {\n  ${bson.join(',\n  ')}\n} from 'mongodb';`);
        }
        return other.join('\n');
    }
  DriverImportTemplate: !!js/function &DriverImportTemplate >
    () => {
        return `import { MongoClient } from 'mongodb';`;
    }
  0ImportTemplate: &0ImportTemplate null
  1ImportTemplate: &1ImportTemplate null
  2ImportTemplate: &2ImportTemplate null
  3ImportTemplate: &3ImportTemplate null
  4ImportTemplate: &4ImportTemplate null
  5ImportTemplate: &5ImportTemplate null
  6ImportTemplate: &6ImportTemplate null
  7ImportTemplate: &7ImportTemplate null
  8ImportTemplate: &8ImportTemplate null
  9ImportTemplate: &9ImportTemplate null
  10ImportTemplate: &10ImportTemplate null
  11ImportTemplate: &11ImportTemplate null
  12ImportTemplate: &12ImportTemplate null
  100ImportTemplate: !!js/function &100ImportTemplate >
    () => {
        return 'Code';
    }
  101ImportTemplate: !!js/function &101ImportTemplate >
    () => {
        return 'ObjectId';
    }
  102ImportTemplate: !!js/function &102ImportTemplate >
    () => {
        return 'Binary';
    }
  103ImportTemplate: !!js/function &103ImportTemplate >
    () => {
        return 'DBRef';
    }
  104ImportTemplate: !!js/function &104ImportTemplate >
    () => {
        return 'Double';
    }
  105ImportTemplate: !!js/function &105ImportTemplate >
    () => {
        return 'Int32';
    }
  106ImportTemplate: !!js/function &106ImportTemplate >
    () => {
        return 'Long';
    }
  107ImportTemplate: !!js/function &107ImportTemplate >
    () => {
        return 'MinKey';
    }
  108ImportTemplate: !!js/function &108ImportTemplate >
    () => {
        return 'MaxKey';
    }
  109ImportTemplate: !!js/function &109ImportTemplate >
    () => {
        return 'BSONRegExp';
    }
  110ImportTemplate: !!js/function &110ImportTemplate >
    () => {
        return 'Timestamp';
    }
  111ImportTemplate: !!js/function &111ImportTemplate >
    () => {
        return 'BSONSymbol';
    }
  112ImportTemplate: !!js/function &112ImportTemplate >
    () => {
        return 'Decimal128';
    }
  113ImportTemplate: &113ImportTemplate null
  114ImportTemplate: &114ImportTemplate null
  200ImportTemplate: &200ImportTemplate null
  201ImportTemplate: &201ImportTemplate null
  300ImportTemplate: &300ImportTemplate null
  301ImportTemplate: &301ImportTemplate null
  302ImportTemplate: &302ImportTemplate null
  303ImportTemplate: &303ImportTemplate null
  304ImportTemplate: &304ImportTemplate null
  305ImportTemplate: &305ImportTemplate null
  306ImportTemplate: &306ImportTemplate null
