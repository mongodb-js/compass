# Python Templates
Templates:
    # BSON Object Type templates
    CodeTypeTemplate: &CodeTypeTemplate null
    StringTypeTemplate: &StringTypeTemplate !!js/function >
        (str) => {
          let newStr = str;
          if (
            (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
            (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
            newStr = str.substr(1, str.length - 2);
          }
          return `'${newStr.replace(/\\([\s\S])|(")/g, '\\$1$2')}'`;
        }
    RegexTypeTemplate: &RegexTypeTemplate !!js/function >
        (pattern, flags) => {
            const escaped = pattern.replace(/\\(?!\/)/, '\\\\');

            // Double-quote stringify
            const str = escaped + flags;
            let newStr = str;
            if (
                (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
                (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
                    newStr = str.substr(1, str.length - 2);
            }
            return `re.compile(r"${newStr.replace(/\\([\s\S])|(")/g, '\\$1$2')}")`;
        }
    BoolTypeTemplate: &BoolTypeTemplate !!js/function >
        (str) => {
          return `${str.charAt(0).toUpperCase()}${str.slice(1)}`;
        }
    IntegerTypeTemplate: &IntegerTypeTemplate null
    DecimalTypeTemplate: &DecimalTypeTemplate null
    LongBasicTypeTemplate: &LongBasicTypeTemplate null
    HexTypeTemplate: &HexTypeTemplate null
    OctalTypeTemplate: &OctalTypeTemplate !!js/function >
        (literal) => {
            let offset = 0;

            if (
                literal.charAt(0) === '0' &&
                (literal.charAt(1) === '0' || literal.charAt(1) === 'o' || literal.charAt(1) === 'O')
            ) {
                offset = 2;
            } else if (literal.charAt(0) === '0') {
                offset = 1;
            }

            literal = `0o${literal.substr(offset, literal.length - 1)}`;

            return literal;
        }
    NumericTypeTemplate: &NumericTypeTemplate null
    ArrayTypeTemplate: &ArrayTypeTemplate !!js/function >
        (literal) => {
            return `[${literal}]`;
        }
    NullTypeTemplate: &NullTypeTemplate !!js/function >
        () => {
            return 'None';
        }
    UndefinedTypeTemplate: &UndefinedTypeTemplate !!js/function >
        () => {
            return 'None';
        }
    ObjectTypeTemplate: &ObjectTypeTemplate !!js/function >
        (literal) => {
            return `{${literal}}`;
        }
    ObjectTypeArgsTemplate: &ObjectTypeArgsTemplate !!js/function >
        (args) => {
            return args.map((arg) => {
                return `'${arg[0]}': ${arg[1]}`;
            }).join(', ');
        }
    # BSON Object Method templates
    CodeCodeTemplate: &CodeCodeTemplate !!js/function >
        (lhs) => {
            return `str(${lhs})`;
        }
    CodeCodeArgsTemplate: &CodeCodeArgsTemplate null
    CodeScopeTemplate: &CodeScopeTemplate null
    CodeScopeArgsTemplate: &CodeScopeArgsTemplate null
    CodeToStringTemplate: &CodeToStringTemplate !!js/function >
        (lhs) => {
            return `repr(${lhs})`;
        }
    CodeToStringArgsTemplate: &CodeToStringArgsTemplate !!js/function >
        () => {
            return '';
        }
    ObjectIdToStringTemplate: &ObjectIdToStringTemplate !!js/function >
        () => {
            return '';
        }
    ObjectIdToStringArgsTemplate: &ObjectIdToStringArgsTemplate !!js/function >
        (lhs) => {
            return `str(${lhs})`;
        }
    ObjectIdEqualsTemplate: &ObjectIdEqualsTemplate !!js/function >
        () => {
            return '';
        }
    ObjectIdEqualsArgsTemplate: &ObjectIdEqualsArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `${lhs} == ${rhs}`;
        }
    ObjectIdGetTimestampTemplate: &ObjectIdGetTimestampTemplate !!js/function >
        () => {
            return '';
        }
    ObjectIdGetTimestampArgsTemplate: &ObjectIdGetTimestampArgsTemplate !!js/function >
        (lhs) => {
            return `${lhs}.generation_time`;
        }
    BinaryValueTemplate: &BinaryValueTemplate !!js/function >
        () => {
            return '';
        }
    BinaryValueArgsTemplate: &BinaryValueArgsTemplate !!js/function >
        (lhs) => {
            return `str(${lhs})`;
        }
    BinaryLengthTemplate: &BinaryLengthTemplate !!js/function >
        () => {
            return '';
        }
    BinaryLengthArgsTemplate: &BinaryLengthArgsTemplate !!js/function >
        (lhs) => {
            return `len(bytearray(${lhs}))`;
        }
    BinaryToStringTemplate: &BinaryToStringTemplate !!js/function >
        () => {
            return '';
        }
    BinaryToStringArgsTemplate: &BinaryToStringArgsTemplate !!js/function >
        (lhs) => {
            return `str(${lhs})`;
        }
    BinarySubtypeTemplate: &BinarySubtypeTemplate !!js/function >
        (lhs) => {
            return `${lhs}.subtype`;
        }
    BinarySubtypeArgsTemplate: &BinarySubtypeArgsTemplate null
    DBRefGetDBTemplate: &DBRefGetDBTemplate !!js/function >
        (lhs) => {
            return `${lhs}.database`;
        }
    DBRefGetCollectionTemplate: &DBRefGetCollectionTemplate !!js/function >
        (lhs) => {
            return `${lhs}.collection`;
        }
    DBRefGetIdTemplate: &DBRefGetIdTemplate !!js/function >
        (lhs) => {
            return `${lhs}.id`;
        }
    DBRefGetDBArgsTemplate: &DBRefGetDBArgsTemplate !!js/function >
        () => {
            return '';
        }
    DBRefGetCollectionArgsTemplate: &DBRefGetCollectionArgsTemplate !!js/function
        () => {
            return '';
        }
    DBRefGetIdArgsTemplate: &DBRefGetIdArgsTemplate !!js/function
        () => {
            return '';
        }
    DBRefToStringTemplate: &DBRefToStringTemplate !!js/function >
        (lhs) => {
            return `str(${lhs})`;
        }
    DBRefToStringArgsTemplate: &DBRefToStringArgsTemplate !!js/function >
        () => {
            return '';
        }
    DoubleValueOfTemplate: &DoubleValueOfTemplate !!js/function >
        () => {
            return '';
        }
    DoubleValueOfArgsTemplate: &DoubleValueOfArgsTemplate !!js/function >
        (lhs) => {
            return lhs;
        }
    Int32ValueOfTemplate: &Int32ValueOfTemplate !!js/function >
        () => {
            return '';
        }
    Int32ValueOfArgsTemplate: &Int32ValueOfArgsTemplate !!js/function >
        (lhs) => {
            return lhs;
        }
    LongEqualsTemplate: &LongEqualsTemplate !!js/function >
        () => {
            return '';
        }
    LongEqualsArgsTemplate: &LongEqualsArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `(${lhs} - ${rhs}) == 0`;
        }
    LongToIntTemplate: &LongToIntTemplate !!js/function >
        () => {
            return '';
        }
    LongToIntArgsTemplate: &LongToIntArgsTemplate !!js/function >
        (lhs) => {
            return `int(${lhs})`;
        }
    LongToNumberTemplate: &LongToNumberTemplate !!js/function >
        () => {
            return '';
        }
    LongToNumberArgsTemplate: &LongToNumberArgsTemplate !!js/function >
        (lhs) => {
            return `float(${lhs})`;
        }
    LongAddTemplate: &LongAddTemplate !!js/function >
        () => {
            return '';
        }
    LongAddArgsTemplate: &LongAddArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `${lhs} + ${rhs}`;
        }
    LongSubtractTemplate: &LongSubtractTemplate !!js/function >
        () => {
            return '';
        }
    LongSubtractArgsTemplate: &LongSubtractArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `${lhs} - ${rhs}`;
        }
    LongMultiplyTemplate: &LongMultiplyTemplate !!js/function >
        () => {
            return '';
        }
    LongMultiplyArgsTemplate: &LongMultiplyArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `${lhs} * ${rhs}`;
        }
    LongDivTemplate: &LongDivTemplate !!js/function >
        () => {
            return '';
        }
    LongDivArgsTemplate: &LongDivArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `${lhs} / ${rhs}`;
        }
    LongModuloTemplate: &LongModuloTemplate !!js/function >
        () => {
            return '';
        }
    LongModuloArgsTemplate: &LongModuloArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `${lhs} % ${rhs}`;
        }
    LongAndTemplate: &LongAndTemplate !!js/function >
        () => {
            return '';
        }
    LongAndArgsTemplate: &LongAndArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `${lhs} & ${rhs}`;
        }
    LongOrTemplate: &LongOrTemplate !!js/function >
        () => {
            return '';
        }
    LongOrArgsTemplate: &LongOrArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `${lhs} | ${rhs}`;
        }
    LongXorTemplate: &LongXorTemplate !!js/function >
        () => {
            return '';
        }
    LongXorArgsTemplate: &LongXorArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `${lhs} ^ ${rhs}`;
        }
    LongShiftLeftTemplate: &LongShiftLeftTemplate !!js/function >
        () => {
            return '';
        }
    LongShiftLeftArgsTemplate: &LongShiftLeftArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `${lhs} << ${rhs}`;
        }
    LongShiftRightTemplate: &LongShiftRightTemplate !!js/function >
        () => {
            return '';
        }
    LongShiftRightArgsTemplate: &LongShiftRightArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `${lhs} >> ${rhs}`;
        }
    LongCompareTemplate: &LongCompareTemplate !!js/function >
        () => {
            return '';
        }
    LongCompareArgsTemplate: &LongCompareArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `${lhs} - ${rhs}`;
        }
    LongIsOddTemplate: &LongIsOddTemplate !!js/function >
        () => {
            return '';
        }
    LongIsOddArgsTemplate: &LongIsOddArgsTemplate !!js/function >
        (lhs) => {
            return `(${lhs} % 2) == 0`;
        }
    LongIsZeroTemplate: &LongIsZeroTemplate !!js/function >
        () => {
            return '';
        }
    LongIsZeroArgsTemplate: &LongIsZeroArgsTemplate !!js/function >
        (lhs) => {
            return `${lhs} == 0`;
        }
    LongIsNegativeTemplate: &LongIsNegativeTemplate !!js/function >
        () => {
            return '';
        }
    LongIsNegativeArgsTemplate: &LongIsNegativeArgsTemplate !!js/function >
        (lhs) => {
            return `${lhs} < 0`;
        }
    LongNegateTemplate: &LongNegateTemplate !!js/function >
        () => {
            return '';
        }
    LongNegateArgsTemplate: &LongNegateArgsTemplate !!js/function >
        (lhs) => {
            return `-${lhs}`;
        }
    LongNotTemplate: &LongNotTemplate !!js/function >
        () => {
            return '';
        }
    LongNotArgsTemplate: &LongNotArgsTemplate !!js/function >
        (lhs) => {
            return `~${lhs}`;
        }
    LongNotEqualsTemplate: &LongNotEqualsTemplate !!js/function >
        () => {
            return '';
        }
    LongNotEqualsArgsTemplate: &LongNotEqualsArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `(${lhs} - ${rhs}) != 0`;
        }
    LongGreaterThanTemplate: &LongGreaterThanTemplate !!js/function >
        () => {
            return '';
        }
    LongGreaterThanArgsTemplate: &LongGreaterThanArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `(${lhs} - ${rhs}) > 0`;
        }
    LongGreaterThanOrEqualTemplate: &LongGreaterThanOrEqualTemplate !!js/function >
        () => {
            return '';
        }
    LongGreaterThanOrEqualArgsTemplate: &LongGreaterThanOrEqualArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `(${lhs} - ${rhs}) >= 0`;
        }
    LongLessThanTemplate: &LongLessThanTemplate !!js/function >
        () => {
            return '';
        }
    LongLessThanArgsTemplate: &LongLessThanArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `(${lhs} - ${rhs}) < 0`;
        }
    LongLessThanOrEqualTemplate: &LongLessThanOrEqualTemplate !!js/function >
        () => {
            return '';
        }
    LongLessThanOrEqualArgsTemplate: &LongLessThanOrEqualArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `(${lhs} - ${rhs}) <= 0`;
        }
    LongFloatApproxTemplate: &LongFloatApproxTemplate null
    LongTopTemplate: &LongTopTemplate null
    LongBottomTemplate: &LongBottomTemplate null
    TimestampToStringTemplate: &TimestampToStringTemplate !!js/function >
        () => {
            return '';
        }
    TimestampToStringArgsTemplate: &TimestampToStringArgsTemplate !!js/function >
        (lhs) => {
            return `str(${lhs})`;
        }
    TimestampEqualsTemplate: &TimestampEqualsTemplate !!js/function >
        () => {
            return '';
        }
    TimestampEqualsArgsTemplate: &TimestampEqualsArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `(${lhs}.time - ${rhs}.time) == 0`;
        }
    TimestampGetLowBitsTemplate: &TimestampGetLowBitsTemplate !!js/function >
        () => {
            return '';
        }
    TimestampGetLowBitsArgsTemplate: &TimestampGetLowBitsArgsTemplate !!js/function >
        (lhs) => {
            return `${lhs}.time`;
        }
    TimestampGetHighBitsTemplate: &TimestampGetHighBitsTemplate !!js/function >
        () => {
            return '';
        }
    TimestampGetHighBitsArgsTemplate: &TimestampGetHighBitsArgsTemplate !!js/function >
        (lhs) => {
            return `${lhs}.inc`;
        }
    TimestampTTemplate: &TimestampTTemplate null
    TimestampITemplate: &TimestampITemplate null
    TimestampCompareTemplate: &TimestampCompareTemplate !!js/function >
        (lhs) => {
            return '';
        }
    TimestampCompareArgsTemplate: &TimestampCompareArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `${lhs}.time - ${rhs}.time`;
        }
    TimestampNotEqualsTemplate: &TimestampNotEqualsTemplate !!js/function >
        () => {
            return '';
        }
    TimestampNotEqualsArgsTemplate: &TimestampNotEqualsArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `(${lhs}.time - ${rhs}.time) != 0`;
        }
    TimestampGreaterThanTemplate: &TimestampGreaterThanTemplate !!js/function >
        () => {
            return '';
        }
    TimestampGreaterThanArgsTemplate: &TimestampGreaterThanArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `(${lhs}.time - ${rhs}.time) > 0`;
        }
    TimestampGreaterThanOrEqualTemplate: &TimestampGreaterThanOrEqualTemplate !!js/function >
        () => {
            return '';
        }
    TimestampGreaterThanOrEqualArgsTemplate: &TimestampGreaterThanOrEqualArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `(${lhs}.time - ${rhs}.time) >= 0`;
        }
    TimestampLessThanTemplate: &TimestampLessThanTemplate !!js/function >
        () => {
            return '';
        }
    TimestampLessThanArgsTemplate: &TimestampLessThanArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `(${lhs}.time - ${rhs}.time) < 0`;
        }
    TimestampLessThanOrEqualTemplate: &TimestampLessThanOrEqualTemplate !!js/function >
        () => {
            return '';
        }
    TimestampLessThanOrEqualArgsTemplate: &TimestampLessThanOrEqualArgsTemplate !!js/function >
        (lhs, rhs) => {
            return `(${lhs}.time - ${rhs}.time) <= 0`;
        }
    SymbolValueOfTemplate: &SymbolValueOfTemplate !!js/function >
        () => {
            return '';
        }
    SymbolValueOfArgsTemplate: &SymbolValueOfArgsTemplate !!js/function >
        (lhs) => {
            return lhs;
        }
    SymbolInspectTemplate: &SymbolInspectTemplate !!js/function >
        () => {
            return '';
        }
    SymbolInspectArgsTemplate: &SymbolInspectArgsTemplate !!js/function >
        (lhs) => {
            return lhs;
        }
    SymbolToStringTemplate: &SymbolToStringTemplate !!js/function >
        () => {
            return '';
        }
    SymbolToStringArgsTemplate: &SymbolToStringArgsTemplate !!js/function >
        (lhs) => {
            return `str(${lhs})`;
        }
    # Symbol Templates
    CodeSymbolTemplate: &CodeSymbolTemplate !!js/function >
        () => {
            return 'Code';
        }
    CodeSymbolArgsTemplate: &CodeSymbolArgsTemplate !!js/function >
        (lhs, code, scope) => {
          // Single quote stringify
          const scopestr = scope === undefined ? '' : `, ${scope}`;
          let newStr = code === undefined ? '' : code;
          const str = newStr;
          if (
            (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
            (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
            newStr = str.substr(1, str.length - 2);
          }
          code = `'${newStr.replace(/\\([\s\S])|(")/g, '\\$1$2')}'`;
          return `(${code}${scopestr})`;
        }
    ObjectIdSymbolTemplate: &ObjectIdSymbolTemplate null
    ObjectIdSymbolArgsTemplate: &ObjectIdSymbolArgsTemplate !!js/function >
        (lhs, str) => {
          let newStr = str;
          if (
            (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
            (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
            newStr = str.substr(1, str.length - 2);
          }
          return `('${newStr.replace(/\\([\s\S])|(")/g, '\\$1$2')}')`;
        }
    BinarySymbolTemplate: &BinarySymbolTemplate null # Has emit method
    BinarySymbolArgsTemplate: &BinarySymbolArgsTemplate null
    BinarySymbolSubtypeDefaultTemplate: &BinarySymbolSubtypeDefaultTemplate !!js/function >
        () => {
            return 'bson.binary.BINARY_SUBTYPE';
        }
    BinarySymbolSubtypeFunctionTemplate: &BinarySymbolSubtypeFunctionTemplate !!js/function >
        () => {
            return 'bson.binary.FUNCTION_SUBTYPE';
        }
    BinarySymbolSubtypeByteArrayTemplate: &BinarySymbolSubtypeByteArrayTemplate !!js/function >
        () => {
            return 'bson.binary.OLD_BINARY_SUBTYPE';
        }
    BinarySymbolSubtypeUuidOldTemplate: &BinarySymbolSubtypeUuidOldTemplate !!js/function >
        () => {
            return 'bson.binary.OLD_UUID_SUBTYPE';
        }
    BinarySymbolSubtypeUuidTemplate: &BinarySymbolSubtypeUuidTemplate !!js/function >
        () => {
            return 'bson.binary.UUID_SUBTYPE';
        }
    BinarySymbolSubtypeMd5Template: &BinarySymbolSubtypeMd5Template !!js/function >
        () => {
            return 'bson.binary.MD5_SUBTYPE';
        }
    BinarySymbolSubtypeUserDefinedTemplate: &BinarySymbolSubtypeUserDefinedTemplate !!js/function >
        () => {
            return 'bson.binary.USER_DEFINED_SUBTYPE';
        }
    DBRefSymbolTemplate: &DBRefSymbolTemplate null
    DBRefSymbolArgsTemplate: &DBRefSymbolArgsTemplate null
    DoubleSymbolTemplate: &DoubleSymbolTemplate !!js/function >
        () => {
            return 'float';
        }
    DoubleSymbolArgsTemplate: &DoubleSymbolArgsTemplate null
    Int32SymbolTemplate: &Int32SymbolTemplate !!js/function >
        () => {
            return 'int';
        }
    Int32SymbolArgsTemplate: &Int32SymbolArgsTemplate null
    LongSymbolTemplate: &LongSymbolTemplate !!js/function >
        () => {
            return 'Int64';
        }
    LongSymbolArgsTemplate: &LongSymbolArgsTemplate null
    LongSymbolMaxTemplate: &LongSymbolMaxTemplate !!js/function >
        () => {
            return 'sys.maxsize';
        }
    LongSymbolMaxArgsTemplate: &LongSymbolMaxArgsTemplate null
    LongSymbolMinTemplate: &LongSymbolMinTemplate !!js/function >
        () => {
            return '-sys.maxsize -1';
        }
    LongSymbolMinArgsTemplate: &LongSymbolMinArgsTemplate null
    LongSymbolZeroTemplate: &LongSymbolZeroTemplate !!js/function >
        () => {
            return 'Int64(0)';
        }
    LongSymbolZeroArgsTemplate: &LongSymbolZeroArgsTemplate null
    LongSymbolOneTemplate: &LongSymbolOneTemplate !!js/function >
        () => {
            return 'Int64(1)';
        }
    LongSymbolOneArgsTemplate: &LongSymbolOneArgsTemplate null
    LongSymbolNegOneTemplate: &LongSymbolNegOneTemplate !!js/function >
        () => {
            return 'Int64(-1)';
        }
    LongSymbolNegOneArgsTemplate: &LongSymbolNegOneArgsTemplate null
    LongSymbolFromBitsTemplate: &LongSymbolFromBitsTemplate null
    LongSymbolFromBitsArgsTemplate: &LongSymbolFromBitsArgsTemplate null
    LongSymbolFromIntTemplate: &LongSymbolFromIntTemplate !!js/function >
        () => {
            return 'Int64';
        }
    LongSymbolFromIntArgsTemplate: &LongSymbolFromIntArgsTemplate null
    LongSymbolFromNumberTemplate: &LongSymbolFromNumberTemplate !!js/function >
        () => {
            return 'Int64';
        }
    LongSymbolFromNumberArgsTemplate: &LongSymbolFromNumberArgsTemplate null
    LongSymbolFromStringTemplate: &LongSymbolFromStringTemplate !!js/function >
        (lhs, arg) => {
            return 'Int64';
        }
    LongSymbolFromStringArgsTemplate: &LongSymbolFromStringArgsTemplate !!js/function >
        (lhs, arg) => {
            return `(int(${arg}))`;
        }
    MinKeySymbolTemplate: &MinKeySymbolTemplate null
    MinKeySymbolArgsTemplate: &MinKeySymbolArgsTemplate null
    MaxKeySymbolTemplate: &MaxKeySymbolTemplate null
    MaxKeySymbolArgsTemplate: &MaxKeySymbolArgsTemplate null
    TimestampSymbolTemplate: &TimestampSymbolTemplate !!js/function >
        () => {
            return 'Timestamp';
        }
    TimestampSymbolArgsTemplate: &TimestampSymbolArgsTemplate null
    SymbolSymbolTemplate: &SymbolSymbolTemplate !!js/function >
        () => {
            return 'unicode';
        }
    SymbolSymbolArgsTemplate: &SymbolSymbolArgsTemplate !!js/function >
        (lhs, arg) => {
            return `(${arg}, 'utf-8')`;
        }
    BSONRegExpSymbolTemplate: &BSONRegExpSymbolTemplate null # Has emit method
    BSONRegExpSymbolArgsTemplate: &BSONRegExpSymbolArgsTemplate null
    Decimal128SymbolTemplate: &Decimal128SymbolTemplate null
    Decimal128SymbolArgsTemplate: &Decimal128SymbolArgsTemplate !!js/function >
        (lhs, str) => {
          let newStr = str;
          if (
            (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
            (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
            newStr = str.substr(1, str.length - 2);
          }
          return `('${newStr.replace(/\\([\s\S])|(")/g, '\\$1$2')}')`;
        }
    Decimal128SymbolFromStringTemplate: &Decimal128SymbolFromStringTemplate !!js/function >
        () => {
            return `Decimal128`;
        }
    Decimal128SymbolFromStringArgsTemplate: &Decimal128SymbolFromStringArgsTemplate null
    Decimal128ToStringTemplate: &Decimal128ToStringTemplate !!js/function >
        () => {
            return '';
        }
    Decimal128ToStringArgsTemplate: &Decimal128ToStringArgsTemplate !!js/function >
        (lhs) => {
            return `str(${lhs})`;
        }
    # BSON Util Templates
    ObjectIdCreateFromHexStringTemplate: &ObjectIdCreateFromHexStringTemplate !!js/function >
        () => {
            return '';
        }
    ObjectIdCreateFromHexStringArgsTemplate: &ObjectIdCreateFromHexStringArgsTemplate !!js/function >
        (lhs, arg) => {
            return `ObjectId(u${arg})`;
        }
    ObjectIdCreateFromTimeTemplate: &ObjectIdCreateFromTimeTemplate !!js/function >
        () => {
            return '';
        }
    ObjectIdCreateFromTimeArgsTemplate: &ObjectIdCreateFromTimeArgsTemplate !!js/function >
        (lhs, arg) => {
            return `ObjectId.from_datetime(datetime.datetime.fromtimestamp(${arg}/1000.0))`;
        }
    ObjectIdIsValidTemplate: &ObjectIdIsValidTemplate !!js/function >
        (lhs) => {
            return `${lhs}.is_valid`;
        }
    ObjectIdIsValidArgsTemplate: &ObjectIdIsValidArgsTemplate null
    # JS Symbol Templates
    ObjectSymbolTemplate: &ObjectSymbolTemplate null
    ObjectSymbolArgsTemplate: &ObjectSymbolArgsTemplate null
    ObjectSymbolCreateTemplate: &ObjectSymbolCreateTemplate !!js/function >
        () => {
            return '';
        }
    ObjectSymbolCreateArgsTemplate: &ObjectSymbolCreateArgsTemplate !!js/function >
        (lhs, arg) => {
            return arg;
        }
    NumberSymbolTemplate: &NumberSymbolTemplate !!js/function >
        () => {
            return 'int';
        }
    NumberSymbolArgsTemplate: &NumberSymbolArgsTemplate null
    DateSymbolTemplate: &DateSymbolTemplate null
    DateSymbolArgsTemplate: &DateSymbolArgsTemplate null
    DateSymbolNowTemplate: &DateSymbolNowTemplate !!js/function >
        () => {
            return 'datetime.datetime.utcnow';
        }
    DateSymbolNowArgsTemplate: &DateSymbolNowArgsTemplate null
    RegExpSymbolTemplate: &RegExpSymbolTemplate null
    RegExpSymbolArgsTemplate: &RegExpSymbolArgsTemplate null
