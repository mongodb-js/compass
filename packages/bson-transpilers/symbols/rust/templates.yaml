#############################################
#             Sample Templates              #
#                                           #
# The expected arguments are commented next #
# to the template itself. Currently all are #
# set to null, but to define a function     #
# replace 'null' with '!!js/function > \n   #
# and a function defined below.             #
#                                           #
# See the other template files for examples #
#                                           #
#               Good to know:               #
# lhs is left-hand-side of the expression   #
# rhs is right-hand-side of the expression  #
# All args are strings unless noted         #
#    - arg? is boolean                      #
#    - arg# is number                       #
#                                           #
#############################################
Templates:
  ########
  # Misc #
  ########

  # Filter out regex flags that have translations or are unsupported.
  RegexFlags: &RegexFlags
    i: 'i'
    m: 'm'
    u: 'u'
    y: ''
    g: ''
  BSONRegexFlags: &BSONRegexFlags
    i: 'i'
    m: 'm'
    x: 'x'
    s: 's'
    l: 'l'
    u: 'u'

  #############################################
  #                  Syntax                   #
  #                                           #
  # Templates for language syntax expressions #
  #                                           #
  #############################################

  DriverTemplate: !!js/function &DriverTemplate >
    (spec) => {
        const comment = `// Requires the MongoDB crate.\n// https://crates.io/crates/mongodb`;
        
        const options = spec.options;
        const filter = spec.filter || 'None';
        const exportMode = spec.exportMode;
        delete spec.options;
        delete spec.filter;
        delete spec.exportMode;

        const connect = `let client = Client::with_uri_str("${options.uri}").await?;`
        const coll = `client.database("${options.database}").collection::<Document>("${options.collection}")`;

        if ('aggregation' in spec) {
            let agg = spec.aggregation;
            if (agg.charAt(0) != '[') {
                agg = `[${agg}]`;
            }
            return `${comment}\n\n${connect}\nlet result = ${coll}.aggregate(${agg}, None).await?;`;
        }

        let driverMethod;
        let optionsName;
        switch (exportMode) {
            case 'Delete Query':
                driverMethod = 'delete_many';
                optionsName = 'DeleteOptions';
                break;
            case 'Update Query':
                driverMethod = 'update_many';
                optionsName = 'UpdateOptions';
                break;
            default:
                driverMethod = 'find';
                optionsName = 'FindOptions';
                break;
        }

        const findOpts = [];
        for (const k in spec) {
            let optName = k;
            let optValue = spec[k];
            switch(k) {
                case 'project':
                    optName = 'projection';
                    break;
                case 'maxTimeMS':
                    optName = 'max_time';
                    optValue = `std::time::Duration::from_millis(${optValue})`;
                    break;
            }
            findOpts.push(`    .${optName}(${optValue})`);
        }
        let optStr = '';
        if (findOpts.length > 0) {
            optStr = `let options = mongodb::options::${optionsName}::builder()\n${findOpts.join('\n')}\n    .build();\n`;
        }
        let optRef = optStr ? 'options' : 'None';
        const cmd = `let result = ${coll}.${driverMethod}(${filter}, ${optRef}).await?;`;

        return `${comment}\n\n${connect}\n${optStr}${cmd}`;
    }
  EqualitySyntaxTemplate: !!js/function &EqualitySyntaxTemplate >
    (lhs, op, rhs) => {
        if (op.includes('!') || op.includes('not')) {
            return `${lhs} != ${rhs}`;
        }
        else if (op === '==' || op === '===' || op === 'is') {
            return `${lhs} == ${rhs}`;
        }
        return `${lhs} ${op} ${rhs}`;
    }
  InSyntaxTemplate: !!js/function &InSyntaxTemplate >
    (lhs, op, rhs) => {
        let prefix = '';
        if (op.includes('!') || op.includes('not')) {
            prefix = '!';
        }
        return `${prefix}${rhs}.contains(&${lhs})`
    }
  AndSyntaxTemplate: !!js/function &AndSyntaxTemplate >
    (args) => {
        return args.join(' && ');
    }
  OrSyntaxTemplate: !!js/function &OrSyntaxTemplate >
    (args) => {
        return args.join(' || ');
    }
  NotSyntaxTemplate: !!js/function &NotSyntaxTemplate >
    (arg) => {
        return `!${arg}`;
    }
  UnarySyntaxTemplate: !!js/function &UnarySyntaxTemplate >
    (op, val) => {
        switch(op) {
            case '+':
                return val;
            case '~':
                return `!${val}`;
            default:
                return `${op}${val}`;
        }
        return `${op}${val}`;
    }
  BinarySyntaxTemplate: !!js/function &BinarySyntaxTemplate >
    (args) => {
        return args.reduce((s, op, i, arr) => {
            if (i % 2 === 0) {
                return s;
            }
            const rhs = arr[i + 1];
            switch(op) {
                case '//':
                    return `${s} / ${rhs}`
                case '**':
                    return `${s}.pow(${rhs})`
                default:
                    return `${s} ${op} ${rhs}`;
            }
        }, args[0]);
    }
  ParensSyntaxTemplate: &ParensSyntaxTemplate null
  EosTemplate: &EosSyntaxTemplate null # No args. End-of-line
  EofTemplate: &EofSyntaxTemplate null # No args. End-of-file
  FloorDivTemplate: &FloorDivSyntaxTemplate null # Args: lhs, rhs
  PowerTemplate: &PowerSyntaxTemplate null # Args: lhs, rhs
  NewTemplate: &NewSyntaxTemplate null # Args: expression, skip?, code# [to check if meant to be skipped]

  #############################################
  #               Literal Types               #
  #                                           #
  # Templates for literal type instance. Most #
  # get passed the literal itself as an arg.  #
  #                                           #
  #############################################
  StringTypeTemplate: !!js/function &StringTypeTemplate >
    (str) => {
      let newStr = str;
      if (
        (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
        (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
        newStr = str.substr(1, str.length - 2);
      }
      return `"${newStr.replace(/\\([\s\S])|(")/g, '\\$1$2')}"`;
    }
  RegexTypeTemplate: !!js/function &RegexTypeTemplate >
    (pattern, flags) => {
        // Double-quote stringify
        let newPat = pattern;
        if (
            (pattern.charAt(0) === '\'' && pattern.charAt(pattern.length - 1) === '\'') ||
            (pattern.charAt(0) === '"' && pattern.charAt(pattern.length - 1) === '"')) {
                newPat = pattern.substr(1, pattern.length - 2);
        }
        return `Regex { pattern: "${newPat.replace(/\\([\s\S])|(")/g, '\\$1$2')}".to_string(), options: "${flags}".to_string() }`;
    }
  BoolTypeTemplate: !!js/function &BoolTypeTemplate >
    (literal) => {
        return literal.toLowerCase();
    }
  IntegerTypeTemplate: &IntegerTypeTemplate null # args: literal, argType (i.e. '_string', '_decimal' etc)
  DecimalTypeTemplate: &DecimalTypeTemplate null # args: literal, argType
  LongBasicTypeTemplate: &LongBasicTypeTemplate null
  HexTypeTemplate: !!js/function &HexTypeTemplate >
    (literal, type) => {
        if (literal.charAt(1) === 'X') {
            return literal.charAt(0) + 'x' + literal.substring(2);
        }
        return literal;
    }
  OctalTypeTemplate: !!js/function &OctalTypeTemplate >
    (literal, type) => {
        switch(literal.charAt(1)) {
            case 'o':
                return literal;
            case 'O':
            case '0':
                return literal.charAt(0) + 'o' + literal.substring(2);
            default:
                return literal.charAt(0) + 'o' + literal.substring(1);
        }
    }
  NumericTypeTemplate: &NumericTypeTemplate null # args: literal, argType
  ArrayTypeTemplate: !!js/function &ArrayTypeTemplate >
    (literal, depth) => {
        if (literal === '') {
            return '[]'
        }
        return `[${literal}]`;
    }
  ArrayTypeArgsTemplate: !!js/function &ArrayTypeArgsTemplate >
    (element, depth, isLast) => {
        depth++;
        const indent = '\n' + '    '.repeat(depth);
        const closingIndent = isLast ? '\n' + '    '.repeat(depth - 1) : ',';
        return `${indent}${element}${closingIndent}`;
    }
  NullTypeTemplate: !!js/function &NullTypeTemplate >
    () => 'Bson::Null'
  UndefinedTypeTemplate: !!js/function &UndefinedTypeTemplate >
    () => 'Bson::Undefined'
  ObjectTypeTemplate: !!js/function &ObjectTypeTemplate >
    (literal) => `doc! {${literal}}`
  ObjectTypeArgsTemplate: !!js/function &ObjectTypeArgsTemplate >
    (args, depth) => {
        if (args.length === 0) {
            return '';
        }
        depth++;
        const indent = '\n' + '    '.repeat(depth);
        const closingIndent = '\n' + '    '.repeat(depth - 1);
        const doubleStringify = (str) => {
            let newStr = str;
            if (
              (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
              (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
                newStr = str.substr(1, str.length - 2);
            }
            return `"${newStr.replace(/\\([\s\S])|(")/g, '\\$1$2')}"`;
        }

        const pairs = args.map((pair) => {
            return `${indent}${doubleStringify(pair[0])}: ${pair[1]}`;
        }).join(',');

        return `${pairs}${closingIndent}`;

    }

  #############################################
  #               Symbols                     #
  #                                           #
  # Templates for symbols, can be either      #
  # functions or variables.                   #
  #                                           #
  # The *SymbolTemplates return names and     #
  # usually don't take any arguments. The     #
  # *SymbolArgsTemplates are invoked for func #
  # calls. The first argument is always the   #
  # lhs, i.e. the symbol returned from the    #
  # corresponding SymbolTemplate. The rest of #
  # the arguments are the processed arguments #
  # passed to the original function.          #
  #                                           #
  #############################################
  CodeSymbolTemplate: !!js/function &CodeSymbolTemplate >
    () => ''
  CodeSymbolArgsTemplate: !!js/function &CodeSymbolArgsTemplate >
    (lhs, code, scope) => {
        // Double quote stringify
        let newStr = code === undefined ? '' : code;
        const str = newStr;
        if (
            (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
            (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
            newStr = str.substr(1, str.length - 2);
        }
        code = `"${newStr.replace(/\\([\s\S])|(")/g, '\\$1$2')}".to_string()`;
        if (scope === undefined) {
            return `Bson::JavaScriptCode(${code})`;
        } else {
            return `JavaScriptCodeWithScope { code: ${code}, scope: ${scope} }`;
        }
    }
  ObjectIdSymbolTemplate: !!js/function &ObjectIdSymbolTemplate >
    () => 'ObjectId'
  ObjectIdSymbolArgsTemplate: !!js/function &ObjectIdSymbolArgsTemplate >
    (lhs, arg) => {
        if (arg === undefined || arg === '') {
            return '::new()';
        }
        // Double quote stringify
        let newArg = arg;
        if (
            (arg.charAt(0) === '\'' && arg.charAt(arg.length - 1) === '\'') ||
            (arg.charAt(0) === '"' && arg.charAt(arg.length - 1) === '"')) {
            newArg = arg.substr(1, arg.length - 2);
        }
        newArg = `"${newArg.replace(/\\([\s\S])|(")/g, '\\$1$2')}"`;
        return `::parse_str(${newArg})?`;
    }
  BinarySymbolTemplate: &BinarySymbolTemplate null
  BinarySymbolArgsTemplate: &BinarySymbolArgsTemplate null
  BinarySymbolSubtypeDefaultTemplate:
    !!js/function &BinarySymbolSubtypeDefaultTemplate >
    () => 'BinarySubtype::Generic'
  BinarySymbolSubtypeFunctionTemplate:
    !!js/function &BinarySymbolSubtypeFunctionTemplate >
    () => 'BinarySubtype::Function'
  BinarySymbolSubtypeByteArrayTemplate:
    !!js/function &BinarySymbolSubtypeByteArrayTemplate >
    () => 'BinarySubtype::BinaryOld'
  BinarySymbolSubtypeUuidOldTemplate:
    !!js/function &BinarySymbolSubtypeUuidOldTemplate >
    () => 'BinarySubtype::UuidOld'
  BinarySymbolSubtypeUuidTemplate:
    !!js/function &BinarySymbolSubtypeUuidTemplate >
    () => 'BinarySubtype::Uuid'
  BinarySymbolSubtypeMd5Template:
    !!js/function &BinarySymbolSubtypeMd5Template >
    () => 'BinarySubtype::Md5'
  BinarySymbolSubtypeUserDefinedTemplate:
    !!js/function &BinarySymbolSubtypeUserDefinedTemplate >
    (arg) => `BinarySubtype::UserDefined(${arg})`
  DBRefSymbolTemplate: &DBRefSymbolTemplate null # No args
  DBRefSymbolArgsTemplate: &DBRefSymbolArgsTemplate null # Args: lhs, coll, id, db
  DoubleSymbolTemplate: !!js/function &DoubleSymbolTemplate >
    () => ''
  DoubleSymbolArgsTemplate: !!js/function &DoubleSymbolArgsTemplate >
    (lhs, arg, type) => {
        arg = arg === undefined ? 0 : arg;
        if (type === '_decimal' || type === '_double') {
            return arg;
        }
        if (type === '_integer' || type === '_long') {
            return `${arg}.0`;
        }
        if (type === '_string') {
            return `${arg}.parse::<f32>()?`;
        }
        return `f32::try_from(${arg})?`;
    }
  Int32SymbolTemplate: !!js/function &Int32SymbolTemplate >
    () => ''
  Int32SymbolArgsTemplate: !!js/function &Int32SymbolArgsTemplate >
    (lhs, arg, type) => {
        arg = arg === undefined ? 0 : arg;
        if (type === '_integer' || type === '_long' || type === '_hex' || type === '_octal') {
            return arg;
        }
        if (type === '_string') {
            return `${arg}.parse::<i32>()?`;
        }
        return `i32::try_from(${arg})?`;
    }
  LongSymbolTemplate: !!js/function &LongSymbolTemplate >
    () => ''
  LongSymbolArgsTemplate: !!js/function &LongSymbolArgsTemplate >
    (lhs, arg, type) => {
        arg = arg === undefined ? 0 : arg;
        if (type === '_integer' || type === '_long' || type === '_hex' || type === '_octal') {
            return `${arg}i64`;
        }
        if (type === '_string') {
            return `${arg}.parse::<i64>()?`;
        }
        return `i64::try_from(${arg})?`;
    }
  RegExpSymbolTemplate: !!js/function &RegExpSymbolTemplate >
    () => 'Regex'
  RegExpSymbolArgsTemplate: &RegExpSymbolArgsTemplate null # Args: lhs, pattern, flags
  SymbolSymbolTemplate: !!js/function &SymbolSymbolTemplate >
    () => 'Bson::Symbol'
  SymbolSymbolArgsTemplate: !!js/function &SymbolSymbolArgsTemplate >
    (_, arg) => `(${arg})`
  BSONRegExpSymbolTemplate: !!js/function &BSONRegExpSymbolTemplate >
    () => 'Regex'
  BSONRegExpSymbolArgsTemplate: !!js/function &BSONRegExpSymbolArgsTemplate >
    (_, pattern, flags) => {
        if (flags === null || flags === undefined) {
            flags = '';
        }
        if (
            (flags.charAt(0) === '\'' && flags.charAt(flags.length - 1) === '\'') ||
            (flags.charAt(0) === '"' && flags.charAt(flags.length - 1) === '"')) {
                flags = flags.substr(1, flags.length - 2);
        }
        // Double-quote stringify
        let newPat = pattern;
        if (
            (pattern.charAt(0) === '\'' && pattern.charAt(pattern.length - 1) === '\'') ||
            (pattern.charAt(0) === '"' && pattern.charAt(pattern.length - 1) === '"')) {
                newPat = pattern.substr(1, pattern.length - 2);
        }
        return ` { pattern: "${newPat.replace(/\\([\s\S])|(")/g, '\\$1$2')}", flags: "${flags}" }`;
    }
  Decimal128SymbolTemplate: &Decimal128SymbolTemplate null # No args
  Decimal128SymbolArgsTemplate: &Decimal128SymbolArgsTemplate null # Args: lhs, arg
  MinKeySymbolTemplate: !!js/function &MinKeySymbolTemplate >
    () => 'Bson::MinKey'
  MinKeySymbolArgsTemplate: !!js/function &MinKeySymbolArgsTemplate >
    () => ''
  MaxKeySymbolTemplate: !!js/function &MaxKeySymbolTemplate >
    () => 'Bson::MaxKey'
  MaxKeySymbolArgsTemplate: !!js/function &MaxKeySymbolArgsTemplate >
    () => ''
  TimestampSymbolTemplate: !!js/function &TimestampSymbolTemplate >
    () => 'Timestamp'
  TimestampSymbolArgsTemplate: !!js/function &TimestampSymbolArgsTemplate >
    (lhs, low, high) => {
        if (low === undefined) {
            low = 0;
            high = 0;
        }
        return ` { time: ${low}, increment: ${high} }`
    }
  # non bson-specific
  NumberSymbolTemplate: !!js/function &NumberSymbolTemplate >
    () => ''
  NumberSymbolArgsTemplate: !!js/function &NumberSymbolArgsTemplate >
    (lhs, arg, type) => {
        arg = arg === undefined ? 0 : arg;

        switch(type) {
            case '_string':
                if (arg.indexOf('.') !== -1) {
                    return `${arg}.parse::<f32>()?`;
                }
                return `${arg}.parse::<i32>()?`;
            case '_integer':
            case '_long':
            case '_decimal':
                return `${arg}`;
            default:
                return `f32::try_from(${arg})?`;
        }
    }
  DateSymbolTemplate: !!js/function &DateSymbolTemplate >
    () => 'DateTime'
  DateSymbolArgsTemplate: !!js/function &DateSymbolArgsTemplate >
    (lhs, date, isString) => {
        let toStr = isString ? '.to_rfc3339_string()' : '';
        if (date === null) {
            return `${lhs}::now()${toStr}`;
        }
        return `${lhs}::parse_rfc3339_str("${date.toISOString()}")?${toStr}`;
    }

  #############################################
  #         Object Attributes/Methods         #
  #                                           #
  # These're variables or functions called on #
  # instantiated objects. For example,        #
  # ObjectId().isValid() or Timestamp().t     #
  #                                           #
  # They follow the same pattern with the
  # *Template/*ArgsTemplates: usually no args #
  # to the Template and lhs plus any original #
  # arguments to the ArgsTemplate.            #
  #                                           #
  #############################################
  CodeCodeTemplate: &CodeCodeTemplate null
  CodeCodeArgsTemplate: &CodeCodeArgsTemplate null
  CodeScopeTemplate: !!js/function &CodeScopeTemplate >
    (lhs) => `${lhs}.scope`
  CodeScopeArgsTemplate: &CodeScopeArgsTemplate null
  ObjectIdToStringTemplate: !!js/function &ObjectIdToStringTemplate >
    (lhs) => `${lhs}.to_hex()`
  ObjectIdToStringArgsTemplate: !!js/function &ObjectIdToStringArgsTemplate >
    () => ''
  ObjectIdEqualsTemplate: !!js/function &ObjectIdEqualsTemplate >
    (lhs) => `${lhs} == `
  ObjectIdEqualsArgsTemplate: !!js/function &ObjectIdEqualsArgsTemplate >
    (_, arg) => arg
  ObjectIdGetTimestampTemplate: !!js/function &ObjectIdGetTimestampTemplate >
    (lhs) => `${lhs}.timestamp()`
  ObjectIdGetTimestampArgsTemplate:
    !!js/function &ObjectIdGetTimestampArgsTemplate >
    () => ''
  ObjectIdIsValidTemplate: &ObjectIdIsValidTemplate null
  ObjectIdIsValidArgsTemplate: &ObjectIdIsValidArgsTemplate null
  BinaryValueTemplate: !!js/function &BinaryValueTemplate >
    (arg) => `${arg}.bytes`
  BinaryValueArgsTemplate: !!js/function &BinaryValueArgsTemplate >
    () => ''
  BinaryLengthTemplate: !!js/function &BinaryLengthTemplate >
    (arg) => `${arg}.bytes.len()`
  BinaryLengthArgsTemplate: !!js/function &BinaryLengthArgsTemplate >
    () => ''
  BinaryToStringTemplate: !!js/function &BinaryToStringTemplate >
    (arg) => `format!("{}", ${arg})`
  BinaryToStringArgsTemplate: !!js/function &BinaryToStringArgsTemplate >
    () => ''
  BinarySubtypeTemplate: !!js/function &BinarySubtypeTemplate >
    (arg) => `${arg}.subtype`
  BinarySubtypeArgsTemplate: !!js/function &BinarySubtypeArgsTemplate >
    () => ''
  DBRefGetDBTemplate: &DBRefGetDBTemplate null
  DBRefGetCollectionTemplate: &DBRefGetCollectionTemplate null
  DBRefGetIdTemplate: &DBRefGetIdTemplate null
  DBRefGetDBArgsTemplate: &DBRefGetDBArgsTemplate null
  DBRefGetCollectionArgsTemplate: &DBRefGetCollectionArgsTemplate null
  DBRefGetIdArgsTemplate: &DBRefGetIdArgsTemplate null
  DBRefToStringTemplate: &DBRefToStringTemplate null
  DBRefToStringArgsTemplate: &DBRefToStringArgsTemplate null
  DoubleValueOfTemplate: &DoubleValueOfTemplate null
  DoubleValueOfArgsTemplate: &DoubleValueOfArgsTemplate null
  Int32ValueOfTemplate: &Int32ValueOfTemplate null
  Int32ValueOfArgsTemplate: &Int32ValueOfArgsTemplate null
  Int32ToStringTemplate: &Int32ToStringTemplate null
  Int32ToStringArgsTemplate: &Int32ToStringArgsTemplate null
  LongEqualsTemplate: !!js/function &LongEqualsTemplate >
    (lhs) => `${lhs} == `
  LongEqualsArgsTemplate: !!js/function &LongEqualsArgsTemplate >
    (_, rhs) => rhs
  LongToStringTemplate: !!js/function &LongToStringTemplate >
    (arg) => arg
  LongToStringArgsTemplate: &LongToStringArgsTemplate null
  LongToIntTemplate: !!js/function &LongToIntTemplate >
    (arg) => `${arg} as i32`
  LongToIntArgsTemplate: !!js/function &LongToIntArgsTemplate >
    () => ''
  LongValueOfTemplate: &LongValueOfTemplate null
  LongValueOfArgsTemplate: &LongValueOfArgsTemplate null
  LongToNumberTemplate: !!js/function &LongToNumberTemplate >
    (arg) => `${arg} as f64`
  LongToNumberArgsTemplate: !!js/function &LongToNumberArgsTemplate >
    () => ''
  LongAddTemplate: !!js/function &LongAddTemplate >
    (lhs) => `${lhs} + `
  LongAddArgsTemplate: !!js/function &LongAddArgsTemplate >
    (_, rhs) => rhs
  LongSubtractTemplate: !!js/function &LongSubtractTemplate >
    (lhs) => `${lhs} - `
  LongSubtractArgsTemplate: !!js/function &LongSubtractArgsTemplate >
    (_, rhs) => rhs
  LongMultiplyTemplate: !!js/function &LongMultiplyTemplate >
    (lhs) => `${lhs} * `
  LongMultiplyArgsTemplate: !!js/function &LongMultiplyArgsTemplate >
    (_, rhs) => rhs
  LongDivTemplate: !!js/function &LongDivTemplate >
    (lhs) => `${lhs} / `
  LongDivArgsTemplate: !!js/function &LongDivArgsTemplate >
    (_, rhs) => rhs
  LongModuloTemplate: !!js/function &LongModuloTemplate >
    (lhs) => `${lhs} % `
  LongModuloArgsTemplate: !!js/function &LongModuloArgsTemplate >
    (_, rhs) => rhs
  LongAndTemplate: !!js/function &LongAndTemplate >
    (lhs) => `${lhs} & `
  LongAndArgsTemplate: !!js/function &LongAndArgsTemplate >
    (_, rhs) => rhs
  LongOrTemplate: !!js/function &LongOrTemplate >
    (lhs) => `${lhs} | `
  LongOrArgsTemplate: !!js/function &LongOrArgsTemplate >
    (_, rhs) => rhs
  LongXorTemplate: !!js/function &LongXorTemplate >
    (lhs) => `${lhs} ^ `
  LongXorArgsTemplate: !!js/function &LongXorArgsTemplate >
    (_, rhs) => rhs
  LongShiftLeftTemplate: !!js/function &LongShiftLeftTemplate >
    (lhs) => `${lhs} << `
  LongShiftLeftArgsTemplate: !!js/function &LongShiftLeftArgsTemplate >
    (_, rhs) => rhs
  LongShiftRightTemplate: !!js/function &LongShiftRightTemplate >
    (lhs) => `${lhs} >> `
  LongShiftRightArgsTemplate: !!js/function &LongShiftRightArgsTemplate >
    (_, rhs) => rhs
  LongCompareTemplate: !!js/function &LongCompareTemplate >
    (lhs) => `${lhs} - `
  LongCompareArgsTemplate: !!js/function &LongCompareArgsTemplate >
    (_, rhs) => rhs
  LongIsOddTemplate: !!js/function &LongIsOddTemplate >
    (arg) => `${arg} % 2 == 1`
  LongIsOddArgsTemplate: !!js/function &LongIsOddArgsTemplate >
    () => ''
  LongIsZeroTemplate: !!js/function &LongIsZeroTemplate >
    (arg) => `${arg} == 0`
  LongIsZeroArgsTemplate: !!js/function &LongIsZeroArgsTemplate >
    () => ''
  LongIsNegativeTemplate: !!js/function &LongIsNegativeTemplate >
    (arg) => `${arg} < 0`
  LongIsNegativeArgsTemplate: !!js/function &LongIsNegativeArgsTemplate >
    () => ''
  LongNegateTemplate: !!js/function &LongNegateTemplate >
    () => '-'
  LongNegateArgsTemplate: !!js/function &LongNegateArgsTemplate >
    (arg) => arg
  LongNotTemplate: !!js/function &LongNotTemplate >
    () => '~'
  LongNotArgsTemplate: !!js/function &LongNotArgsTemplate >
    (arg) => arg
  LongNotEqualsTemplate: !!js/function &LongNotEqualsTemplate >
    (lhs) => `${lhs} != `
  LongNotEqualsArgsTemplate: !!js/function &LongNotEqualsArgsTemplate >
    (_, rhs) => rhs
  LongGreaterThanTemplate: !!js/function &LongGreaterThanTemplate >
    (lhs) => `${lhs} > `
  LongGreaterThanArgsTemplate: !!js/function &LongGreaterThanArgsTemplate >
    (_, rhs) => rhs
  LongGreaterThanOrEqualTemplate:
    !!js/function &LongGreaterThanOrEqualTemplate >
    (lhs) => `${lhs} >= `
  LongGreaterThanOrEqualArgsTemplate:
    !!js/function &LongGreaterThanOrEqualArgsTemplate >
    (_, rhs) => rhs
  LongLessThanTemplate: !!js/function &LongLessThanTemplate >
    (lhs) => `${lhs} < `
  LongLessThanArgsTemplate: !!js/function &LongLessThanArgsTemplate >
    (_, rhs) => rhs
  LongLessThanOrEqualTemplate: !!js/function &LongLessThanOrEqualTemplate >
    (lhs) => `${lhs} <= `
  LongLessThanOrEqualArgsTemplate:
    !!js/function &LongLessThanOrEqualArgsTemplate >
    (_, rhs) => rhs
  LongFloatApproxTemplate: !!js/function &LongFloatApproxTemplate >
    (arg) => `${arg} as f32`
  LongTopTemplate: !!js/function &LongTopTemplate >
    (arg) => `${arg} >> 32`
  LongBottomTemplate: !!js/function &LongBottomTemplate >
    (arg) => `${arg} & 0x0000ffff`
  TimestampToStringTemplate: !!js/function &TimestampToStringTemplate >
    (arg) => `${arg}.to_string()`
  TimestampToStringArgsTemplate: !!js/function &TimestampToStringArgsTemplate >
    () => ''
  TimestampEqualsTemplate: !!js/function &TimestampEqualsTemplate >
    (lhs) => `${lhs} == `
  TimestampEqualsArgsTemplate: !!js/function &TimestampEqualsArgsTemplate >
    (_, rhs) => rhs
  TimestampGetLowBitsTemplate: !!js/function &TimestampGetLowBitsTemplate >
    (arg) => `${arg}.time`
  TimestampGetLowBitsArgsTemplate:
    !!js/function &TimestampGetLowBitsArgsTemplate >
    () => ''
  TimestampGetHighBitsTemplate: !!js/function &TimestampGetHighBitsTemplate >
    (arg) => `${arg}.increment`
  TimestampGetHighBitsArgsTemplate:
    !!js/function &TimestampGetHighBitsArgsTemplate >
    () => ''
  TimestampTTemplate: !!js/function &TimestampTTemplate >
    (arg) => `${arg}.time`
  TimestampITemplate: !!js/function &TimestampITemplate >
    (arg) => `${arg}.increment`
  TimestampAsDateTemplate: !!js/function &TimestampAsDateTemplate >
    (arg) => `DateTime::from_millis(${arg}.time)`
  TimestampAsDateArgsTemplate: !!js/function &TimestampAsDateArgsTemplate >
    () => ''
  TimestampCompareTemplate: !!js/function &TimestampCompareTemplate >
    (arg) => `${arg}.cmp`
  TimestampCompareArgsTemplate: !!js/function &TimestampCompareArgsTemplate >
    (_, rhs) => `(${rhs})`
  TimestampNotEqualsTemplate: !!js/function &TimestampNotEqualsTemplate >
    (lhs) => `${lhs} != `
  TimestampNotEqualsArgsTemplate:
    !!js/function &TimestampNotEqualsArgsTemplate >
    (_, rhs) => rhs
  TimestampGreaterThanTemplate: !!js/function &TimestampGreaterThanTemplate >
    (lhs) => `${lhs} > `
  TimestampGreaterThanArgsTemplate:
    !!js/function &TimestampGreaterThanArgsTemplate >
    (_, rhs) => rhs
  TimestampGreaterThanOrEqualTemplate:
    !!js/function &TimestampGreaterThanOrEqualTemplate >
    (lhs) => `${lhs} >= `
  TimestampGreaterThanOrEqualArgsTemplate:
    !!js/function &TimestampGreaterThanOrEqualArgsTemplate >
    (_, rhs) => rhs
  TimestampLessThanTemplate: !!js/function &TimestampLessThanTemplate >
    (lhs) => `${lhs} < `
  TimestampLessThanArgsTemplate: !!js/function &TimestampLessThanArgsTemplate >
    (_, rhs) => rhs
  TimestampLessThanOrEqualTemplate:
    !!js/function &TimestampLessThanOrEqualTemplate >
    (lhs) => `${lhs} <= `
  TimestampLessThanOrEqualArgsTemplate:
    !!js/function &TimestampLessThanOrEqualArgsTemplate >
    (_, rhs) => rhs
  SymbolValueOfTemplate: !!js/function &SymbolValueOfTemplate >
    (arg) => `${arg}.as_symbol().unwrap()`
  SymbolValueOfArgsTemplate: !!js/function &SymbolValueOfArgsTemplate >
    () => ''
  SymbolInspectTemplate: !!js/function &SymbolInspectTemplate >
    (arg) => `format!("{:?}", ${arg})`
  SymbolInspectArgsTemplate: !!js/function &SymbolInspectArgsTemplate >
    () => ''
  SymbolToStringTemplate: !!js/function &SymbolToStringTemplate >
    (arg) => `${arg}.as_symbol().unwrap()`
  SymbolToStringArgsTemplate: !!js/function &SymbolToStringArgsTemplate >
    () => ''
  Decimal128ToStringTemplate: &Decimal128ToStringTemplate null
  Decimal128ToStringArgsTemplate: &Decimal128ToStringArgsTemplate null
  # non bson-specific
  DateSymbolNowTemplate: !!js/function &DateSymbolNowTemplate >
    () => 'DateTime::now()'
  DateSymbolNowArgsTemplate: !!js/function &DateSymbolNowArgsTemplate >
    () => ''

  #############################################
  #         Symbol Attributes/Methods         #
  #                                           #
  # These're variables or functions called on #
  # symbols. Also called bson-utils.          #
  #                                           #
  # They are basically the same thing as      #
  # object attributes/methods, but need to be #
  # distinguished since they are separate     #
  # namespaces that happen to have the same   #
  # name which is v confusing.                #
  #                                           #
  # For example, ObjectId().toString() is an  #
  # object method, while ObjectId.fromString  #
  # is a symbol attribute. These are two      #
  # separate ObjectId related namespaces that #
  # don't overlap.                            #
  #                                           #
  #############################################
  LongSymbolMaxTemplate: !!js/function &LongSymbolMaxTemplate >
    () => 'i64::MAX'
  LongSymbolMaxArgsTemplate: !!js/function &LongSymbolMaxArgsTemplate >
    () => ''
  LongSymbolMinTemplate: !!js/function &LongSymbolMinTemplate >
    () => 'i64::MIN'
  LongSymbolMinArgsTemplate: !!js/function &LongSymbolMinArgsTemplate >
    () => ''
  LongSymbolZeroTemplate: !!js/function &LongSymbolZeroTemplate >
    () => '0i64'
  LongSymbolZeroArgsTemplate: !!js/function &LongSymbolZeroArgsTemplate >
    () => ''
  LongSymbolOneTemplate: !!js/function &LongSymbolOneTemplate >
    () => '1i64'
  LongSymbolOneArgsTemplate: !!js/function &LongSymbolOneArgsTemplate >
    () => ''
  LongSymbolNegOneTemplate: !!js/function &LongSymbolNegOneTemplate >
    () => '-1i64'
  LongSymbolNegOneArgsTemplate: !!js/function &LongSymbolNegOneArgsTemplate >
    () => ''
  LongSymbolFromBitsTemplate: !!js/function &LongSymbolFromBitsTemplate >
    () => ''
  LongSymbolFromBitsArgsTemplate:
    !!js/function &LongSymbolFromBitsArgsTemplate >
    (_, arg) => `${arg}i64`
  LongSymbolFromIntTemplate: !!js/function &LongSymbolFromIntTemplate >
    () => ''
  LongSymbolFromIntArgsTemplate: !!js/function &LongSymbolFromIntArgsTemplate >
    (_, arg) => `${arg}i64`
  LongSymbolFromNumberTemplate: !!js/function &LongSymbolFromNumberTemplate >
    () => ''
  LongSymbolFromNumberArgsTemplate:
    !!js/function &LongSymbolFromNumberArgsTemplate >
    (_, arg) => `${arg} as i64`
  LongSymbolFromStringTemplate: !!js/function &LongSymbolFromStringTemplate >
    () => ''
  LongSymbolFromStringArgsTemplate:
    !!js/function &LongSymbolFromStringArgsTemplate >
    (_, arg, radix) => {
        if (radix) {
            return `i64::from_str_radix(${arg}, ${radix})?`;
        }
        return `${arg}.parse::<i64>()?`;
    }
  Decimal128SymbolFromStringTemplate: &Decimal128SymbolFromStringTemplate null
  Decimal128SymbolFromStringArgsTemplate: &Decimal128SymbolFromStringArgsTemplate null
  ObjectIdCreateFromHexStringTemplate:
    !!js/function &ObjectIdCreateFromHexStringTemplate >
    (lhs) => lhs
  ObjectIdCreateFromHexStringArgsTemplate:
    !!js/function &ObjectIdCreateFromHexStringArgsTemplate >
    (lhs, arg) => {
        // Double quote stringify
        let newArg = arg;
        if (
            (arg.charAt(0) === '\'' && arg.charAt(arg.length - 1) === '\'') ||
            (arg.charAt(0) === '"' && arg.charAt(arg.length - 1) === '"')) {
            newArg = arg.substr(1, arg.length - 2);
        }
        newArg = `"${newArg.replace(/\\([\s\S])|(")/g, '\\$1$2')}"`;
        return `::parse_str(${newArg})?`;
    }
  ObjectIdCreateFromTimeTemplate: &ObjectIdCreateFromTimeTemplate null
  ObjectIdCreateFromTimeArgsTemplate: &ObjectIdCreateFromTimeArgsTemplate null
  # non bson-specific would go here, but there aren't any atm.

  #############################################
  #                 Imports                   #
  #                                           #
  # Each type has a 'code' that is consistent #
  # between languages. The import templates   #
  # for each code generate the required       #
  # statement for each type. No args.         #
  #                                           #
  # The ImportTemplate collects everything    #
  # into one statement.                       #
  #                                           #
  #############################################
  ImportTemplate: !!js/function &ImportTemplate >
    (args) => {
        let merged = new Set(Object.values(args));
        return [...merged].sort().join('\n');
    }
  DriverImportTemplate: !!js/function &DriverImportTemplate >
    () => 'use mongodb::Client;'
  0ImportTemplate: &0ImportTemplate null
  1ImportTemplate: &1ImportTemplate null
  2ImportTemplate: &2ImportTemplate null
  3ImportTemplate: &3ImportTemplate null
  4ImportTemplate: &4ImportTemplate null
  5ImportTemplate: &5ImportTemplate null
  6ImportTemplate: &6ImportTemplate null
  7ImportTemplate: &7ImportTemplate null
  8ImportTemplate: !!js/function &8ImportTemplate >
    () => 'use mongodb::bson::Regex;'
  9ImportTemplate: &9ImportTemplate null
  10ImportTemplate: !!js/function &10ImportTemplate >
    () => 'use mongodb::bson::doc;'
  # Null
  11ImportTemplate: !!js/function &11ImportTemplate >
    () => 'use mongodb::bson::Bson;'
  # Undefined
  12ImportTemplate: !!js/function &12ImportTemplate >
    () => 'use mongodb::bson::Bson;'
  # Code
  100ImportTemplate: !!js/function &100ImportTemplate >
    () => 'use mongodb::bson::Bson;'
  101ImportTemplate: !!js/function &101ImportTemplate >
    () => 'use mongodb::bson::oid::ObjectId;'
  102ImportTemplate: !!js/function &102ImportTemplate >
    () => 'use mongodb::bson::Binary;'
  103ImportTemplate: &103ImportTemplate null
  104ImportTemplate: &104ImportTemplate null
  105ImportTemplate: &105ImportTemplate null
  106ImportTemplate: &106ImportTemplate null
  # MinKey
  107ImportTemplate: !!js/function &107ImportTemplate >
    () => 'use mongodb::bson::Bson;'
  # MaxKey
  108ImportTemplate: !!js/function &108ImportTemplate >
    () => 'use mongodb::bson::Bson;'
  109ImportTemplate: !!js/function &109ImportTemplate >
    () => 'use mongodb::bson::Regex;'
  110ImportTemplate: !!js/function &110ImportTemplate >
    () => 'use mongodb::bson::Timestamp;'
  111ImportTemplate: &111ImportTemplate null
  112ImportTemplate: &112ImportTemplate null
  113ImportTemplate: !!js/function &113ImportTemplate >
    () => 'use mongodb::bson::JavaScriptCodeWithScope;'
  114ImportTemplate: !!js/function &114ImportTemplate >
    () => 'use mongodb::bson::spec::BinarySubtype;'
  200ImportTemplate: !!js/function &200ImportTemplate >
    () => 'use mongodb::bson::DateTime;'
  201ImportTemplate: &201ImportTemplate null
  300ImportTemplate: &300ImportTemplate null
  301ImportTemplate: &301ImportTemplate null
  302ImportTemplate: &302ImportTemplate null
  303ImportTemplate: &303ImportTemplate null
  304ImportTemplate: &304ImportTemplate null
  305ImportTemplate: &305ImportTemplate null
  306ImportTemplate: &306ImportTemplate null
