# C# Templates
Templates:
    # BSON Object Type templates
    CodeTypeTemplate: &CodeTypeTemplate null
    StringTypeTemplate: &StringTypeTemplate !!js/function >
        (str) => {
            let newStr = str;
            if (
              (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
              (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
              newStr = str.substr(1, str.length - 2);
            }
            return `"${newStr.replace(/\\([\s\S])|(")/g, '\\$1$2')}"`;
        }
    RegexTypeTemplate: &RegexTypeTemplate !!js/function >
        (flags, pattern) => {
            // Double-quote stringify
            const str = pattern + flags;
            let newStr = str;
            if (
                (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
                (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
                    newStr = str.substr(1, str.length - 2);
            }
            return `new Regex(@"${newStr.replace(/\\([\s\S])|(")/g, '\\$1$2')}")`;
        }
    BoolTypeTemplate: &BoolTypeTemplate null
    IntegerTypeTemplate: &IntegerTypeTemplate null
    DecimalTypeTemplate: &DecimalTypeTemplate null
    LongBasicTypeTemplate: &LongBasicTypeTemplate null
    HexTypeTemplate: &HexTypeTemplate null
    OctalTypeTemplate: &OctalTypeTemplate !!js/function >
        (literal) => {
            literal = literal.replace(/[oO]+/g, '0')
            return parseInt(literal, 8).toString()
        }
    NumericTypeTemplate: &NumericTypeTemplate null
    ArrayTypeTemplate: &ArrayTypeTemplate !!js/function >
        (literal) => {
            if (literal === '') {
              return 'new BsonArray()'
            }
            return `new BsonArray {${literal}}`;
        }
    NullTypeTemplate: &NullTypeTemplate !!js/function >
        () => {
            return 'BsonNull.Value';
        }
    UndefinedTypeTemplate: &UndefinedTypeTemplate !!js/function >
        () => {
            return 'BsonUndefined.Value';
        }
    ObjectTypeTemplate: &ObjectTypeTemplate !!js/function >
        (literal) => {
            if (literal === '') {
                return `new BsonDocument()`;
            }
            return `new BsonDocument${literal}`;
        }
    ObjectTypeArgsTemplate: &ObjectTypeArgsTemplate !!js/function >
        (arg) => {
            return arg.reduce((str, pair) => {
                let newStr = pair[0];
                if (
                    (pair[0].charAt(0) === '\'' && pair[0].charAt(pair[0].length - 1) === '\'') ||
                    (pair[0].charAt(0) === '"' && pair[0].charAt(pair[0].length - 1) === '"')) {
                        newStr = pair[0].substr(1, pair[0].length - 2);
                        console.log('new str in if', newStr)
                }
                newStr = `"${newStr.replace(/\\([\s\S])|(")/g, '\\$1$2')}"`;

                if (str !== '') {
                    return `{ ${str.replace(/\((.*)\)/, "{ $1 }")}, { ${newStr}, ${pair[1]} } }`;
                } else {
                    return `(${newStr}, ${pair[1]})`;
                }
            }, '');
        }
    # BSON Object Method templates
    CodeCodeTemplate: &CodeCodeTemplate !!js/function >
        (lhs) => {
            return `${lhs}.Code`;
        }
    CodeCodeArgsTemplate: &CodeCodeArgsTemplate null
    CodeScopeTemplate: &CodeScopeTemplate !!js/function >
        (lhs) => {
            return `${lhs}.Scope`;
        }
    CodeScopeArgsTemplate: &CodeScopeArgsTemplate null
    CodeToStringTemplate: &CodeToStringTemplate !!js/function >
        (lhs) => {
            return `${lhs}.ToString`;
        }
    CodeToStringArgsTemplate: &CodeToStringArgsTemplate null
    ObjectIdToStringTemplate: &ObjectIdToStringTemplate !!js/function >
        (lhs) => {
            return `${lhs}.ToString`;
        }
    ObjectIdToStringArgsTemplate: &ObjectIdToStringArgsTemplate null
    ObjectIdEqualsTemplate: &ObjectIdEqualsTemplate !!js/function >
        (lhs) => {
            return '';
        }
    ObjectIdEqualsArgsTemplate: &ObjectIdEqualsArgsTemplate !!js/function >
        (lhs, arg) => {
            if (arg.indexOf('new') === 0) {
              arg = arg.replace(/new /g, '')
            }
            return `new BsonObjectId().Equals(new ${arg})`;
        }

    ObjectIdGetTimestampTemplate: &ObjectIdGetTimestampTemplate !!js/function >
        (lhs) => {
            return `${lhs}.ToUniversalTime`;
        }
    ObjectIdGetTimestampArgsTemplate: &ObjectIdGetTimestampArgsTemplate null
    BinaryValueTemplate: &BinaryValueTemplate !!js/function >
        (lhs) => {
            return `${lhs}.ToString`;
        }
    BinaryValueArgsTemplate: &BinaryValueArgsTemplate null
    BinaryLengthTemplate: &BinaryLengthTemplate !!js/function >
        () => {
          return '';
        }
    BinaryLengthArgsTemplate: &BinaryLengthArgsTemplate !!js/function >
        (lhs) => {
          return `${lhs}.Length`;
        }
    BinaryToStringTemplate: &BinaryToStringTemplate !!js/function >
        (lhs) => {
          return `${lhs}.ToString`;
        }
    BinaryToStringArgsTemplate: &BinaryToStringArgsTemplate null
    BinarySubtypeTemplate: &BinarySubtypeTemplate !!js/function >
        (lhs) => {
          return `${lhs}.SubType`;
        }
    BinarySubtypeArgsTemplate: &BinarySubtypeArgsTemplate null
    DBRefGetDBTemplate: &DBRefGetDBTemplate !!js/function >
        (lhs) => {
          return `${lhs}.DatabaseName`;
        }
    DBRefGetDBArgsTemplate: &DBRefGetDBArgsTemplate null
    DBRefGetCollectionTemplate: &DBRefGetCollectionTemplate !!js/function >
        (lhs) => {
            return `${lhs}.CollectionName`;
        }
    DBRefGetCollectionArgsTemplate: &DBRefGetCollectionArgsTemplate null
    DBRefGetIdTemplate: &DBRefGetIdTemplate !!js/function >
        (lhs) => {
            return `${lhs}.Id`;
        }
    DBRefGetIdArgsTemplate: &DBRefGetIdArgsTemplate null
    DBRefToStringTemplate: &DBRefToStringTemplate !!js/function >
        (lhs) => {
          return `${lhs}.ToString`;
        }
    DBRefToStringArgsTemplate: &DBRefToStringArgsTemplate null
    DoubleValueOfTemplate: &DoubleValueOfTemplate !!js/function >
        (lhs) => {
            return `${lhs}.Value`;
        }
    DoubleValueOfArgsTemplate: &DoubleValueOfArgsTemplate !!js/function >
        (lhs) => {
            return '';
        }
    Int32ValueOfTemplate: &Int32ValueOfTemplate !!js/function >
        (lhs) => {
            return lhs;
        }
    Int32ValueOfArgsTemplate: &Int32ValueOfArgsTemplate !!js/function >
        (lhs) => {
            return '';
        }
    Int32ToStringTemplate: &Int32ToStringTemplate null
    Int32ToStringArgsTemplate: &Int32ToStringArgsTemplate null
    LongEqualsTemplate: &LongEqualsTemplate !!js/function >
        (lhs) => {
            return `${lhs}.Equals`;
        }
    LongEqualsArgsTemplate: &LongEqualsArgsTemplate null
    LongToIntTemplate: &LongToIntTemplate !!js/function >
        (lhs) => {
            return `${lhs}.ToInt32`;
        }
    LongToIntArgsTemplate: &LongToIntArgsTemplate null
    LongValueOfTemplate: &LongValueOfTemplate !!js/function >
        (lhs) => {
            return `${lhs}.ToInt32`;
        }
    LongValueOfArgsTemplate: &LongValueOfArgsTemplate !!js/function >
        (lhs) => {
            return '';
        }
    LongToNumberTemplate: &LongToNumberTemplate !!js/function >
        (lhs) => {
            return `${lhs}.Value`;
        }
    LongToNumberArgsTemplate: &LongToNumberArgsTemplate !!js/function >
        (lhs) => {
        (lhs) => {
            return '';
        }
            return '';
        }
    LongAddTemplate: &LongAddTemplate !!js/function >
        (lhs) => {
            return lhs;
        }
    LongAddArgsTemplate: &LongAddArgsTemplate !!js/function >
        (lhs, arg) => {
            return ` + ${arg}`;
        }
    LongSubtractTemplate: &LongSubtractTemplate !!js/function >
        (lhs) => {
            return lhs;
        }
    LongSubtractArgsTemplate: &LongSubtractArgsTemplate !!js/function >
        (lhs, arg) => {
            return ` - ${arg}`;
        }
    LongMultiplyTemplate: &LongMultiplyTemplate !!js/function >
        (lhs) => {
            return lhs;
        }
    LongMultiplyArgsTemplate: &LongMultiplyArgsTemplate !!js/function >
        (lhs, arg) => {
            return ` * ${arg}`;
        }
    LongDivTemplate: &LongDivTemplate !!js/function >
        (lhs) => {
            return lhs;
        }
    LongDivArgsTemplate: &LongDivArgsTemplate !!js/function >
        (lhs, arg) => {
            return ` / ${arg}`;
        }
    LongModuloTemplate: &LongModuloTemplate !!js/function >
        (lhs) => {
            return lhs;
        }
    LongModuloArgsTemplate: &LongModuloArgsTemplate !!js/function >
        (lhs, arg) => {
            return ` % ${arg}`;
        }
    LongAndTemplate: &LongAndTemplate !!js/function >
        (lhs) => {
            return lhs;
        }
    LongAndArgsTemplate: &LongAndArgsTemplate !!js/function >
        (lhs, arg) => {
            return ` & ${arg}`;
        }
    LongOrTemplate: &LongOrTemplate !!js/function >
        (lhs) => {
            return lhs;
        }
    LongOrArgsTemplate: &LongOrArgsTemplate !!js/function >
        (lhs, arg) => {
            return ` | ${arg}`;
        }
    LongXorTemplate: &LongXorTemplate !!js/function >
        (lhs) => {
            return lhs;
        }
    LongXorArgsTemplate: &LongXorArgsTemplate !!js/function >
        (lhs, arg) => {
            return ` ^ ${arg}`;
        }
    LongShiftLeftTemplate: &LongShiftLeftTemplate !!js/function >
        () => {
            return '';
        }
    LongShiftLeftArgsTemplate: &LongShiftLeftArgsTemplate !!js/function >
        (lhs, arg) => {
            return `${lhs} << ${arg}`;
        }
    LongShiftRightTemplate: &LongShiftRightTemplate !!js/function >
        () => {
            return '';
        }
    LongShiftRightArgsTemplate: &LongShiftRightArgsTemplate !!js/function >
        (lhs, arg) => {
            return `${lhs} >> ${arg}`;
        }
    LongCompareTemplate: &LongCompareTemplate !!js/function >
        (lhs) => {
            return `${lhs}.CompareTo`;
        }
    LongCompareArgsTemplate: &LongCompareArgsTemplate null
    LongIsOddTemplate: &LongIsOddTemplate !!js/function >
        (lhs) => {
            return lhs;
        }
    LongIsOddArgsTemplate: &LongIsOddArgsTemplate !!js/function >
        () => {
            return ' % 2 == 0';
        }
    LongIsZeroTemplate: &LongIsZeroTemplate !!js/function >
        (lhs) => {
            return `${lhs} == 0`;
        }
    LongIsZeroArgsTemplate: &LongIsZeroArgsTemplate !!js/function >
        () => {
            return '';
        }
    LongIsNegativeTemplate: &LongIsNegativeTemplate !!js/function >
        (lhs) => {
            return `${lhs} < 0`;
        }
    LongIsNegativeArgsTemplate: &LongIsNegativeArgsTemplate !!js/function >
        () => {
            return '';
        }
    LongNegateTemplate: &LongNegateTemplate !!js/function >
        () => {
            return '';
        }
    LongNegateArgsTemplate: &LongNegateArgsTemplate !!js/function >
        (lhs) => {
            return `-${lhs}`;
        }
    LongNotTemplate: &LongNotTemplate !!js/function >
        () => {
            return '';
        }
    LongNotArgsTemplate: &LongNotArgsTemplate !!js/function >
        (lhs) => {
            return `!${lhs}`;
        }
    LongNotEqualsTemplate: &LongNotEqualsTemplate !!js/function >
        (lhs) => {
            return `${lhs} !=`;
        }
    LongNotEqualsArgsTemplate: &LongNotEqualsArgsTemplate !!js/function >
        (lhs, arg) => {
            return ` ${arg}`;
        }
    LongGreaterThanTemplate: &LongGreaterThanTemplate !!js/function >
        (lhs) => {
            return `${lhs} >`;
        }
    LongGreaterThanArgsTemplate: &LongGreaterThanArgsTemplate !!js/function >
        (lhs, arg) => {
            return ` ${arg}`;
        }
    LongGreaterThanOrEqualTemplate: &LongGreaterThanOrEqualTemplate !!js/function >
        (lhs) => {
            return `${lhs} >=`;
        }
    LongGreaterThanOrEqualArgsTemplate: &LongGreaterThanOrEqualArgsTemplate !!js/function >
        (lhs, arg) => {
            return ` ${arg}`;
        }
    LongLessThanTemplate: &LongLessThanTemplate !!js/function >
        (lhs) => {
            return `${lhs} <`;
        }
    LongLessThanArgsTemplate: &LongLessThanArgsTemplate !!js/function >
        (lhs, arg) => {
            return ` ${arg}`;
        }
    LongLessThanOrEqualTemplate: &LongLessThanOrEqualTemplate !!js/function >
        (lhs) => {
            return `${lhs} <=`;
        }
    LongLessThanOrEqualArgsTemplate: &LongLessThanOrEqualArgsTemplate !!js/function >
        (lhs, arg) => {
            return ` ${arg}`;
        }
    LongFloatApproxTemplate: &LongFloatApproxTemplate null
    LongTopTemplate: &LongTopTemplate null
    LongBottomTemplate: &LongBottomTemplate null
    TimestampToStringTemplate: &TimestampToStringTemplate !!js/function >
        (lhs) => {
          return `${lhs}.ToString`;
        }
    TimestampToStringArgsTemplate: &TimestampToStringArgsTemplate null
    TimestampEqualsTemplate: &TimestampEqualsTemplate !!js/function >
        (lhs) => {
          return `${lhs}.Equals`;
        }
    TimestampEqualsArgsTemplate: &TimestampEqualsArgsTemplate null
    TimestampGetLowBitsTemplate: &TimestampGetLowBitsTemplate !!js/function >
        (lhs) => {
            return `${lhs}.ToUniversalTime`;
        }
    TimestampGetLowBitsArgsTemplate: &TimestampGetLowBitsArgsTemplate null
    TimestampGetHighBitsTemplate: &TimestampGetHighBitsTemplate !!js/function >
        (lhs) => {
            return '';
        }
    TimestampGetHighBitsArgsTemplate: &TimestampGetHighBitsArgsTemplate !!js/function >
        (lhs) => {
            return `${lhs}.Increment`;
        }
    TimestampTTemplate: &TimestampTTemplate null
    TimestampITemplate: &TimestampITemplate null
    TimestampCompareTemplate: &TimestampCompareTemplate !!js/function >
        (lhs) => {
            return `${lhs}.CompareTo`;
        }
    TimestampCompareArgsTemplate: &TimestampCompareArgsTemplate null
    TimestampNotEqualsTemplate: &TimestampNotEqualsTemplate !!js/function >
        (lhs) => {
            return `${lhs} != `;
        }
    TimestampNotEqualsArgsTemplate: &TimestampNotEqualsArgsTemplate !!js/function >
        (lhs, arg) => {
            return `${arg}`;
        }
    TimestampGreaterThanTemplate: &TimestampGreaterThanTemplate !!js/function >
        (lhs) => {
            return `${lhs} > `;
        }
    TimestampGreaterThanArgsTemplate: &TimestampGreaterThanArgsTemplate !!js/function >
        (lhs, arg) => {
            return `${arg}`;
        }
    TimestampGreaterThanOrEqualTemplate: &TimestampGreaterThanOrEqualTemplate !!js/function >
        (lhs) => {
            return `${lhs} >= `;
        }
    TimestampGreaterThanOrEqualArgsTemplate: &TimestampGreaterThanOrEqualArgsTemplate !!js/function >
        (lhs, arg) => {
            return `${arg}`;
        }
    TimestampLessThanTemplate: &TimestampLessThanTemplate !!js/function >
        (lhs) => {
            return `${lhs} < `;
        }
    TimestampLessThanArgsTemplate: &TimestampLessThanArgsTemplate !!js/function >
        (lhs, arg) => {
            return `${arg}`;
        }
    TimestampLessThanOrEqualTemplate: &TimestampLessThanOrEqualTemplate !!js/function >
        (lhs) => {
            return `${lhs} <= `;
        }
    TimestampLessThanOrEqualArgsTemplate: &TimestampLessThanOrEqualArgsTemplate !!js/function >
        (lhs, arg) => {
            return `${arg}`;
        }
    SymbolValueOfTemplate: &SymbolValueOfTemplate !!js/function >
        (lhs) => {
            return `${lhs}.AsBsonSymbol`;
        }
    SymbolValueOfArgsTemplate: &SymbolValueOfArgsTemplate !!js/function >
        () => {
            return '';
        }
    SymbolInspectTemplate: &SymbolInspectTemplate !!js/function >
        (lhs) => {
            return `${lhs}.Value`;
        }
    SymbolInspectArgsTemplate: &SymbolInspectArgsTemplate !!js/function >
        (lhs) => {
            return '';
        }
    SymbolToStringTemplate: &SymbolToStringTemplate !!js/function >
        (lhs) => {
            return `${lhs}.ToString`;
        }
    SymbolToStringArgsTemplate: &SymbolToStringArgsTemplate null
    # Symbol Templates
    CodeSymbolTemplate: &CodeSymbolTemplate  !!js/function >
        () => {
            return '';
        }
    CodeSymbolArgsTemplate: &CodeSymbolArgsTemplate !!js/function >
        (lhs, code, scope) => {
            // Double quote stringify
            let newStr = code === undefined ? '' : code;
            const str = newStr;
            if (
                (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
                (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
                newStr = str.substr(1, str.length - 2);
            }
            code = `"${newStr.replace(/\\([\s\S])|(")/g, '\\$1$2')}"`;
            return (scope === undefined) ? `BsonJavaScript(@${code})` : `BsonJavaScriptWithScope(@${code}, ${scope})`;
        }
    ObjectIdSymbolTemplate: &ObjectIdSymbolTemplate !!js/function >
        () => {
            return 'BsonObjectId';
        }
    ObjectIdSymbolArgsTemplate: &ObjectIdSymbolArgsTemplate !!js/function >
        (lhs, str) => {
            let newStr = str;
            if (
                (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
                (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
                newStr = str.substr(1, str.length - 2);
            }
            return `(new ObjectId("${newStr.replace(/\\([\s\S])|(")/g, '\\$1$2')}"))`;
        }
    BinarySymbolTemplate: &BinarySymbolTemplate !!js/function >
        () => {
            return 'BsonBinaryData';
        }
    BinarySymbolArgsTemplate: &BinarySymbolArgsTemplate !!js/function >
        (lhs, bytes, type) => {
            const str = bytes;
            let newStr = str;
            if (
              (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
              (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
                newStr = str.substr(1, str.length - 2);
            }
            bytes = `"${newStr.replace(/\\([\s\S])|(")/g, '\\$1$2')}"`;

            if (type === null) {
                return `(System.Text.Encoding.ASCII.GetBytes(${bytes}))`;
            }
            return `(System.Text.Encoding.ASCII.GetBytes(${bytes}), ${type})`;
        }
    BinarySymbolSubtypeDefaultTemplate: &BinarySymbolSubtypeDefaultTemplate !!js/function >
        () => {
            return 'BsonBinarySubType.Binary';
        }
    BinarySymbolSubtypeFunctionTemplate: &BinarySymbolSubtypeFunctionTemplate !!js/function >
        () => {
            return 'BsonBinarySubType.Function';
        }
    BinarySymbolSubtypeByteArrayTemplate: &BinarySymbolSubtypeByteArrayTemplate !!js/function >
        () => {
            return 'BsonBinarySubType.OldBinary';
        }
    BinarySymbolSubtypeUuidOldTemplate: &BinarySymbolSubtypeUuidOldTemplate !!js/function >
        () => {
            return 'BsonBinarySubType.UuidLegacy';
        }
    BinarySymbolSubtypeUuidTemplate: &BinarySymbolSubtypeUuidTemplate !!js/function >
        () => {
            return 'BsonBinarySubType.UuidStandard';
        }
    BinarySymbolSubtypeMd5Template: &BinarySymbolSubtypeMd5Template !!js/function >
        () => {
            return 'BsonBinarySubType.MD5';
        }
    BinarySymbolSubtypeUserDefinedTemplate: &BinarySymbolSubtypeUserDefinedTemplate !!js/function >
        () => {
            return 'BsonBinarySubType.UserDefined';
        }
    DBRefSymbolTemplate: &DBRefSymbolTemplate !!js/function >
        () => {
            return 'MongoDBRef';
        }
    DBRefSymbolArgsTemplate: &DBRefSymbolArgsTemplate null
    DoubleSymbolTemplate: &DoubleSymbolTemplate !!js/function >
        (literal) => {
            return 'BsonDouble';
        }
    DoubleSymbolArgsTemplate: &DoubleSymbolArgsTemplate !!js/function >
        (lhs, arg) => {
            arg = arg.replace(/['"]+/g, '');
            return `(${arg})`;
        }
    Int32SymbolTemplate: &Int32SymbolTemplate null # Has emit method
    Int32SymbolArgsTemplate: &Int32SymbolArgsTemplate null # Has emit method
    LongSymbolTemplate: &LongSymbolTemplate !!js/function >
        () => {
            return 'BsonInt64';
        }
    LongSymbolArgsTemplate: &LongSymbolArgsTemplate null
    LongSymbolMaxTemplate: &LongSymbolMaxTemplate !!js/function >
        () => {
            return 'Int64.MaxValue';
        }
    LongSymbolMaxArgsTemplate: &LongSymbolMaxArgsTemplate null
    LongSymbolMinTemplate: &LongSymbolMinTemplate !!js/function >
        () => {
            return 'Int64.MinValue';
        }
    LongSymbolMinArgsTemplate: &LongSymbolMinArgsTemplate null
    LongSymbolZeroTemplate: &LongSymbolZeroTemplate !!js/function >
        (lhs) => {
            return `new ${lhs}(0)`;
        }
    LongSymbolZeroArgsTemplate: &LongSymbolZeroArgsTemplate null
    LongSymbolOneTemplate: &LongSymbolOneTemplate !!js/function >
        (lhs) => {
            return `new ${lhs}(1)`;
        }
    LongSymbolOneArgsTemplate: &LongSymbolOneArgsTemplate null
    LongSymbolNegOneTemplate: &LongSymbolNegOneTemplate !!js/function >
        (lhs) => {
            return `new ${lhs}(-1)`;
        }
    LongSymbolNegOneArgsTemplate: &LongSymbolNegOneArgsTemplate null
    LongSymbolFromBitsTemplate: &LongSymbolFromBitsTemplate null
    LongSymbolFromBitsArgsTemplate: &LongSymbolFromBitsArgsTemplate null
    LongSymbolFromIntTemplate: &LongSymbolFromIntTemplate !!js/function >
        (lhs) => {
            return `new ${lhs}`;
        }
    LongSymbolFromIntArgsTemplate: &LongSymbolFromIntArgsTemplate null
    LongSymbolFromNumberTemplate: &LongSymbolFromNumberTemplate null
    LongSymbolFromNumberArgsTemplate: &LongSymbolFromNumberArgsTemplate null
    LongSymbolFromStringTemplate: &LongSymbolFromStringTemplate !!js/function >
        (lhs) => {
            return '';
        }
    LongSymbolFromStringArgsTemplate: &LongSymbolFromStringArgsTemplate !!js/function >
        (lhs, arg1, arg2) => {
            if (arg2) {
                return `Int64.TryParse(${arg1}, ${arg2})`;
            }
            return `new BsonInt64(${arg1})`;
        }
    MinKeySymbolTemplate: &MinKeySymbolTemplate null # Has emit method
    MinKeySymbolArgsTemplate: &MinKeySymbolArgsTemplate null # Has emit method
    MaxKeySymbolTemplate: &MaxKeySymbolTemplate null # Has emit method
    MaxKeySymbolArgsTemplate: &MaxKeySymbolArgsTemplate null # Has emit method
    TimestampSymbolTemplate: &TimestampSymbolTemplate !!js/function >
        () => {
            return 'BsonTimestamp';
        }
    TimestampSymbolArgsTemplate: &TimestampSymbolArgsTemplate null
    SymbolSymbolTemplate: &SymbolSymbolTemplate !!js/function >
        () => {
            return `BsonString`
        }
    SymbolSymbolArgsTemplate: &SymbolSymbolArgsTemplate null
    BSONRegExpSymbolTemplate: &BSONRegExpSymbolTemplate null # Has emit method
    BSONRegExpSymbolArgsTemplate: &BSONRegExpSymbolArgsTemplate null # Has emit method
    Decimal128SymbolTemplate: &Decimal128SymbolTemplate null # Has emit method
    Decimal128SymbolArgsTemplate: &Decimal128SymbolArgsTemplate !!js/function >
        () => {
            return '';
        }
    Decimal128SymbolFromStringTemplate: &Decimal128SymbolFromStringTemplate !!js/function >
        () => {
            return '';
        }
    Decimal128SymbolFromStringArgsTemplate: &Decimal128SymbolFromStringArgsTemplate !!js/function >
        (lhs, arg) => {
            return `new ${lhs}.TryParse(${arg})`;
        }
    Decimal128ToStringTemplate: &Decimal128ToStringTemplate !!js/function >
        (lhs, arg) => {
            return `${lhs}.ToString`;
        }
    Decimal128ToStringArgsTemplate: &Decimal128ToStringArgsTemplate null
    # BSON Util Templates
    ObjectIdCreateFromHexStringTemplate: &ObjectIdCreateFromHexStringTemplate !!js/function >
        (lhs) => {
            return '';
        }
    ObjectIdCreateFromHexStringArgsTemplate: &ObjectIdCreateFromHexStringArgsTemplate !!js/function >
        (lhs, arg) => {
            return `new ${lhs}.Parse(${arg})`;
        }
    ObjectIdCreateFromTimeTemplate: &ObjectIdCreateFromTimeTemplate !!js/function >
        (lhs) => {
            return '';
        }
    ObjectIdCreateFromTimeArgsTemplate: &ObjectIdCreateFromTimeArgsTemplate !!js/function >
        (lhs, arg) => {
            return `new ${lhs}.GenerateNewId(${arg})`;
        }
    ObjectIdIsValidTemplate: &ObjectIdIsValidTemplate !!js/function >
        () => {
            return '';
        }
    ObjectIdIsValidArgsTemplate: &ObjectIdIsValidArgsTemplate !!js/function >
        () => {
            return '';
        }
    # JS Symbol Templates
    ObjectSymbolTemplate: &ObjectSymbolTemplate null
    ObjectSymbolArgsTemplate: &ObjectSymbolArgsTemplate null
    ObjectSymbolCreateTemplate: &ObjectSymbolCreateTemplate !!js/function >
        () => {
            return '';
        }
    ObjectSymbolCreateArgsTemplate: &ObjectSymbolCreateArgsTemplate !!js/function >
        (lhs, arg) => {
            return arg;
        }
    NumberSymbolTemplate: &NumberSymbolTemplate !!js/function >
        () => {
          return 'int'
        }
    NumberSymbolArgsTemplate: &NumberSymbolArgsTemplate !!js/function >
        (lhs, arg) => {
          arg = arg.replace(/['"]+/g, '');
          return `(${arg})`
        }
    DateSymbolTemplate: &DateSymbolTemplate null # Has emit method
    DateSymbolArgsTemplate: &DateSymbolArgsTemplate null # Has emit method
    DateSymbolNowTemplate: &DateSymbolNowTemplate null # Has emit method
    DateSymbolNowArgsTemplate: &DateSymbolNowArgsTemplate null # Has emit method
    RegExpSymbolTemplate: &RegExpSymbolTemplate null
    RegExpSymbolArgsTemplate: &RegExpSymbolArgsTemplate null
