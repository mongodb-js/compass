#############################################
#             Sample Templates              #
#                                           #
# The expected arguments are commented next #
# to the template itself. Currently all are #
# set to null, but to define a function     #
# replace 'null' with '!!js/function > \n   #
# and a function defined below.             #
#                                           #
# See the other template files for examples #
#                                           #
#               Good to know:               #
# lhs is left-hand-side of the expression   #
# rhs is right-hand-side of the expression  #
# All args are strings unless noted         #
#    - arg? is boolean                      #
#    - arg# is number                       #
#                                           #
#############################################
Templates:
  ########
  # Misc #
  ########

  # Filter out regex flags that have translations or are unsupported.
  RegexFlags: &RegexFlags
    i: 'i'
    m: 'm'
    u: ''
    y: ''
    g: ''
  BSONRegexFlags: &BSONRegexFlags
    i: 'i'
    m: 'm'
    x: 'x'
    s: 's'
    l: ''
    u: ''

  #############################################
  #                  Syntax                   #
  #                                           #
  # Templates for language syntax expressions #
  #                                           #
  #############################################

  DriverTemplate: !!js/function &DriverTemplate >
    (spec) => {
        const getKey = k => {
            let translateKey = {
                project: 'projection',
            }
            return k in translateKey ? translateKey[k] : k
        };
        const options = spec.options;
        const filter = spec.filter || {};
        const exportMode = spec.exportMode;
        delete spec.options;
        delete spec.filter;
        delete spec.exportMode;

        comment = []
            .concat('// Requires the MongoDB PHP Driver')
            .concat('// https://www.mongodb.com/docs/drivers/php/')
            .join('\n')
        ;
        const client = `$client = new Client('${options.uri}');`;
        const collection = `$collection = $client->selectCollection('${options.database}', '${options.collection}');`;

        if ('aggregation' in spec) {
            // Note: toPHPArray() may not be required here as Compass should always provide an array for spec.aggregation
            return []
                .concat(comment)
                .concat('')
                .concat(client)
                .concat(collection)
                .concat(`$cursor = $collection->aggregate(${this.utils.toPHPArray(spec.aggregation)});`)
                .join('\n')
            ;
        }

        let driverMethod;
        switch (exportMode) {
            case 'Delete Query':
                driverMethod = 'delete_many';
                break;
            case 'Update Query':
                driverMethod = 'update_many';
                break;
            default:
                driverMethod = 'find';
        }

        let args = Object.keys(spec).reduce(
            (result, k) => {
                let val = this.utils.removePHPObject(spec[k]);
                const divider = result === '' ? '' : ',\n';
                return `${result}${divider}    '${getKey(k)}' => ${val}`;
            },
            ''
        );
        args = args ? `, [\n${args}\n]` : '';

        return []
            .concat(comment)
            .concat('')
            .concat(client)
            .concat(collection)
            .concat(`$cursor = $collection->${driverMethod}(${this.utils.removePHPObject(filter)}${args});`)
            .join('\n')
        ;
    }
  EqualitySyntaxTemplate: !!js/function &EqualitySyntaxTemplate >
    (lhs, op, rhs) => {
        // Identity comparison
        if (op.includes('is')) {
            if (op.includes('not')) {
                return `${lhs} !== ${rhs}`;
            } else {
                return `${lhs} === ${rhs}`;
            }
        }
        // Not equal
        if (op.includes('!') || op.includes('not')) {
            return `${lhs} != ${rhs}`;
        }
        // Equal
        if (op === '==' || op === '===') {
            return `${lhs} == ${rhs}`;
        }
        // All other cases
        return `${lhs} ${op} ${rhs}`;
    }
  InSyntaxTemplate: !!js/function &InSyntaxTemplate >
    (lhs, op, rhs) => {
        // array
        if (rhs.charAt(0) === '[' && rhs.charAt(rhs.length - 1) === ']') {
            let not = '';
            if (op.includes('!') || op.includes('not')) {
                not = '! ';
            }
            return `${not}\\in_array(${lhs}, ${rhs})`;
        }
        
        //object
        if (rhs.indexOf('(object) ') === 0) {
            let not = '';
            if (op.includes('!') || op.includes('not')) {
                not = '! ';
            }
            return `${not}\\property_exists(${rhs}, ${lhs})`;
        }
        
        // string - all other cases
        let targop = '!==';
        if (op.includes('!') || op.includes('not')) {
            targop = '===';
        }
        return `\\strpos(${rhs}, ${lhs}) ${targop} false`;
    }
  AndSyntaxTemplate: !!js/function &AndSyntaxTemplate >
    (args) => {
        return args.join(' && ');
    }
  OrSyntaxTemplate: !!js/function &OrSyntaxTemplate >
    (args) => {
        return args.join(' || ');
    }
  NotSyntaxTemplate: !!js/function &NotSyntaxTemplate >
    (arg) => {
        return `! ${arg}`;
    }
  UnarySyntaxTemplate: !!js/function &UnarySyntaxTemplate >
    (op, arg) => {
        switch(op) {
            case '+':
                return `+${arg}`;
            case '-':
                return `-${arg}`;
            case '~':
                return `~${arg}`;
            default:
                throw new Error(`unrecognized operation: ${op}`);
        }
    }
  BinarySyntaxTemplate: !!js/function &BinarySyntaxTemplate >
    (args) => {
        return args.reduce((s, op, i, arr) => {
            if (i % 2 === 0) {
                return s;
            }
            const rhs = arr[i + 1];
            switch(op) {
                case '+':
                    return `${s} + ${rhs}`;
                case '-':
                    return `${s} - ${rhs}`;
                case '*':
                    return `${s} * ${rhs}`;
                case '/':
                    return `${s} / ${rhs}`;
                case '**':
                    return `${s} ** ${rhs}`;
                case '//':
                    return `\\intdiv(${s}, ${rhs})`;
                case '%':
                    return `${s} % ${rhs}`;
                case '>>':
                    return `${s} >> ${rhs}`;
                case '<<':
                    return `${s} << ${rhs}`;
                case '|':
                    return `${s} | ${rhs}`;
                case '&':
                    return `${s} & ${rhs}`;
                case '^':
                    return `${s} ^ ${rhs}`;
                default:
                    throw new Error(`unrecognized operation: ${op}`);
            }
        }, args[0]);
    }
  ParensSyntaxTemplate: &ParensSyntaxTemplate null
  EosTemplate: &EosSyntaxTemplate null # No args. End-of-line
  EofTemplate: &EofSyntaxTemplate null # No args. End-of-file
  FloorDivTemplate: &FloorDivSyntaxTemplate null # Args: lhs, rhs
  PowerTemplate: &PowerSyntaxTemplate null # Args: lhs, rhs
  NewTemplate: &NewSyntaxTemplate null # Args: expression, skip?, code# [to check if meant to be skipped]

  #############################################
  #               Literal Types               #
  #                                           #
  # Templates for literal type instance. Most #
  # get passed the literal itself as an arg.  #
  #                                           #
  #############################################
  StringTypeTemplate: !!js/function &StringTypeTemplate >
    (str) => {
        // This is some standalone object context, which is generated to parse 
        // node and doesn't have access to main Generator object. Thus we can't
        // use utility function call. All ~Template calls use this type of 
        // context. All ~ArgsTemplate have access to utility functions.

        stringifyWithSingleQuotes = (str) => {
            if (
                (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
                (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')
            ) {
                str = str.substr(1, str.length - 2);
            }
            return `'${str.replace(/\\([\s\S])|(')/g, '\\$1$2')}'`;
        };

        return `${stringifyWithSingleQuotes(str)}`;
    }
  RegexTypeTemplate: !!js/function &RegexTypeTemplate >
    (pattern, flags) => {
        // This is some standalone object context, which is generated to parse 
        // node and doesn't have access to main Generator object. Thus we can't
        // use utility function call. All ~Template calls use this type of 
        // context. All ~ArgsTemplate have access to utility functions.

        stringifyWithDoubleQuotes = (str) => {
            if (
                (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
                (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')
            ) {
                str = str.substr(1, str.length - 2);
            }
            return `${str.replace(/\\([\s\S])|(")/g, '\\$1$2')}`;
        };

        pattern = `"${stringifyWithDoubleQuotes(pattern)}"`;
        flags = flags ? `, "${flags}"` : '';

        return `new Regex(${pattern}${flags})`;
    }
  BoolTypeTemplate: !!js/function &BoolTypeTemplate >
    (literal) => {
        return literal.toLowerCase();
    }
  IntegerTypeTemplate: &IntegerTypeTemplate null # args: literal, argType (i.e. '_string', '_decimal' etc)
  DecimalTypeTemplate: &DecimalTypeTemplate null # args: literal, argType
  LongBasicTypeTemplate: &LongBasicTypeTemplate null # args: literal, argType
  HexTypeTemplate: &HexTypeTemplate null # args: literal, argType
  OctalTypeTemplate: !!js/function &OctalTypeTemplate >
    (literal) => {
        let offset = 0;

        if (
            literal.charAt(0) === '0' &&
            (literal.charAt(1) === '0' || literal.charAt(1) === 'o' || literal.charAt(1) === 'O')
        ) {
            offset = 2;
        } else if (literal.charAt(0) === '0') {
            offset = 1;
        }

        literal = `0${literal.substr(offset, literal.length - 1)}`;

        return literal;
    }
  NumericTypeTemplate: &NumericTypeTemplate null # args: literal, argType
  ArrayTypeTemplate: !!js/function &ArrayTypeTemplate >
    (literal, depth) => {
        if (literal === '') {
            return '[]'
        }
        return `[${literal}]`;
    }
  ArrayTypeArgsTemplate: &ArrayTypeArgsTemplate null # Args: single array element, nestedness, lastElement? (note: not being used atm)
  NullTypeTemplate: !!js/function &NullTypeTemplate >
    () => {
        return 'null';
    }
  UndefinedTypeTemplate: !!js/function &UndefinedTypeTemplate >
    () => {
        return 'null';
    }
  ObjectTypeTemplate: !!js/function &ObjectTypeTemplate >
    (literal) => {
        return `${literal}`;
    }
  ObjectTypeArgsTemplate: !!js/function &ObjectTypeArgsTemplate >
    (args, depth) => {
        let isObjectCastRequired = true;

        if (args.length === 0) {
            return `(object) []`;
        }

        const isExpectedIndex = (actualIndex, expectedIndex) => {
            return '' + actualIndex === '' + expectedIndex;
        }

        let indexTest = 0;
        let pairs = args.map((arg) => {
            if (isObjectCastRequired && !isExpectedIndex(arg[0], indexTest)) {
                isObjectCastRequired = false;
            }
            indexTest++;
            return `${this.utils.stringifyWithSingleQuotes(arg[0])} => ${arg[1]}`;
        }).join(', ');

        // Rebuilding pairs for numeric sequential indexes without quotes
        if (isObjectCastRequired) {
            pairs = args.map((arg) => {
                return `${arg[0]} => ${arg[1]}`;
            }).join(', ');
        }

        return `${isObjectCastRequired ? '(object) ' : ''}[${pairs}]`;
    }

  #############################################
  #               Symbols                     #
  #                                           #
  # Templates for symbols, can be either      #
  # functions or variables.                   #
  #                                           #
  # The *SymbolTemplates return names and     #
  # usually don't take any arguments. The     #
  # *SymbolArgsTemplates are invoked for func #
  # calls. The first argument is always the   #
  # lhs, i.e. the symbol returned from the    #
  # corresponding SymbolTemplate. The rest of #
  # the arguments are the processed arguments #
  # passed to the original function.          #
  #                                           #
  #############################################
  CodeSymbolTemplate: !!js/function &CodeSymbolTemplate >
    () => {
        return 'new Javascript';
    }
  CodeSymbolArgsTemplate: !!js/function &CodeSymbolArgsTemplate >
    (lhs, code, scope) => {
        return !scope 
            ? `(${this.utils.stringifyWithSingleQuotes(code)})` 
            : `(${this.utils.stringifyWithSingleQuotes(code)}, ${scope})`
        ;
    }
  ObjectIdSymbolTemplate: !!js/function &ObjectIdSymbolTemplate >
    () => {
        return 'new ObjectId';
    }
  ObjectIdSymbolArgsTemplate: !!js/function &ObjectIdSymbolArgsTemplate >
    (lhs, id) => {
        return !id 
            ? `()` 
            : `(${this.utils.stringifyWithSingleQuotes(id)})`
        ;
    }
  BinarySymbolTemplate: !!js/function &BinarySymbolTemplate >
    () => {
        return 'new Binary';
    }
  BinarySymbolArgsTemplate: !!js/function &BinarySymbolArgsTemplate >
    (lhs, bytes, type) => {
        if (type === null) {
            type = 'Binary::TYPE_GENERIC';
        }
        return `(${this.utils.stringifyWithSingleQuotes(bytes)}, ${type})`;
    }
  BinarySymbolSubtypeDefaultTemplate:
    !!js/function &BinarySymbolSubtypeDefaultTemplate >
    () => {
        return 'Binary::TYPE_GENERIC';
    }
  BinarySymbolSubtypeFunctionTemplate:
    !!js/function &BinarySymbolSubtypeFunctionTemplate >
    () => {
        return 'Binary::TYPE_FUNCTION';
    }
  BinarySymbolSubtypeByteArrayTemplate:
    !!js/function &BinarySymbolSubtypeByteArrayTemplate >
    () => {
        return 'Binary::TYPE_OLD_BINARY';
    }
  BinarySymbolSubtypeUuidOldTemplate:
    !!js/function &BinarySymbolSubtypeUuidOldTemplate >
    () => {
        return 'Binary::TYPE_OLD_UUID';
    }
  BinarySymbolSubtypeUuidTemplate:
    !!js/function &BinarySymbolSubtypeUuidTemplate >
    () => {
        return 'Binary::TYPE_UUID';
    }
  BinarySymbolSubtypeMd5Template:
    !!js/function &BinarySymbolSubtypeMd5Template >
    () => {
        return 'Binary::TYPE_MD5';
    }
  BinarySymbolSubtypeUserDefinedTemplate:
    !!js/function &BinarySymbolSubtypeUserDefinedTemplate >
    () => {
        return 'Binary::TYPE_USER_DEFINED';
    }
  DBRefSymbolTemplate: !!js/function &DBRefSymbolTemplate >
    () => {
        return ''
    }
  DBRefSymbolArgsTemplate: !!js/function &DBRefSymbolArgsTemplate >
    (lhs, coll, id, db) => {
        let coll_string = `'$ref' => ${this.utils.stringifyWithSingleQuotes(coll)}`;
        let id_string = `, '$id' => ${id}`;
        let db_string = db ? `, '$db' => ${this.utils.stringifyWithSingleQuotes(db)}` : `, '$db' => null`;
        return `[${coll_string}${id_string}${db_string}]`;
    }
  DoubleSymbolTemplate: !!js/function &DoubleSymbolTemplate >
    () => {
        return '';
    }
  DoubleSymbolArgsTemplate: !!js/function &DoubleSymbolArgsTemplate >
    (lhs, arg, type) => {
        arg = arg === undefined ? 0 : arg;
        if (type === '_decimal' || type === '_double') {
            return arg;
        }
        if (type === '_integer' || type === '_long') {
            return `${arg}.0`;
        }
        return `(float) ${arg}`;
    }
  Int32SymbolTemplate: !!js/function &Int32SymbolTemplate >
    () => {
        return '';
    }
  Int32SymbolArgsTemplate: !!js/function &Int32SymbolArgsTemplate >
    (lhs, arg, type) => {
        arg = arg === undefined ? 0 : arg;
        if (type === '_integer' || type === '_long' || type === '_hex' || type === '_octal') {
            return arg;
        }
        return `(int) ${arg}`;
    }
  LongSymbolTemplate: !!js/function &LongSymbolTemplate >
    () => {
        return ''
    }
  LongSymbolArgsTemplate: !!js/function &LongSymbolArgsTemplate >
    (lhs, arg, type) => {
        arg = arg === undefined ? 0 : arg;
        if (type === '_integer' || type === '_long' || type === '_hex' || type === '_octal') {
            return arg;
        }
        return `(int) ${arg}`;
    }
  RegExpSymbolTemplate: !!js/function &RegExpSymbolTemplate >
    () => {
        return 'new Regex';
    }
  RegExpSymbolArgsTemplate: &RegExpSymbolArgsTemplate null # Args: lhs, pattern, flags
  SymbolSymbolTemplate: !!js/function &SymbolSymbolTemplate >
    () => {
        return '';
    }
  SymbolSymbolArgsTemplate: !!js/function &SymbolSymbolArgsTemplate >
    (lhs, arg) => {
        return arg;
    }
  BSONRegExpSymbolTemplate: !!js/function &BSONRegExpSymbolTemplate >
    () => {
        return 'new Regex';
    }
  BSONRegExpSymbolArgsTemplate: !!js/function &BSONRegExpSymbolArgsTemplate >
    (lhs, pattern, flags) => {
        return `(${this.utils.stringifyWithDoubleQuotes(pattern)}${flags ? ', ' + this.utils.stringifyWithDoubleQuotes(flags) : ''})`;
    }
  Decimal128SymbolTemplate: !!js/function &Decimal128SymbolTemplate >
    () => {
        return 'new Decimal128';
    }
  Decimal128SymbolArgsTemplate: !!js/function &Decimal128SymbolArgsTemplate >
    (lhs, arg) => {
        arg = arg === undefined ? '0' : arg.toString();
        return `('${this.utils.removeStringQuotes(arg)}')`;
    }
  MinKeySymbolTemplate: !!js/function &MinKeySymbolTemplate >
    () => {
        return 'new MinKey';
    }
  MinKeySymbolArgsTemplate: !!js/function &MinKeySymbolArgsTemplate >
    () => {
        return `()`;
    }
  MaxKeySymbolTemplate: !!js/function &MaxKeySymbolTemplate >
    () => {
        return 'new MaxKey';
    }
  MaxKeySymbolArgsTemplate: !!js/function &MaxKeySymbolArgsTemplate >
    () => {
        return `()`;
    }
  TimestampSymbolTemplate: !!js/function &TimestampSymbolTemplate >
    () => {
        return 'new Timestamp';
    }
  TimestampSymbolArgsTemplate: !!js/function &TimestampSymbolArgsTemplate >
    (lhs, arg1, arg2) => {
        // PHP orders increment and timestamp args differently (see: PHPC-845)
        return `(${arg2 === undefined ? 0 : arg2}, ${arg1 === undefined ? 0 : arg1})`;
    }
  # non bson-specific
  NumberSymbolTemplate: !!js/function &NumberSymbolTemplate >
    () => ''
  NumberSymbolArgsTemplate: !!js/function &NumberSymbolArgsTemplate >
    (lhs, arg, type) => {
        arg = arg === undefined ? 0 : arg;

        switch(type) {
            case '_string':
                if ((arg.indexOf('.') !== -1) && (arg.indexOf('.') !== arg.length - 2)) {
                    return `(float) ${arg}`
                }
                return `(int) ${arg}`
            default:
                return `${arg}`
        }
    }
  DateSymbolTemplate: !!js/function &DateSymbolTemplate >
    () => {
        return 'UTCDateTime';
    }
  DateSymbolArgsTemplate: !!js/function &DateSymbolArgsTemplate >
    (lhs, date, isString) => {
        if (date === null) {
            return `new ${lhs}()`;
        }
        return isString 
            ? `(new ${lhs}(${date.getTime()}))->toDateTime()->format(\\DateTimeInterface::RFC3339_EXTENDED)`
            : `new ${lhs}(${date.getTime()})`
        ;
    }
  DateSymbolNowTemplate: !!js/function &DateSymbolNowTemplate >
    () => {
        return `new UTCDateTime()`;
    }
  DateSymbolNowArgsTemplate: !!js/function &DateSymbolNowArgsTemplate >
    (args) => {
        return '';
    }

  #############################################
  #         Object Attributes/Methods         #
  #                                           #
  # These're variables or functions called on #
  # instantiated objects. For example,        #
  # ObjectId().isValid() or Timestamp().t     #
  #                                           #
  # They follow the same pattern with the
  # *Template/*ArgsTemplates: usually no args #
  # to the Template and lhs plus any original #
  # arguments to the ArgsTemplate.            #
  #                                           #
  #############################################
  CodeCodeTemplate: !!js/function &CodeCodeTemplate >
    (lhs) => {
        return `(${lhs})->getCode()`;
    }
  CodeCodeArgsTemplate: !!js/function &CodeCodeArgsTemplate >
    () => {
        return '';
    }
  CodeScopeTemplate: !!js/function &CodeScopeTemplate >
    (lhs) => {
        return `(${lhs})->getScope()`;
    }
  CodeScopeArgsTemplate: !!js/function &CodeScopeArgsTemplate >
    () => {
        return '';
    }
  ObjectIdToStringTemplate: !!js/function &ObjectIdToStringTemplate >
    (lhs) => {
        return `(string) ${lhs}`;
    }
  ObjectIdToStringArgsTemplate: !!js/function &ObjectIdToStringArgsTemplate >
    () => {
        return '';
    }
  ObjectIdEqualsTemplate: !!js/function &ObjectIdEqualsTemplate >
    (lhs) => {
        return `${lhs} == `;
    }
  ObjectIdEqualsArgsTemplate: !!js/function &ObjectIdEqualsArgsTemplate >
    (arg) => {
        return `${arg}`;
    }
  ObjectIdGetTimestampTemplate: !!js/function &ObjectIdGetTimestampTemplate >
    (lhs) => {
        return `(${lhs})->getTimestamp()`;
    }
  ObjectIdGetTimestampArgsTemplate:
    !!js/function &ObjectIdGetTimestampArgsTemplate >
    () => {
        return '';
    }
  ObjectIdIsValidTemplate: !!js/function &ObjectIdIsValidTemplate >
    (lhs) => {
        return ``;
    }
  ObjectIdIsValidArgsTemplate: !!js/function &ObjectIdIsValidArgsTemplate >
    (lhs, arg) => {
        return `(\\ctype_xdigit(${this.utils.stringifyWithSingleQuotes(arg)}) && \\strlen(${this.utils.stringifyWithSingleQuotes(arg)}) == 24)`;
    }
  BinaryValueTemplate: !!js/function &BinaryValueTemplate >
    (lhs) => {
        return `(${lhs})->getData()`;
    }
  BinaryValueArgsTemplate: !!js/function &BinaryValueArgsTemplate >
    () => {
        return '';
    }
  BinaryLengthTemplate: !!js/function &BinaryLengthTemplate >
    (lhs) => {
        return `\\strlen((${lhs})->getData())`;
    }
  BinaryLengthArgsTemplate: !!js/function &BinaryLengthArgsTemplate >
    () => {
        return '';
    }
  BinaryToStringTemplate: !!js/function &BinaryToStringTemplate >
    (lhs) => {
        return `(${lhs})->getData()`;
    }
  BinaryToStringArgsTemplate: !!js/function &BinaryToStringArgsTemplate >
    () => {
        return '';
    }
  BinarySubtypeTemplate: !!js/function &BinarySubtypeTemplate >
    (lhs) => {
        return `(${lhs})->getType()`;
    }
  BinarySubtypeArgsTemplate: !!js/function &BinarySubtypeArgsTemplate >
    () => {
        return '';
    }
  DBRefGetDBTemplate: !!js/function &DBRefGetDBTemplate >
    (lhs) => {
        return `${lhs}['$db']`;
    }
  DBRefGetCollectionTemplate: !!js/function &DBRefGetCollectionTemplate >
    (lhs) => {
        return `${lhs}['$ref']`;
    }
  DBRefGetIdTemplate: !!js/function &DBRefGetIdTemplate >
    (lhs) => {
        return `${lhs}['$id']`;
    }
  DBRefGetDBArgsTemplate: !!js/function &DBRefGetDBArgsTemplate >
    (lhs) => {
        return '';
    }
  DBRefGetCollectionArgsTemplate:
    !!js/function &DBRefGetCollectionArgsTemplate >
    (lhs) => {
        return '';
    }
  DBRefGetIdArgsTemplate: !!js/function &DBRefGetIdArgsTemplate >
    (lhs) => {
        return '';
    }
  DBRefToStringTemplate: &DBRefToStringTemplate null
  DBRefToStringArgsTemplate: &DBRefToStringArgsTemplate null
  DoubleValueOfTemplate: &DoubleValueOfTemplate null
  DoubleValueOfArgsTemplate: &DoubleValueOfArgsTemplate null
  Int32ValueOfTemplate: &Int32ValueOfTemplate null
  Int32ValueOfArgsTemplate: &Int32ValueOfArgsTemplate null
  Int32ToStringTemplate: !!js/function &Int32ToStringTemplate >
    (lhs) => {
        return `(string) ${lhs}`;
    }
  Int32ToStringArgsTemplate: !!js/function &Int32ToStringArgsTemplate >
    () => {
        return '';
    }
  LongEqualsTemplate: !!js/function &LongEqualsTemplate >
    (lhs) => {
        return `${lhs} ==`;
    }
  LongEqualsArgsTemplate: !!js/function &LongEqualsArgsTemplate >
    (lhs, arg) => {
        return ` ${arg}`;
    }
  LongToStringTemplate: !!js/function &LongToStringTemplate >
    (lhs) => {
        return `(string) ${lhs}`;
    }
  LongToStringArgsTemplate: !!js/function &LongToStringArgsTemplate >
    () => {
        return '';
    }
  LongToIntTemplate: !!js/function &LongToIntTemplate >
    (lhs) => {
        return `${lhs}`;
    }
  LongToIntArgsTemplate: !!js/function &LongToIntArgsTemplate >
    () => {
        return '';
    }
  LongValueOfTemplate: &LongValueOfTemplate null
  LongValueOfArgsTemplate: &LongValueOfArgsTemplate null
  LongToNumberTemplate: !!js/function &LongToNumberTemplate >
    (lhs) => {
        return `(float) ${lhs}`;
    }
  LongToNumberArgsTemplate: !!js/function &LongToNumberArgsTemplate >
    () => {
        return '';
    }
  LongAddTemplate: !!js/function &LongAddTemplate >
    (lhs) => {
        return `${lhs} +`;
    }
  LongAddArgsTemplate: !!js/function &LongAddArgsTemplate >
    (lhs, arg) => {
        return ` ${arg}`;
    }
  LongSubtractTemplate: !!js/function &LongSubtractTemplate >
    (arg) => {
        return `${arg} -`;
    }
  LongSubtractArgsTemplate: !!js/function &LongSubtractArgsTemplate >
    (lhs, arg) => {
        return ` ${arg}`;
    }
  LongMultiplyTemplate: !!js/function &LongMultiplyTemplate >
    (arg) => {
        return `${arg} *`;
    }
  LongMultiplyArgsTemplate: !!js/function &LongMultiplyArgsTemplate >
    (lhs, arg) => {
        return ` ${arg}`;
    }
  LongDivTemplate: !!js/function &LongDivTemplate >
    (lhs) => {
        return `${lhs} /`;
    }
  LongDivArgsTemplate: !!js/function &LongDivArgsTemplate >
    (lhs, arg) => {
        return ` ${arg}`;
    }
  LongModuloTemplate: !!js/function &LongModuloTemplate >
    (lhs) => {
        return `${lhs} %`;
    }
  LongModuloArgsTemplate: !!js/function &LongModuloArgsTemplate >
    (lhs, arg) => {
        return ` ${arg}`;
    }
  LongAndTemplate: !!js/function &LongAndTemplate >
    (lhs) => {
        return `${lhs} &`;
    }
  LongAndArgsTemplate: !!js/function &LongAndArgsTemplate >
    (lhs, arg) => {
        return ` ${arg}`;
    }
  LongOrTemplate: !!js/function &LongOrTemplate >
    (lhs) => {
        return `${lhs} |`;
    }
  LongOrArgsTemplate: !!js/function &LongOrArgsTemplate >
    (lhs, arg) => {
        return ` ${arg}`;
    }
  LongXorTemplate: !!js/function &LongXorTemplate >
    (lhs) => {
        return `${lhs} ^`;
    }
  LongXorArgsTemplate: !!js/function &LongXorArgsTemplate >
    (lhs, arg) => {
        return ` ${arg}`;
    }
  LongShiftLeftTemplate: !!js/function &LongShiftLeftTemplate >
    (lhs) => {
        return `${lhs} <<`;
    }
  LongShiftLeftArgsTemplate: !!js/function &LongShiftLeftArgsTemplate >
    (lhs, arg) => {
        return ` ${arg}`;
    }
  LongShiftRightTemplate: !!js/function &LongShiftRightTemplate >
    (lhs) => {
        return `${lhs} >>`;
    }
  LongShiftRightArgsTemplate: !!js/function &LongShiftRightArgsTemplate >
    (lhs, arg) => {
        return ` ${arg}`;
    }
  LongCompareTemplate: !!js/function &LongCompareTemplate >
    (lhs) => {
        return `${lhs} <=>`;
    }
  LongCompareArgsTemplate: !!js/function &LongCompareArgsTemplate >
    (lhs, arg) => {
        return ` ${arg}`;
    }
  LongIsOddTemplate: !!js/function &LongIsOddTemplate >
    (lhs) => {
        return `(${lhs} % 2) === 1`;
    }
  LongIsOddArgsTemplate: !!js/function &LongIsOddArgsTemplate >
    () => {
        return '';
    }
  LongIsZeroTemplate: !!js/function &LongIsZeroTemplate >
    (lhs) => {
        return `${lhs} === 0`;
    }
  LongIsZeroArgsTemplate: !!js/function &LongIsZeroArgsTemplate >
    () => {
        return '';
    }
  LongIsNegativeTemplate: !!js/function &LongIsNegativeTemplate >
    (lhs) => {
        return `${lhs} < 0`;
    }
  LongIsNegativeArgsTemplate: !!js/function &LongIsNegativeArgsTemplate >
    () => {
        return '';
    }
  LongNegateTemplate: !!js/function &LongNegateTemplate >
    () => {
        return '-';
    }
  LongNegateArgsTemplate: !!js/function &LongNegateArgsTemplate >
    (lhs) => {
        return lhs;
    }
  LongNotTemplate: !!js/function &LongNotTemplate >
    () => {
        return '~';
    }
  LongNotArgsTemplate: !!js/function &LongNotArgsTemplate >
    (lhs) => {
        return lhs;
    }
  LongNotEqualsTemplate: !!js/function &LongNotEqualsTemplate >
    (lhs) => {
        return `${lhs} !=`;
    }
  LongNotEqualsArgsTemplate: !!js/function &LongNotEqualsArgsTemplate >
    (lhs, arg) => {
        return ` ${arg}`;
    }
  LongGreaterThanTemplate: !!js/function &LongGreaterThanTemplate >
    (lhs) => {
        return `${lhs} >`;
    }
  LongGreaterThanArgsTemplate: !!js/function &LongGreaterThanArgsTemplate >
    (lhs, arg) => {
        return ` ${arg}`;
    }
  LongGreaterThanOrEqualTemplate:
    !!js/function &LongGreaterThanOrEqualTemplate >
    (lhs) => {
        return `${lhs} >=`;
    }
  LongGreaterThanOrEqualArgsTemplate:
    !!js/function &LongGreaterThanOrEqualArgsTemplate >
    (lhs, arg) => {
        return ` ${arg}`;
    }
  LongLessThanTemplate: !!js/function &LongLessThanTemplate >
    (lhs) => {
        return `${lhs} <`;
    }
  LongLessThanArgsTemplate: !!js/function &LongLessThanArgsTemplate >
    (lhs, arg) => {
        return ` ${arg}`;
    }
  LongLessThanOrEqualTemplate: !!js/function &LongLessThanOrEqualTemplate >
    (lhs) => {
        return `${lhs} <=`;
    }
  LongLessThanOrEqualArgsTemplate:
    !!js/function &LongLessThanOrEqualArgsTemplate >
    (lhs, arg) => {
        return ` ${arg}`;
    }
  LongFloatApproxTemplate: !!js/function &LongFloatApproxTemplate >
    (lhs) => {
        return `(float) ${lhs}`;
    }
  LongTopTemplate: !!js/function &LongTopTemplate >
    (lhs) => {
        return `${lhs} >> 32`;
    }
  LongBottomTemplate: !!js/function &LongBottomTemplate >
    (lhs) => {
        return `${lhs} & 0x00000000ffffffff`;
    }
  TimestampToStringTemplate: !!js/function &TimestampToStringTemplate >
    (lhs) => {
        return `(string) ${lhs}`;
    }
  TimestampToStringArgsTemplate: !!js/function &TimestampToStringArgsTemplate >
    () => {
        return '';
    }
  TimestampEqualsTemplate: !!js/function &TimestampEqualsTemplate >
    (lhs) => {
        return `${lhs} == `;
    }
  TimestampEqualsArgsTemplate: !!js/function &TimestampEqualsArgsTemplate >
    (lhs, arg) => {
        return `${arg}`;
    }
  TimestampGetLowBitsTemplate: !!js/function &TimestampGetLowBitsTemplate >
    (lhs) => {
        return `(${lhs})->getTimestamp()`;
    }
  TimestampGetLowBitsArgsTemplate:
    !!js/function &TimestampGetLowBitsArgsTemplate >
    () => {
        return ''
    }
  TimestampGetHighBitsTemplate: !!js/function &TimestampGetHighBitsTemplate >
    (lhs) => {
        return `(${lhs})->getIncrement()`;
    }
  TimestampGetHighBitsArgsTemplate:
    !!js/function &TimestampGetHighBitsArgsTemplate >
    () => {
        return ''
    }
  TimestampTTemplate: !!js/function &TimestampTTemplate >
    (lhs) => {
        return `(${lhs})->getTimestamp()`;
    }
  TimestampITemplate: !!js/function &TimestampITemplate >
    (lhs) => {
        return `(${lhs})->getIncrement()`;
    }
  TimestampAsDateTemplate: !!js/function &TimestampAsDateTemplate >
    (lhs) => {
        return `new UTCDateTime((${lhs})->getTimestamp() * 1000)`;
    }
  TimestampAsDateArgsTemplate: &TimestampAsDateArgsTemplate null
  TimestampCompareTemplate: !!js/function &TimestampCompareTemplate >
    (lhs) => {
        return `${lhs} <=> `;
    }
  TimestampCompareArgsTemplate: !!js/function &TimestampCompareArgsTemplate >
    (lhs, arg) => {
        return `${arg}`;
    }
  TimestampNotEqualsTemplate: !!js/function &TimestampNotEqualsTemplate >
    (lhs) => {
        return `${lhs} != `;
    }
  TimestampNotEqualsArgsTemplate:
    !!js/function &TimestampNotEqualsArgsTemplate >
    (lhs, arg) => {
        return `${arg}`;
    }
  TimestampGreaterThanTemplate: !!js/function &TimestampGreaterThanTemplate >
    (lhs) => {
        return `${lhs} > `;
    }
  TimestampGreaterThanArgsTemplate:
    !!js/function &TimestampGreaterThanArgsTemplate >
    (lhs, arg) => {
        return `${arg}`;
    }
  TimestampGreaterThanOrEqualTemplate:
    !!js/function &TimestampGreaterThanOrEqualTemplate >
    (lhs) => {
        return `${lhs} >= `;
    }
  TimestampGreaterThanOrEqualArgsTemplate:
    !!js/function &TimestampGreaterThanOrEqualArgsTemplate >
    (lhs, arg) => {
        return `${arg}`;
    }
  TimestampLessThanTemplate: !!js/function &TimestampLessThanTemplate >
    (lhs) => {
        return `${lhs} < `;
    }
  TimestampLessThanArgsTemplate: !!js/function &TimestampLessThanArgsTemplate >
    (lhs, arg) => {
        return `${arg}`;
    }
  TimestampLessThanOrEqualTemplate:
    !!js/function &TimestampLessThanOrEqualTemplate >
    (lhs) => {
        return `${lhs} <= `;
    }
  TimestampLessThanOrEqualArgsTemplate:
    !!js/function &TimestampLessThanOrEqualArgsTemplate >
    (lhs, arg) => {
        return `${arg}`;
    }
  SymbolValueOfTemplate: !!js/function &SymbolValueOfTemplate >
    (lhs) => {
        return lhs;
    }
  SymbolValueOfArgsTemplate: !!js/function &SymbolValueOfArgsTemplate >
    () => {
        return '';
    }
  SymbolInspectTemplate: !!js/function &SymbolInspectTemplate >
    (lhs) => {
        return lhs;
    }
  SymbolInspectArgsTemplate: !!js/function &SymbolInspectArgsTemplate >
    () => {
        return '';
    }
  SymbolToStringTemplate: !!js/function &SymbolToStringTemplate >
    (lhs) => {
        return lhs;
    }
  SymbolToStringArgsTemplate: !!js/function &SymbolToStringArgsTemplate >
    (lhs) => {
        return '';
    }
  Decimal128ToStringTemplate: !!js/function &Decimal128ToStringTemplate >
    (lhs) => {
        return `(string) ${lhs}`;
    }
  Decimal128ToStringArgsTemplate:
    !!js/function &Decimal128ToStringArgsTemplate >
    (lhs) => {
        return '';
    }

  #############################################
  #         Symbol Attributes/Methods         #
  #                                           #
  # These're variables or functions called on #
  # symbols. Also called bson-utils.          #
  #                                           #
  # They are basically the same thing as      #
  # object attributes/methods, but need to be #
  # distinguished since they are separate     #
  # namespaces that happen to have the same   #
  # name which is v confusing.                #
  #                                           #
  # For example, ObjectId().toString() is an  #
  # object method, while ObjectId.fromString  #
  # is a symbol attribute. These are two      #
  # separate ObjectId related namespaces that #
  # don't overlap.                            #
  #                                           #
  #############################################
  LongSymbolMaxTemplate: !!js/function &LongSymbolMaxTemplate >
    () => {
        return '\\PHP_INT_MAX';
    }
  LongSymbolMaxArgsTemplate: &LongSymbolMaxArgsTemplate null
  LongSymbolMinTemplate: !!js/function &LongSymbolMinTemplate >
    () => {
        return '\\PHP_INT_MIN';
    }
  LongSymbolMinArgsTemplate: &LongSymbolMinArgsTemplate null
  LongSymbolZeroTemplate: !!js/function &LongSymbolZeroTemplate >
    () => {
        return '0';
    }
  LongSymbolZeroArgsTemplate: &LongSymbolZeroArgsTemplate null
  LongSymbolOneTemplate: !!js/function &LongSymbolOneTemplate >
    () => {
        return '1';
    }
  LongSymbolOneArgsTemplate: &LongSymbolOneArgsTemplate null
  LongSymbolNegOneTemplate: !!js/function &LongSymbolNegOneTemplate >
    () => {
        return '-1';
    }
  LongSymbolNegOneArgsTemplate: &LongSymbolNegOneArgsTemplate null
  LongSymbolFromBitsTemplate: !!js/function &LongSymbolFromBitsTemplate >
    () => {
        return '';
    }
  LongSymbolFromBitsArgsTemplate:
    !!js/function &LongSymbolFromBitsArgsTemplate >
    (lhs, arg) => {
        return `(int) ${arg}`;
    }
  LongSymbolFromIntTemplate: !!js/function &LongSymbolFromIntTemplate >
    () => {
        return '';
    }
  LongSymbolFromIntArgsTemplate: !!js/function &LongSymbolFromIntArgsTemplate >
    (lhs, arg) => {
        return arg;
    }
  LongSymbolFromNumberTemplate: !!js/function &LongSymbolFromNumberTemplate >
    () => {
        return '';
    }
  LongSymbolFromNumberArgsTemplate:
    !!js/function &LongSymbolFromNumberArgsTemplate >
    (lhs, arg) => {
        return `(int) ${arg}`;
    }
  LongSymbolFromStringTemplate: !!js/function &LongSymbolFromStringTemplate >
    () => {
        return '';
    }
  LongSymbolFromStringArgsTemplate:
    !!js/function &LongSymbolFromStringArgsTemplate >
    (lhs, arg) => {
        return `(int) ${arg}`;
    }
  Decimal128SymbolFromStringTemplate:
    !!js/function &Decimal128SymbolFromStringTemplate >
    () => {
        return 'new Decimal128';
    }
  Decimal128SymbolFromStringArgsTemplate:
    !!js/function &Decimal128SymbolFromStringArgsTemplate >
    (lhs, arg) => {
        return `(${arg})`;
    }
  ObjectIdCreateFromHexStringTemplate:
    !!js/function &ObjectIdCreateFromHexStringTemplate >
    () => {
        return 'new ObjectId';
    }
  ObjectIdCreateFromHexStringArgsTemplate:
    !!js/function &ObjectIdCreateFromHexStringArgsTemplate >
    (lhs, arg) => {
        return `(${arg})`;
    }
  ObjectIdCreateFromTimeTemplate:
    !!js/function &ObjectIdCreateFromTimeTemplate >
    () => {
        return 'new ObjectId';
    }
  ObjectIdCreateFromTimeArgsTemplate:
    !!js/function &ObjectIdCreateFromTimeArgsTemplate >
    (lhs, arg, isNumber) => {
        if (!isNumber) {
            return `(\\str_pad(\\bin2hex(\\pack('N', (${arg})->toDateTime()->getTimestamp())), 24, '0'))`;
        }
        return `(\\str_pad(\\bin2hex(\\pack('N', ${arg})), 24, '0'))`;
    }
  # non bson-specific would go here, but there aren't any atm.
  #############################################
  #                 Imports                   #
  #                                           #
  # Each type has a 'code' that is consistent #
  # between languages. The import templates   #
  # for each code generate the required       #
  # statement for each type. No args.         #
  #                                           #
  # The ImportTemplate collects everything    #
  # into one statement.                       #
  #                                           #
  #############################################
  ImportTemplate: !!js/function &ImportTemplate >
    (args) => {
        let set = new Set(Object.values(args));
        return [...set].sort().join('\n');
    }
  DriverImportTemplate: !!js/function &DriverImportTemplate >
    () => {
        return `use MongoDB\\Client;`;
    }
  0ImportTemplate: &0ImportTemplate null
  1ImportTemplate: &1ImportTemplate null
  2ImportTemplate: &2ImportTemplate null
  3ImportTemplate: &3ImportTemplate null
  4ImportTemplate: &4ImportTemplate null
  5ImportTemplate: &5ImportTemplate null
  6ImportTemplate: &6ImportTemplate null
  7ImportTemplate: &7ImportTemplate null
  # Common internal Regexp
  8ImportTemplate: !!js/function &8ImportTemplate >
    () => {
        return `use MongoDB\\BSON\\Regex;`;
    }
  9ImportTemplate: &9ImportTemplate null
  10ImportTemplate: &10ImportTemplate null
  11ImportTemplate: &11ImportTemplate null
  12ImportTemplate: &12ImportTemplate null
  # Code
  100ImportTemplate: !!js/function &100ImportTemplate >
    () => {
        return `use MongoDB\\BSON\\Javascript;`;
    }
  # ObjectId
  101ImportTemplate: !!js/function &101ImportTemplate >
    () => {
        return `use MongoDB\\BSON\\ObjectId;`;
    }
  # Binary
  102ImportTemplate: !!js/function &102ImportTemplate >
    () => {
        return `use MongoDB\\BSON\\Binary;`;
    }
  # DBRef
  103ImportTemplate: &103ImportTemplate null
  104ImportTemplate: &104ImportTemplate null
  105ImportTemplate: &105ImportTemplate null
  # Int64
  106ImportTemplate: &106ImportTemplate null
  # MinKey
  107ImportTemplate: !!js/function &107ImportTemplate >
    () => {
        return `use MongoDB\\BSON\\MinKey;`;
    }
  # MaxKey
  108ImportTemplate: !!js/function &108ImportTemplate >
    () => {
        return `use MongoDB\\BSON\\MaxKey;`;
    }
  # Regex
  109ImportTemplate: !!js/function &109ImportTemplate >
    () => {
        return `use MongoDB\\BSON\\Regex;`;
    }
  # Timestamp
  110ImportTemplate: !!js/function &110ImportTemplate >
    () => {
        return `use MongoDB\\BSON\\Timestamp;`;
    }
  111ImportTemplate: &111ImportTemplate null
  # Decimal128
  112ImportTemplate: !!js/function &112ImportTemplate >
    () => {
        return `use MongoDB\\BSON\\Decimal128;`;
    }
  113ImportTemplate: &113ImportTemplate null
  114ImportTemplate: &114ImportTemplate null
  200ImportTemplate: !!js/function &200ImportTemplate >
    () => {
        return `use MongoDB\\BSON\\UTCDateTime;`;
    }
  201ImportTemplate: &201ImportTemplate null
  300ImportTemplate: &300ImportTemplate null
  301ImportTemplate: &301ImportTemplate null
  302ImportTemplate: &302ImportTemplate null
  303ImportTemplate: &303ImportTemplate null
  304ImportTemplate: &304ImportTemplate null
  305ImportTemplate: &305ImportTemplate null
  306ImportTemplate: &306ImportTemplate null
