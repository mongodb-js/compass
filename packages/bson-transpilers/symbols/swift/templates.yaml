#############################################
#             Sample Templates              #
#                                           #
# The expected arguments are commented next #
# to the template itself. Currently all are #
# set to null, but to define a function     #
# replace 'null' with '!!js/function > \n   #
# and a function defined below.             #
#                                           #
# See the other template files for examples #
#                                           #
#               Good to know:               #
# lhs is left-hand-side of the expression   #
# rhs is right-hand-side of the expression  #
# All args are strings unless noted         #
#    - arg? is boolean                      #
#    - arg# is number                       #
#                                           #
#############################################
Templates:
    ########
    # Misc #
    ########

    # Filter out regex flags that have translations or are unsupported.
    RegexFlags: &RegexFlags
        i: 'i'
        m: 'm'
        u: 'u'
        y: 'y'
        g: 'g'
    BSONRegexFlags: &BSONRegexFlags
        i: 'i'
        m: 'm'
        x: 'x'
        s: 's'
        l: 'l'
        u: 'u'

    #############################################
    #                  Syntax                   #
    #                                           #
    # Templates for language syntax expressions #
    #                                           #
    #############################################

    DriverTemplate: &DriverTemplate !!js/function >
      (spec) => {
        const comment = '// Requires the MongoSwift package\n// https://github.com/mongodb/mongo-swift-driver';

        const options = spec.options;
        const filter = spec.filter || '[:]';
        delete spec.options;
        delete spec.filter;

        const connect = [
          'let elg = MultiThreadedEventLoopGroup(numberOfThreads: 4)',
          `let client = try MongoClient(`,
          `    "${options.uri}",`,
          "    using: elg",
          ")",
          'defer {',
          '    try? client.syncClose()',
          '    cleanupMongoSwift()',
          '    try? elg.syncShutdownGracefully()',
          '}',
        ].join('\n');

        const coll = `let coll = client.db("${options.database}").collection("${options.collection}")`;

        if ('aggregation' in spec) {
          let agg = spec.aggregation;
          if (agg.charAt(0) != '[') {
            agg = `[${agg}]`;
          }

          return [
            `${comment}\n`,
            connect,
            coll,
            `let cursor = try await coll.aggregate(${agg})`
          ].join('\n')
        }

        const findOpts = [];
        for (let optName in spec) {
          let optValue = spec[optName];
          switch(optName) {
          case 'project':
            optName = 'projection';
            break;
          }
          findOpts.push([optName, optValue])
        }

        findOpts.sort()

        const optsDecl = 'let options = FindOptions(';
        let optPairs = [];
        let optPairsDecls = [];
        
        for (const kvp of findOpts) {
          if (kvp[1].indexOf("\n") != -1) {
              optPairsDecls.push(`let ${kvp[0]} = ${kvp[1]}`);
              optPairs.push(`    ${kvp[0]}: ${kvp[0]}`)
          } else {
              optPairs.push(`    ${kvp[0]}: ${kvp[1]}`)
          }
        }

        let optionsLet = '';
        let cursorLet = 'let cursor = try await coll.find(filter)';

        if (optPairs.length > 0) {
          optionsLet = [
            optPairsDecls.join('\n'),
            optsDecl,
            optPairs.join(',\n'),
            ')'
          ].join('\n');
          cursorLet = 'let cursor = try await coll.find(filter, options: options)';
        }

        return [
          comment,
          '',
          connect,
          '',
          coll,
          optionsLet,
          `let filter = ${filter}`,
          cursorLet
        ].join('\n');
      }

    EqualitySyntaxTemplate: &EqualitySyntaxTemplate !!js/function >
        (lhs, op, rhs) => {
            if (op.includes('!') || op.includes('not')) {
                return `${lhs} != ${rhs}`;
            }
            else if (op === '==' || op === '===' || op === 'is') {
                return `${lhs} == ${rhs}`;
            }
            return `${lhs} ${op} ${rhs}`;
        }
    InSyntaxTemplate: &InSyntaxTemplate !!js/function >
        (lhs, op, rhs) => {
            let prefix = '';
            if (op.includes('!') || op.includes('not')) {
                prefix = '!';
            }
            return `${prefix}${rhs}.contains(&${lhs})`
        }
    AndSyntaxTemplate: &AndSyntaxTemplate !!js/function >
        (args) => {
            return args.join(' && ');
        }
    OrSyntaxTemplate: &OrSyntaxTemplate !!js/function >
        (args) => {
            return args.join(' || ');
        }
    NotSyntaxTemplate: &NotSyntaxTemplate !!js/function >
        (arg) => {
            return `!${arg}`;
        }
    UnarySyntaxTemplate: &UnarySyntaxTemplate !!js/function >
        (op, val) => {
            return `${op}${val}`;
        }
    BinarySyntaxTemplate: &BinarySyntaxTemplate !!js/function >
        (args) => {
            return args.reduce((s, op, i, arr) => {
                if (i % 2 === 0) {
                    return s;
                }
                const rhs = arr[i + 1];
                switch(op) {
                    case '//':
                        return `${s} / ${rhs}`
                    case '**':
                        return `pow(${s}, ${rhs})`
                    default:
                        return `${s} ${op} ${rhs}`;
                }
            }, args[0]);
        }
    ParensSyntaxTemplate: &ParensSyntaxTemplate null
    EosTemplate: &EosSyntaxTemplate null # No args. End-of-line
    EofTemplate: &EofSyntaxTemplate null # No args. End-of-file
    FloorDivTemplate: &FloorDivSyntaxTemplate null # Args: lhs, rhs
    PowerTemplate: &PowerSyntaxTemplate null # Args: lhs, rhs
    NewTemplate: &NewSyntaxTemplate null # Args: expression, skip?, code# [to check if meant to be skipped]

    #############################################
    #               Literal Types               #
    #                                           #
    # Templates for literal type instance. Most #
    # get passed the literal itself as an arg.  #
    #                                           #
    #############################################
    StringTypeTemplate: &StringTypeTemplate !!js/function >
        (str) => {
            let newStr = str;
            if (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') {
                newStr = '"' + str.substr(1, str.length - 2) + '"';
            }
            return newStr;
        }
    RegexTypeTemplate: &RegexTypeTemplate !!js/function >
        (pattern, flags) => {
            // Double-quote stringify
            let newPat = pattern;
            if (
                (pattern.charAt(0) === '\'' && pattern.charAt(pattern.length - 1) === '\'') ||
                (pattern.charAt(0) === '"' && pattern.charAt(pattern.length - 1) === '"')) {
                    newPat = pattern.substr(1, pattern.length - 2);
            }
            return `BSONRegularExpression(pattern: "${newPat.replace(/\\([\s\S])|(")/g, '\\$1$2')}", options: "${flags}")`
        }
    BoolTypeTemplate: &BoolTypeTemplate !!js/function >
        (literal) => {
            return literal.toLowerCase();
        }
    IntegerTypeTemplate: &IntegerTypeTemplate null # args: literal, argType (i.e. '_string', '_decimal' etc)
    DecimalTypeTemplate: &DecimalTypeTemplate null # args: literal, argType
    LongBasicTypeTemplate: &LongBasicTypeTemplate null # args: literal, argType
    HexTypeTemplate: &HexTypeTemplate !!js/function >
        (literal, type) => {
            if (literal.charAt(1) === 'X') {
                return literal.charAt(0) + 'x' + literal.substring(2);
            }
            return literal;
        }
    OctalTypeTemplate: &OctalTypeTemplate !!js/function >
        (literal, type) => {
            switch(literal.charAt(1)) {
                case 'o':
                    return literal;
                case 'O':
                case '0':
                    return literal.charAt(0) + 'o' + literal.substring(2);
                default:
                    return literal.charAt(0) + 'o' + literal.substring(1);
            }
        }
    NumericTypeTemplate: &NumericTypeTemplate null # args: literal, argType
    ArrayTypeTemplate: &ArrayTypeTemplate !!js/function >
        (literal, depth) => {
            if (literal === '') {
                return '[]'
            }
            return `[${literal}]`;
        }
    ArrayTypeArgsTemplate: &ArrayTypeArgsTemplate !!js/function >
        (element, depth, isLast) => {
            depth++;
            const indent = '\n' + '    '.repeat(depth);
            const closingIndent = isLast ? '\n' + '    '.repeat(depth - 1) : ',';
            return `${indent}${element}${closingIndent}`;
        }  
    NullTypeTemplate: &NullTypeTemplate !!js/function >
        () => 'BSON.null'
    UndefinedTypeTemplate: &UndefinedTypeTemplate !!js/function >
        () => 'BSON.null'
    ObjectTypeTemplate: &ObjectTypeTemplate !!js/function >
        (literal) => {
            if (literal === '') {
                return '[:]';
            }
            return `[${literal}]`;
        }
    ObjectTypeArgsTemplate: &ObjectTypeArgsTemplate !!js/function >
        (args, depth) => {
            if (args.length === 0) {
                return '';
            }

            depth++;
            const indent = '\n' + '    '.repeat(depth);
            const closingIndent = '\n' + '    '.repeat(depth - 1);

            const doubleStringify = (str) => {
                let newStr = str;
                if (
                  (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
                  (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
                    newStr = str.substr(1, str.length - 2);
                }
                return `"${newStr.replace(/\\([\s\S])|(")/g, '\\$1$2')}"`;
            }

            const bsonify = (element) => {
                const prefixMap = {
                    "Int64": ".int64",
                    "Int32": ".int32",
                    "Double": ".double",
                    "BSONCodeWithScope": ".codeWithScope",
                    "BSONObjectID": ".objectID",
                    "BSONRegularExpression": ".regularExpression",
                    "BSONBinary": ".binary",
                    "BSONTimestamp": ".timestamp",
                    "BSONDecimal128": ".decimal128",
                    "Date": ".datetime"
                };

                const unitsMap = {
                    "BSONMinKey": ".minKey",
                    "BSONMaxKey": ".maxKey"
                };

                for (const prefix in prefixMap) {
                    if (element.startsWith(prefix) || element.startsWith("try " + prefix)) {
                        return `${prefixMap[prefix]}(${element})`
                    }
                }

                for (const prefix in unitsMap) {
                    if (element.startsWith(prefix)) {
                        return unitsMap[prefix];
                    }
                }

                // special handle BSONCode since it is a subset of BSONCodeWithScope
                if (element.startsWith("BSONCode")) {
                    return `.code(${element})`;
                }

                return element;
            }

            const pairs = args.map((pair) => {
                return `${indent}${doubleStringify(pair[0])}: ${bsonify(pair[1])}`;
            }).join(',');

            return `${pairs}${closingIndent}`;
        }

    #############################################
    #               Symbols                     #
    #                                           #
    # Templates for symbols, can be either      #
    # functions or variables.                   #
    #                                           #
    # The *SymbolTemplates return names and     #
    # usually don't take any arguments. The     #
    # *SymbolArgsTemplates are invoked for func #
    # calls. The first argument is always the   #
    # lhs, i.e. the symbol returned from the    #
    # corresponding SymbolTemplate. The rest of #
    # the arguments are the processed arguments #
    # passed to the original function.          #
    #                                           #
    #############################################
    CodeSymbolTemplate: &CodeSymbolTemplate !!js/function >
        () => ''
    CodeSymbolArgsTemplate: &CodeSymbolArgsTemplate !!js/function >
        (lhs, code, scope) => {
            // Double quote stringify
            let newStr = code === undefined ? '' : code;
            const str = newStr;
            if (
                (str.charAt(0) === '\'' && str.charAt(str.length - 1) === '\'') ||
                (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"')) {
                newStr = str.substr(1, str.length - 2);
            }
            code = `"${newStr.replace(/\\([\s\S])|(")/g, '\\$1$2')}"`;
            if (scope === undefined) {
                return `BSONCode(code: ${code})`;
            } else {
                return `BSONCodeWithScope(code: ${code}, scope: ${scope})`;
            }
        }
    ObjectIdSymbolTemplate: &ObjectIdSymbolTemplate !!js/function >
        () => ''
    ObjectIdSymbolArgsTemplate: &ObjectIdSymbolArgsTemplate !!js/function >
        (lhs, arg) => {
            if (arg === undefined || arg === '') {
                return 'BSONObjectID()';
            }
            // Double quote stringify
            let newArg = arg;
            if (
                (arg.charAt(0) === '\'' && arg.charAt(arg.length - 1) === '\'') ||
                (arg.charAt(0) === '"' && arg.charAt(arg.length - 1) === '"')) {
                newArg = arg.substr(1, arg.length - 2);
            }
            newArg = `"${newArg.replace(/\\([\s\S])|(")/g, '\\$1$2')}"`;
            return `try BSONObjectID(${newArg})`;
        }
    BinarySymbolTemplate: &BinarySymbolTemplate !!js/function >
        () => 'BSONBinary'
    BinarySymbolArgsTemplate: &BinarySymbolArgsTemplate !!js/function >
        (_, bytes, type) => {
            // Double quote stringify
            let newBytes = bytes;
            if (
                (bytes.charAt(0) === '\'' && bytes.charAt(bytes.length - 1) === '\'') ||
                (bytes.charAt(0) === '"' && bytes.charAt(bytes.length - 1) === '"')) {
                newBytes = bytes.substr(1, bytes.length - 2);
            }
            newBytes = `"${newBytes.replace(/\\([\s\S])|(")/g, '\\$1$2')}"`;
            if (type === null) {
                type = '.generic';
            }
            return `(bytes: ${bytes}, subtype: ${type})`
        }
    BinarySymbolSubtypeDefaultTemplate: &BinarySymbolSubtypeDefaultTemplate !!js/function >
        () => 'BSONBinary.Subtype.generic'
    BinarySymbolSubtypeFunctionTemplate: &BinarySymbolSubtypeFunctionTemplate !!js/function >
        () => 'BSONBinary.Subtype.function'
    BinarySymbolSubtypeByteArrayTemplate: &BinarySymbolSubtypeByteArrayTemplate !!js/function >
        () => 'BSONBinary.Subtype.binaryOld'
    BinarySymbolSubtypeUuidOldTemplate: &BinarySymbolSubtypeUuidOldTemplate !!js/function >
        () => 'BSONBinary.Subtype.uuidOld'
    BinarySymbolSubtypeUuidTemplate: &BinarySymbolSubtypeUuidTemplate !!js/function >
        () => 'BSONBinary.Subtype.uuid'
    BinarySymbolSubtypeMd5Template: &BinarySymbolSubtypeMd5Template !!js/function >
        () => 'BSONBinary.Subtype.md5'
    BinarySymbolSubtypeUserDefinedTemplate: &BinarySymbolSubtypeUserDefinedTemplate !!js/function >
        (arg) => `BSONBinary.Subtype.UserDefined(${arg})`
    DBRefSymbolTemplate: &DBRefSymbolTemplate null # No args
    DBRefSymbolArgsTemplate: &DBRefSymbolArgsTemplate null # Args: lhs, coll, id, db
    DoubleSymbolTemplate: &DoubleSymbolTemplate !!js/function >
        () => 'Double'
    DoubleSymbolArgsTemplate: &DoubleSymbolArgsTemplate !!js/function >
        (lhs, arg, type) => {
            arg = arg === undefined ? "(0.0)" : arg;
            return arg;
        }
    Int32SymbolTemplate: &Int32SymbolTemplate !!js/function >
        () => 'Int32'
    Int32SymbolArgsTemplate: &Int32SymbolArgsTemplate !!js/function >
        (lhs, arg, type) => {
            if (!arg) {
                return '()';
            }
            let suffix = '';
            if (type === '_string') {
                suffix = '!';
            }
            return `(${arg})${suffix}`;
        }
    LongSymbolTemplate: &LongSymbolTemplate !!js/function >
        () => ''
    LongSymbolArgsTemplate: &LongSymbolArgsTemplate !!js/function >
        (lhs, arg, type) => {
            if (!arg) {
                return '()';
            }
            if (type === '_string') {
                suffix = '!';
                return `Int64(${arg})!`;
            }
            return arg;
        }
    RegExpSymbolTemplate: &RegExpSymbolTemplate null
    RegExpSymbolArgsTemplate: &RegExpSymbolArgsTemplate null
    SymbolSymbolTemplate: &SymbolSymbolTemplate null
    SymbolSymbolArgsTemplate: &SymbolSymbolArgsTemplate null
    BSONRegExpSymbolTemplate: &BSONRegExpSymbolTemplate !!js/function >
        () => 'BSONRegularExpression'
    BSONRegExpSymbolArgsTemplate: &BSONRegExpSymbolArgsTemplate !!js/function >
        (_, pattern, flags) => {
            if (flags === null || flags === undefined) {
                flags = '';
            }
            if (
                (flags.charAt(0) === '\'' && flags.charAt(flags.length - 1) === '\'') ||
                (flags.charAt(0) === '"' && flags.charAt(flags.length - 1) === '"')) {
                    flags = flags.substr(1, flags.length - 2);
            }
            // Double-quote stringify
            let newPat = pattern;
            if (
                (pattern.charAt(0) === '\'' && pattern.charAt(pattern.length - 1) === '\'') ||
                (pattern.charAt(0) === '"' && pattern.charAt(pattern.length - 1) === '"')) {
                    newPat = pattern.substr(1, pattern.length - 2);
            }
            return `(pattern: "${newPat.replace(/\\([\s\S])|(")/g, '\\$1$2')}", options: "${flags}")`;
        }
    Decimal128SymbolTemplate: &Decimal128SymbolTemplate !!js/function >
        () => ''
    Decimal128SymbolArgsTemplate: &Decimal128SymbolArgsTemplate !!js/function >
        (lhs, arg) => {
            if (!arg) {
                return `try BSONDecimal128("0")`
            }
            return `try BSONDecimal128("${arg}")`
        }
    MinKeySymbolTemplate: &MinKeySymbolTemplate !!js/function >
        () => 'BSONMinKey'
    MinKeySymbolArgsTemplate: &MinKeySymbolArgsTemplate !!js/function >
        () => '()'
    MaxKeySymbolTemplate: &MaxKeySymbolTemplate !!js/function >
        () => 'BSONMaxKey'
    MaxKeySymbolArgsTemplate: &MaxKeySymbolArgsTemplate !!js/function >
        () => '()'
    TimestampSymbolTemplate: &TimestampSymbolTemplate !!js/function >
        () => 'BSONTimestamp'
    TimestampSymbolArgsTemplate: &TimestampSymbolArgsTemplate !!js/function >
        (lhs, low, high) => {
            if (low === undefined) {
                low = 0;
                high = 0;
            }
            return `(timestamp: ${low}, inc: ${high})`
        }
    # non bson-specific
    NumberSymbolTemplate: &NumberSymbolTemplate !!js/function >
        () => ''
    NumberSymbolArgsTemplate: &NumberSymbolArgsTemplate !!js/function >
        (lhs, arg, type) => {
            arg = arg === undefined ? "0.0" : arg;

            switch(type) {
                case '_string':
                  return `Double(${arg})!`;
                case '_integer':
                case '_long':
                  return `${arg}.0`;
                default:
                    return arg;
            }
        }
    DateSymbolTemplate: &DateSymbolTemplate !!js/function >
        () => 'Date'
    DateSymbolArgsTemplate: &DateSymbolArgsTemplate !!js/function >
        (lhs, date, isString) => {
          let d = "Date()";
          if (date) {
            dParts = [
                "    calendar: Calendar(identifier: .gregorian)",
                '    timeZone: TimeZone(identifier: "UTC")!',
                `    year: ${date.getUTCFullYear()}`,
                `    month: ${date.getUTCMonth() + 1}`,
                `    day: ${date.getUTCDate()}`,
                `    hour: ${date.getUTCHours()}`,
                `    minute: ${date.getUTCMinutes()}`,
                `    second: ${date.getUTCSeconds()}`
            ].join(',\n')
            d = `DateComponents(\n${dParts}\n).date!`
          }
          if (isString) {
            d = `String(describing: ${d})`
          }
          return d;
        }

    #############################################
    #         Object Attributes/Methods         #
    #                                           #
    # These're variables or functions called on #
    # instantiated objects. For example,        #
    # ObjectId().isValid() or Timestamp().t     #
    #                                           #
    # They follow the same pattern with the
    # *Template/*ArgsTemplates: usually no args #
    # to the Template and lhs plus any original #
    # arguments to the ArgsTemplate.            #
    #                                           #
    #############################################
    CodeCodeTemplate: &CodeCodeTemplate !!js/function >
        () => ''
    CodeCodeArgsTemplate: &CodeCodeArgsTemplate !!js/function >
        (lhs) => `${lhs}.code`
    CodeScopeTemplate: &CodeScopeTemplate !!js/function >
        () => ''
    CodeScopeArgsTemplate: &CodeScopeArgsTemplate !!js/function >
        (lhs) => `${lhs}.scope`
    ObjectIdToStringTemplate: &ObjectIdToStringTemplate !!js/function >
        () => ''
    ObjectIdToStringArgsTemplate: &ObjectIdToStringArgsTemplate !!js/function >
        (lhs) => `${lhs}.hex`
    ObjectIdEqualsTemplate: &ObjectIdEqualsTemplate !!js/function >
        (lhs) => `${lhs} == `
    ObjectIdEqualsArgsTemplate: &ObjectIdEqualsArgsTemplate !!js/function >
        (_, arg) => arg
    ObjectIdGetTimestampTemplate: &ObjectIdGetTimestampTemplate !!js/function >
        (lhs) => `${lhs}.timestamp`
    ObjectIdGetTimestampArgsTemplate: &ObjectIdGetTimestampArgsTemplate !!js/function >
        (lhs) => ''
    ObjectIdIsValidTemplate: &ObjectIdIsValidTemplate null
    ObjectIdIsValidArgsTemplate: &ObjectIdIsValidArgsTemplate null
    BinaryValueTemplate: &BinaryValueTemplate !!js/function >
        (lhs) => `${lhs}.data`
    BinaryValueArgsTemplate: &BinaryValueArgsTemplate null
    BinaryLengthTemplate: &BinaryLengthTemplate !!js/function >
        (lhs) => `${lhs}.data.readableBytes`
    BinaryLengthArgsTemplate: &BinaryLengthArgsTemplate null
    BinaryToStringTemplate: &BinaryToStringTemplate null
    BinaryToStringArgsTemplate: &BinaryToStringArgsTemplate null
    BinarySubtypeTemplate: &BinarySubtypeTemplate !!js/function >
        (lhs) => `${lhs}.subtype`
    BinarySubtypeArgsTemplate: &BinarySubtypeArgsTemplate null
    DBRefGetDBTemplate: &DBRefGetDBTemplate null
    DBRefGetCollectionTemplate: &DBRefGetCollectionTemplate null
    DBRefGetIdTemplate: &DBRefGetIdTemplate null
    DBRefGetDBArgsTemplate: &DBRefGetDBArgsTemplate null
    DBRefGetCollectionArgsTemplate: &DBRefGetCollectionArgsTemplate null
    DBRefGetIdArgsTemplate: &DBRefGetIdArgsTemplate null
    DBRefToStringTemplate: &DBRefToStringTemplate null
    DBRefToStringArgsTemplate: &DBRefToStringArgsTemplate null
    DoubleValueOfTemplate: &DoubleValueOfTemplate null
    DoubleValueOfArgsTemplate: &DoubleValueOfArgsTemplate null
    Int32ValueOfTemplate: &Int32ValueOfTemplate null
    Int32ValueOfArgsTemplate: &Int32ValueOfArgsTemplate null
    Int32ToStringTemplate: &Int32ToStringTemplate !!js/function >
        (lhs) => `"\\(${lhs})"`
    Int32ToStringArgsTemplate: &Int32ToStringArgsTemplate null
    LongEqualsTemplate: &LongEqualsTemplate !!js/function >
        (lhs) => `${lhs} == `
    LongEqualsArgsTemplate: &LongEqualsArgsTemplate null
    LongToStringTemplate: &LongToStringTemplate !!js/function >
        (lhs) => `"\\(${lhs})"`
    LongToStringArgsTemplate: &LongToStringArgsTemplate null
    LongToIntTemplate: &LongToIntTemplate !!js/function >
        (lhs) => `${lhs} as Int32`
    LongToIntArgsTemplate: &LongToIntArgsTemplate null
    LongValueOfTemplate: &LongValueOfTemplate null
    LongValueOfArgsTemplate: &LongValueOfArgsTemplate null
    LongToNumberTemplate: &LongToNumberTemplate !!js/function >
        (lhs) => `${lhs} as Double`
    LongToNumberArgsTemplate: &LongToNumberArgsTemplate null
    LongAddTemplate: &LongAddTemplate !!js/function >
        (lhs) => `${lhs} + `
    LongAddArgsTemplate: &LongAddArgsTemplate null
    LongSubtractTemplate: &LongSubtractTemplate !!js/function >
        (lhs) => `${lhs} - `
    LongSubtractArgsTemplate: &LongSubtractArgsTemplate null
    LongMultiplyTemplate: &LongMultiplyTemplate !!js/function >
        (lhs) => `${lhs} * `
    LongMultiplyArgsTemplate: &LongMultiplyArgsTemplate null
    LongDivTemplate: &LongDivTemplate !!js/function >
        (lhs) => `${lhs} / `
    LongDivArgsTemplate: &LongDivArgsTemplate null
    LongModuloTemplate: &LongModuloTemplate !!js/function >
        (lhs) => `${lhs} % `
    LongModuloArgsTemplate: &LongModuloArgsTemplate null
    LongAndTemplate: &LongAndTemplate !!js/function >
        (lhs) => `${lhs} & `
    LongAndArgsTemplate: &LongAndArgsTemplate null
    LongOrTemplate: &LongOrTemplate !!js/function >
        (lhs) => `${lhs} | `
    LongOrArgsTemplate: &LongOrArgsTemplate null
    LongXorTemplate: &LongXorTemplate !!js/function >
        (lhs) => `${lhs} ^ `
    LongXorArgsTemplate: &LongXorArgsTemplate null
    LongShiftLeftTemplate: &LongShiftLeftTemplate !!js/function >
        (lhs) => `${lhs} << `
    LongShiftLeftArgsTemplate: &LongShiftLeftArgsTemplate !!js/function >
        (_, rhs) => rhs
    LongShiftRightTemplate: &LongShiftRightTemplate !!js/function >
        (lhs) => `${lhs} >> `
    LongShiftRightArgsTemplate: &LongShiftRightArgsTemplate !!js/function >
        (_, rhs) => rhs
    LongCompareTemplate: &LongCompareTemplate !!js/function >
        (lhs) => `${lhs} - `
    LongCompareArgsTemplate: &LongCompareArgsTemplate !!js/function >
        (_, rhs) => rhs
    LongIsOddTemplate: &LongIsOddTemplate !!js/function >
        (arg) => `${arg} % 2 == 1`
    LongIsOddArgsTemplate: &LongIsOddArgsTemplate !!js/function >
        () => ''
    LongIsZeroTemplate: &LongIsZeroTemplate !!js/function >
        (arg) => `${arg} == 0`
    LongIsZeroArgsTemplate: &LongIsZeroArgsTemplate !!js/function >
        () => ''
    LongIsNegativeTemplate: &LongIsNegativeTemplate !!js/function >
        (arg) => `${arg} < 0`
    LongIsNegativeArgsTemplate: &LongIsNegativeArgsTemplate !!js/function >
        () => ''
    LongNegateTemplate: &LongNegateTemplate !!js/function >
        () => '-'
    LongNegateArgsTemplate: &LongNegateArgsTemplate !!js/function >
        (arg) => arg
    LongNotTemplate: &LongNotTemplate !!js/function >
        () => '~'
    LongNotArgsTemplate: &LongNotArgsTemplate !!js/function >
        (arg) => arg
    LongNotEqualsTemplate: &LongNotEqualsTemplate !!js/function >
        (lhs) => `${lhs} != `
    LongNotEqualsArgsTemplate: &LongNotEqualsArgsTemplate !!js/function >
        (_, rhs) => rhs
    LongGreaterThanTemplate: &LongGreaterThanTemplate !!js/function >
        (lhs) => `${lhs} > `
    LongGreaterThanArgsTemplate: &LongGreaterThanArgsTemplate !!js/function >
        (_, rhs) => rhs
    LongGreaterThanOrEqualTemplate: &LongGreaterThanOrEqualTemplate !!js/function >
        (lhs) => `${lhs} >= `
    LongGreaterThanOrEqualArgsTemplate: &LongGreaterThanOrEqualArgsTemplate !!js/function >
        (_, rhs) => rhs
    LongLessThanTemplate: &LongLessThanTemplate !!js/function >
        (lhs) => `${lhs} < `
    LongLessThanArgsTemplate: &LongLessThanArgsTemplate !!js/function >
        (_, rhs) => rhs
    LongLessThanOrEqualTemplate: &LongLessThanOrEqualTemplate !!js/function >
        (lhs) => `${lhs} <= `
    LongLessThanOrEqualArgsTemplate: &LongLessThanOrEqualArgsTemplate !!js/function >
        (_, rhs) => rhs
    LongFloatApproxTemplate: &LongFloatApproxTemplate !!js/function >
        (arg) => `Double(${arg})`
    LongTopTemplate: &LongTopTemplate !!js/function >
        (arg) => `${arg} >> 32`
    LongBottomTemplate: &LongBottomTemplate !!js/function >
        (arg) => `${arg} & 0x0000ffff`
    TimestampToStringTemplate: &TimestampToStringTemplate !!js/function >
        (arg) => `"\\(${arg})"`
    TimestampToStringArgsTemplate: &TimestampToStringArgsTemplate !!js/function >
        () => ''
    TimestampEqualsTemplate: &TimestampEqualsTemplate !!js/function >
        (lhs) => `${lhs} == `
    TimestampEqualsArgsTemplate: &TimestampEqualsArgsTemplate !!js/function >
        (_, rhs) => rhs
    TimestampGetLowBitsTemplate: &TimestampGetLowBitsTemplate !!js/function >
        (arg) => `${arg}.timestamp`
    TimestampGetLowBitsArgsTemplate: &TimestampGetLowBitsArgsTemplate !!js/function >
        () => ''
    TimestampGetHighBitsTemplate: &TimestampGetHighBitsTemplate !!js/function >
        (arg) => `${arg}.increment`
    TimestampGetHighBitsArgsTemplate: &TimestampGetHighBitsArgsTemplate !!js/function >
        () => ''
    TimestampTTemplate: &TimestampTTemplate !!js/function >
        (arg) => `${arg}.timestamp`
    TimestampITemplate: &TimestampITemplate !!js/function >
        (arg) => `${arg}.increment`
    TimestampAsDateTemplate: &TimestampAsDateTemplate !!js/function >
        (arg) => `Date(timeIntervalSince1970: TimeInterval(${arg.timestamp}) / 1000.0))`
    TimestampAsDateArgsTemplate: &TimestampAsDateArgsTemplate !!js/function >
        () => ''
    TimestampCompareTemplate: &TimestampCompareTemplate null
    TimestampCompareArgsTemplate: &TimestampCompareArgsTemplate null
    TimestampNotEqualsTemplate: &TimestampNotEqualsTemplate !!js/function >
        (lhs) => `${lhs} != `
    TimestampNotEqualsArgsTemplate: &TimestampNotEqualsArgsTemplate !!js/function >
        (_, rhs) => rhs
    TimestampGreaterThanTemplate: &TimestampGreaterThanTemplate null
    TimestampGreaterThanArgsTemplate: &TimestampGreaterThanArgsTemplate null
    TimestampGreaterThanOrEqualTemplate: &TimestampGreaterThanOrEqualTemplate null
    TimestampGreaterThanOrEqualArgsTemplate: &TimestampGreaterThanOrEqualArgsTemplate null
    TimestampLessThanTemplate: &TimestampLessThanTemplate null
    TimestampLessThanArgsTemplate: &TimestampLessThanArgsTemplate null
    TimestampLessThanOrEqualTemplate: &TimestampLessThanOrEqualTemplate null
    TimestampLessThanOrEqualArgsTemplate: &TimestampLessThanOrEqualArgsTemplate null
    SymbolValueOfTemplate: &SymbolValueOfTemplate null
    SymbolValueOfArgsTemplate: &SymbolValueOfArgsTemplate null
    SymbolInspectTemplate: &SymbolInspectTemplate null
    SymbolInspectArgsTemplate: &SymbolInspectArgsTemplate null
    SymbolToStringTemplate: &SymbolToStringTemplate null
    SymbolToStringArgsTemplate: &SymbolToStringArgsTemplate null
    Decimal128ToStringTemplate: &Decimal128ToStringTemplate !!js/function >
        (lhs) => `"\(${lhs})"`
    Decimal128ToStringArgsTemplate: &Decimal128ToStringArgsTemplate null
    # non bson-specific
    DateSymbolNowTemplate: &DateSymbolNowTemplate !!js/function >
        () => 'Date()'
    DateSymbolNowArgsTemplate: &DateSymbolNowArgsTemplate !!js/function >
        () => ''

    #############################################
    #         Symbol Attributes/Methods         #
    #                                           #
    # These're variables or functions called on #
    # symbols. Also called bson-utils.          #
    #                                           #
    # They are basically the same thing as      #
    # object attributes/methods, but need to be #
    # distinguished since they are separate     #
    # namespaces that happen to have the same   #
    # name which is v confusing.                #
    #                                           #
    # For example, ObjectId().toString() is an  #
    # object method, while ObjectId.fromString  #
    # is a symbol attribute. These are two      #
    # separate ObjectId related namespaces that #
    # don't overlap.                            #
    #                                           #
    #############################################
    LongSymbolMaxTemplate: &LongSymbolMaxTemplate !!js/function >
        () => "Int64.max"
    LongSymbolMaxArgsTemplate: &LongSymbolMaxArgsTemplate null
    LongSymbolMinTemplate: &LongSymbolMinTemplate !!js/function >
        () => "Int64.min"
    LongSymbolMinArgsTemplate: &LongSymbolMinArgsTemplate null
    LongSymbolZeroTemplate: &LongSymbolZeroTemplate !!js/function >
        () => "Int64(0)"
    LongSymbolZeroArgsTemplate: &LongSymbolZeroArgsTemplate null
    LongSymbolOneTemplate: &LongSymbolOneTemplate !!js/function >
        () => "Int64(1)"
    LongSymbolOneArgsTemplate: &LongSymbolOneArgsTemplate null
    LongSymbolNegOneTemplate: &LongSymbolNegOneTemplate !!js/function >
        () => "Int64(-1)"
    LongSymbolNegOneArgsTemplate: &LongSymbolNegOneArgsTemplate null
    LongSymbolFromBitsTemplate: &LongSymbolFromBitsTemplate null 
    LongSymbolFromBitsArgsTemplate: &LongSymbolFromBitsArgsTemplate !!js/function >
        (_, arg) => {
            return `Int64(${arg})`;
        }
    LongSymbolFromIntTemplate: &LongSymbolFromIntTemplate null
    LongSymbolFromIntArgsTemplate: &LongSymbolFromIntArgsTemplate null
    LongSymbolFromNumberTemplate: &LongSymbolFromNumberTemplate null
    LongSymbolFromNumberArgsTemplate: &LongSymbolFromNumberArgsTemplate null
    LongSymbolFromStringTemplate: &LongSymbolFromStringTemplate null
    LongSymbolFromStringArgsTemplate: &LongSymbolFromStringArgsTemplate null
    Decimal128SymbolFromStringTemplate: &Decimal128SymbolFromStringTemplate null
    Decimal128SymbolFromStringArgsTemplate: &Decimal128SymbolFromStringArgsTemplate null
    ObjectIdCreateFromHexStringTemplate: &ObjectIdCreateFromHexStringTemplate null
    ObjectIdCreateFromHexStringArgsTemplate: &ObjectIdCreateFromHexStringArgsTemplate null
    ObjectIdCreateFromTimeTemplate: &ObjectIdCreateFromTimeTemplate null
    ObjectIdCreateFromTimeArgsTemplate: &ObjectIdCreateFromTimeArgsTemplate null
    # non bson-specific would go here, but there aren't any atm.

    #############################################
    #                 Imports                   #
    #                                           #
    # Each type has a 'code' that is consistent #
    # between languages. The import templates   #
    # for each code generate the required       #
    # statement for each type. No args.         #
    #                                           #
    # The ImportTemplate collects everything    #
    # into one statement.                       #
    #                                           #
    #############################################
    ImportTemplate: &ImportTemplate !!js/function >
        (args) => {
            let merged = new Set(Object.values(args));
            return [...merged].sort().join('\n');
        }
    DriverImportTemplate: &DriverImportTemplate !!js/function >
        () => "import MongoSwift\nimport NIO"
    0ImportTemplate: &0ImportTemplate null
    1ImportTemplate: &1ImportTemplate null
    2ImportTemplate: &2ImportTemplate null
    3ImportTemplate: &3ImportTemplate null
    4ImportTemplate: &4ImportTemplate null
    5ImportTemplate: &5ImportTemplate null
    6ImportTemplate: &6ImportTemplate null
    7ImportTemplate: &7ImportTemplate null
    8ImportTemplate: &8ImportTemplate null
    9ImportTemplate: &9ImportTemplate null
    10ImportTemplate: &10ImportTemplate null
    11ImportTemplate: &11ImportTemplate null
    12ImportTemplate: &12ImportTemplate null
    100ImportTemplate: &100ImportTemplate null
    101ImportTemplate: &101ImportTemplate null
    102ImportTemplate: &102ImportTemplate null
    103ImportTemplate: &103ImportTemplate null
    104ImportTemplate: &104ImportTemplate null
    105ImportTemplate: &105ImportTemplate null
    106ImportTemplate: &106ImportTemplate null
    107ImportTemplate: &107ImportTemplate null
    108ImportTemplate: &108ImportTemplate null
    109ImportTemplate: &109ImportTemplate null
    110ImportTemplate: &110ImportTemplate null
    111ImportTemplate: &111ImportTemplate null
    112ImportTemplate: &112ImportTemplate null
    113ImportTemplate: &113ImportTemplate null
    114ImportTemplate: &114ImportTemplate null
    200ImportTemplate: &200ImportTemplate null
    201ImportTemplate: &201ImportTemplate null
    300ImportTemplate: &300ImportTemplate null
    301ImportTemplate: &301ImportTemplate null
    302ImportTemplate: &302ImportTemplate null
    303ImportTemplate: &303ImportTemplate null
    304ImportTemplate: &304ImportTemplate null
    305ImportTemplate: &305ImportTemplate null
    306ImportTemplate: &306ImportTemplate null
