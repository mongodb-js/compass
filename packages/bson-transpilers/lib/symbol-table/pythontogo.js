module.exports="SymbolTypes:\n    VAR: &var 0\n    CONSTRUCTOR: &constructor 1\n    FUNC: &func 2\n# Internal patterns to save typing\n__type: &__type\n    id: null\n    callable: *var\n    args: null\n    type: null\n    attr: {}\n    template: null\n    argsTemplate: null\n__func: &__func\n    callable: *func\n    args: []\n    attr: {}\n    template: null\n    argsTemplate: null\n\n#############################################\n#             Sample Templates              #\n#                                           #\n# The expected arguments are commented next #\n# to the template itself. Currently all are #\n# set to null, but to define a function     #\n# replace 'null' with '!!js/function > \\n   #\n# and a function defined below.             #\n#                                           #\n# See the other template files for examples #\n#                                           #\n#               Good to know:               #\n# lhs is left-hand-side of the expression   #\n# rhs is right-hand-side of the expression  #\n# All args are strings unless noted         #\n#    - arg? is boolean                      #\n#    - arg# is number                       #\n#                                           #\n#############################################\nTemplates:\n    ########\n    # Misc #\n    ########\n\n    # Filter out regex flags that have translations or are unsupported.\n    RegexFlags: &RegexFlags\n        i: 'i'\n        m: 'm'\n        u: 'u'\n        y: 'y'\n        g: 'g'\n    BSONRegexFlags: &BSONRegexFlags\n        i: 'i'\n        m: 'm'\n        x: 'x'\n        s: 's'\n        l: 'l'\n        u: 'u'\n\n    #############################################\n    #                  Syntax                   #\n    #                                           #\n    # Templates for language syntax expressions #\n    #                                           #\n    #############################################\n\n    DriverTemplate: &DriverTemplate !!js/function >\n        (spec) => {\n            const options = spec.options;\n            const uri = spec.options.uri\n            const filter = spec.filter || {};\n            delete spec.options;\n            delete spec.filter;\n\n            const indent = (depth) => '  '.repeat(depth)\n\n            const comment = []\n                .concat('// Requires the MongoDB Go Driver')\n                .concat('// https://go.mongodb.org/mongo-driver')\n                .join('\\n');\n\n            const connect = []\n                .concat('ctx := context.TODO()')\n                .concat(this.declarations.length() > 0 ? `\\n${this.declarations.toString()}\\n` : '')\n                .concat('// Set client options')\n                .concat(`clientOptions := options.Client().ApplyURI(\"${uri}\")`)\n                .concat('')\n                .concat('// Connect to MongoDB')\n                .concat('client, err := mongo.Connect(ctx, clientOptions)')\n                .concat('if err != nil {')\n                .concat('  log.Fatal(err)')\n                .concat('}')\n                .concat('defer func() {')\n                .concat('  if err := client.Disconnect(ctx); err != nil {')\n                .concat('    log.Fatal(err)')\n                .concat('  }')\n                .concat('}()')\n                .join('\\n');\n\n            const coll = []\n                .concat(`coll := client.Database(\"${options.database}\").Collection(\"${options.collection}\")`)\n                .join('\\n');\n\n            if ('aggregation' in spec) {\n                return []\n                    .concat(comment)\n                    .concat(connect)\n                    .concat('')\n                    .concat('// Open an aggregation cursor')\n                    .concat(`${coll}`)\n                    .concat(`_, err = coll.Aggregate(ctx, ${spec.aggregation})`)\n                    .concat('if err != nil {')\n                    .concat('  log.Fatal(err)')\n                    .concat('}')\n                    .join('\\n');\n            }\n\n            const findOptions = []\n            if (spec.project)\n                findOptions.push(`options.Find().SetProjection(${spec.project})`);\n            if (spec.sort)\n                findOptions.push(`options.Find().SetSort(${spec.sort})`);\n\n            const optsStr = findOptions.length > 0 ? `,\\n${indent(1)}${findOptions.join(`,\\n${indent(1)}`)}` : ''\n\n            return []\n                .concat(comment)\n                .concat(connect)\n                .concat('')\n                .concat('// Find data')\n                .concat(`${coll}`)\n                .concat(`_, err = coll.Find(ctx, ${filter}${optsStr})`)\n                .concat('if err != nil {')\n                .concat('  log.Fatal(err)')\n                .concat('}')\n                .join('\\n');\n        }\n    EqualitySyntaxTemplate: &EqualitySyntaxTemplate !!js/function >\n        (lhs, op, rhs) => {\n            if (op.includes('!') || op.includes('not')) {\n                return `${lhs} != ${rhs}`;\n            }\n            else if (op === '==' || op === '===' || op === 'is') {\n                return `${lhs} == ${rhs}`;\n            }\n            return `${lhs} ${op} ${rhs}`;\n        }\n    InSyntaxTemplate: &InSyntaxTemplate !!js/function >\n        (lhs, op, rhs) => {\n            this.declarations.addFunc([]\n                .concat(`var contains = func(elems bson.A, v interface{}) bool {`)\n                .concat('  for _, s := range elems {')\n                .concat('    if v == s {')\n                .concat('      return true')\n                .concat('    }')\n                .concat('  }')\n                .concat('  return false')\n                .concat('}')\n                .join('\\n'));\n            let prefix = '';\n            if (op.includes('!') || op.includes('not'))\n                prefix = '!';\n            return `${prefix}contains(${rhs}, ${lhs})`;\n        }\n    AndSyntaxTemplate: &AndSyntaxTemplate !!js/function >\n        (args) => args.join(' && ')\n    OrSyntaxTemplate: &OrSyntaxTemplate !!js/function >\n        (args) => args.join(' || ')\n    NotSyntaxTemplate: &NotSyntaxTemplate !!js/function >\n        (arg) => `!${arg}`\n    UnarySyntaxTemplate: &UnarySyntaxTemplate !!js/function >\n        (op, val) => {\n            switch(op) {\n                case '+':\n                    return val;\n                case '~':\n                    return `!${val}`;\n                default:\n                    return `${op}${val}`;\n            }\n            return `${op}${val}`;\n        }\n    BinarySyntaxTemplate: &BinarySyntaxTemplate !!js/function >\n        (args) => {\n            return args.reduce((s, op, i, arr) => {\n                if (i % 2 === 0) {\n                    return s;\n                }\n                const rhs = arr[i + 1];\n                switch(op) {\n                    case '//':\n                        return `${s} / ${rhs}`\n                    case '**':\n                        return `math.Pow(${s}, ${rhs})`\n                    default:\n                        return `${s} ${op} ${rhs}`;\n                }\n            }, args[0]);\n        }\n    ParensSyntaxTemplate: &ParensSyntaxTemplate null\n    EosTemplate: &EosSyntaxTemplate null # No args. End-of-line\n    EofTemplate: &EofSyntaxTemplate null # No args. End-of-file\n    FloorDivTemplate: &FloorDivSyntaxTemplate null # Args: lhs, rhs\n    PowerTemplate: &PowerSyntaxTemplate null # Args: lhs, rhs\n    NewTemplate: &NewSyntaxTemplate null # Args: expression, skip?, code# [to check if meant to be skipped]\n\n    #############################################\n    #               Literal Types               #\n    #                                           #\n    # Templates for literal type instance. Most #\n    # get passed the literal itself as an arg.  #\n    #                                           #\n    #############################################\n    StringTypeTemplate: &StringTypeTemplate !!js/function >\n        (str) => {\n            // Double quote stringify\n            const singleQuoted = str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'';\n            const doubleQuoted = str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"';\n            if (singleQuoted || doubleQuoted)\n                str = str.substr(1, str.length - 2);\n            return `\"${str.replace(/\\\\([\\s\\S])|(\")/g, '\\\\$1$2')}\"`;\n        }\n    RegexTypeTemplate: &RegexTypeTemplate !!js/function >\n        (pattern, flags) => {\n            // Wrap string in double quotes\n            const doubleStringify = (str) => {\n                const singleQuoted = str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'';\n                const doubleQuoted = str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"';\n                if (singleQuoted || doubleQuoted)\n                    str = str.substr(1, str.length - 2);\n                return `\"${str.replace(/\\\\([\\s\\S])|(\")/g, '\\\\$1$2')}\"`;\n            }\n\n            const structParts = [];\n            structParts.push(`Pattern: ${doubleStringify(pattern)}`);\n            if (flags)\n                structParts.push(`Options: ${doubleStringify(flags)}`);\n            return `primitive.Regex{${structParts.join(\", \")}}`;\n        }\n    BoolTypeTemplate: &BoolTypeTemplate !!js/function >\n        (literal) => literal.toLowerCase()\n    IntegerTypeTemplate: &IntegerTypeTemplate null # args: literal, argType (i.e. '_string', '_decimal' etc)\n    DecimalTypeTemplate: &DecimalTypeTemplate null # args: literal, argType\n    LongBasicTypeTemplate: &LongBasicTypeTemplate null # args: literal, argType\n    HexTypeTemplate: &HexTypeTemplate null # args: literal, argType\n    OctalTypeTemplate: &OctalTypeTemplate null # args: literal, argType\n    NumericTypeTemplate: &NumericTypeTemplate null # args: literal, argType\n    ArrayTypeTemplate: &ArrayTypeTemplate !!js/function >\n        (literal, depth) => {\n            depth++;\n            const indent = '\\n' + '    '.repeat(depth);\n            const closingIndent = '\\n' + '    '.repeat(depth - 1);\n            if (literal === '')\n              return 'bson.A{}';\n            return `bson.A{${literal}${closingIndent}}`;\n        }\n    ArrayTypeArgsTemplate: &ArrayTypeArgsTemplate !!js/function >\n        (arg, depth, last) => {\n            depth++;\n            const indent = '\\n' + '    '.repeat(depth);\n            return `${indent}${arg},`;\n        }\n    NullTypeTemplate: &NullTypeTemplate !!js/function >\n        () => 'primitive.Null{}'\n    UndefinedTypeTemplate: &UndefinedTypeTemplate !!js/function >\n        () => 'primitive.Undefined{}'\n    ObjectTypeTemplate: &ObjectTypeTemplate !!js/function >\n        (literal) =>  `bson.D{${literal}}`\n    ObjectTypeArgsTemplate: &ObjectTypeArgsTemplate !!js/function >\n        (args, depth) => {\n            // If there are no args, then there is nothing for us to format\n            if (args.length === 0)\n                return '';\n\n            depth++;\n            const indent = '\\n' + '    '.repeat(depth);\n            const closingIndent = '\\n' + '    '.repeat(depth - 1);\n\n            // Indent every line of a string\n            const indentBlock = (string, count = 1, options = {}) => {\n                const {\n                    indent = '    ',\n                    includeEmptyLines = false\n                } = options;\n\n                const regex = includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n                return string.replace(regex, indent.repeat(count));\n            }\n\n            // Wrap string in double quotes\n            const doubleStringify = (str) => {\n                const singleQuoted = str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'';\n                const doubleQuoted = str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"';\n                if (singleQuoted || doubleQuoted)\n                    str = str.substr(1, str.length - 2);\n                return `\"${str.replace(/\\\\([\\s\\S])|(\")/g, '\\\\$1$2')}\"`;\n            }\n\n            // Check if a string is multiple lines i.e. has a break point\n            const isMultiline = (element) => /\\r|\\n/.exec(element)\n\n            // Format element by go type\n            const fmt = (element) => {\n                const hash = { multiline: isMultiline(element) };\n                const typeFormatters = {\n                    'bson.A':   (el, hash) => isMultiline(el) ? indentBlock(`${indent}${el},${indent}`) : ` ${el}`,\n                    'bson.D':   (el, hash) => isMultiline(el) ? indentBlock(`${indent}${el},${indent}`) : ` ${el}`,\n                    default:    (el, hash) => isMultiline(el) ? el : ` ${el}`\n                };\n                hash.el = typeFormatters.default(element);\n                for (const type in typeFormatters)\n                    if (element.startsWith(type)) {\n                        hash.el = typeFormatters[type](element);\n                        break;\n                    }\n                return hash;\n            }\n\n            // Get the {key, value} pair for the bson.D object\n            const getPairs = (args, sep = `,${indent}`) => {\n                const hash = { multiline: false }\n                hash.el = args.map((pair) => {\n                    const fmtPair = fmt(pair[1])\n                    if (!hash.multiline && fmtPair.multiline)\n                        hash.multiline = true\n                    return `{${doubleStringify(pair[0])},${fmtPair.el}}`\n                }).join(sep)\n                return hash\n            }\n\n            const pairs = getPairs(args);\n            const singleLine = args.length <= 1 && !pairs.multiline;\n            const prefix = singleLine ? '' : indent;\n            const suffix = singleLine ? '' : ',' + closingIndent;\n            return `${prefix}${pairs.el}${suffix}`;\n        }\n\n    #############################################\n    #               Symbols                     #\n    #                                           #\n    # Templates for symbols, can be either      #\n    # functions or variables.                   #\n    #                                           #\n    # The *SymbolTemplates return names and     #\n    # usually don't take any arguments. The     #\n    # *SymbolArgsTemplates are invoked for func #\n    # calls. The first argument is always the   #\n    # lhs, i.e. the symbol returned from the    #\n    # corresponding SymbolTemplate. The rest of #\n    # the arguments are the processed arguments #\n    # passed to the original function.          #\n    #                                           #\n    #############################################\n    CodeSymbolTemplate: &CodeSymbolTemplate !!js/function >\n        () => 'primitive.CodeWithScope'\n    CodeSymbolArgsTemplate: &CodeSymbolArgsTemplate !!js/function >\n        (_, code, scope) => {\n            if (code === undefined)\n                return `{}`;\n\n            if (scope !== undefined)\n                scope = `Scope: ${scope}`;\n\n            const singleQuoted = code.charAt(0) === '\\'' && code.charAt(code.length - 1) === '\\'';\n            const doubleQuoted = code.charAt(0) === '\"' && code.charAt(code.length - 1) === '\"';\n            if (singleQuoted || doubleQuoted)\n                code = code.substr(1, code.length - 2);\n\n            code = `Code: primitive.JavaScript(\"${code.replace(/\\\\([\\s\\S])|(\")/g, '\\\\$1$2')}\")`;\n            return (scope === undefined) ? `{${code}}` : `{${code}, ${scope}}`;\n        }\n    ObjectIdSymbolTemplate: &ObjectIdSymbolTemplate !!js/function >\n        () => ''\n    ObjectIdSymbolArgsTemplate: &ObjectIdSymbolArgsTemplate !!js/function >\n        (_, arg) => {\n            if (arg === undefined || arg === '')\n                return 'primitive.NewObjectID()';\n\n            // Double quote stringify\n            const singleQuoted = arg.charAt(0) === '\\'' && arg.charAt(arg.length - 1) === '\\'';\n            const doubleQuoted = arg.charAt(0) === '\"' && arg.charAt(arg.length - 1) === '\"';\n            if (singleQuoted || doubleQuoted)\n                arg = arg.substr(1, arg.length - 2);\n            arg = `\"${arg.replace(/\\\\([\\s\\S])|(\")/g, '\\\\$1$2')}\"`;\n            this.declarations.addFunc([]\n                .concat('var objectIDFromHex = func(hex string) primitive.ObjectID {')\n                .concat(`  objectID, err := primitive.ObjectIDFromHex(hex)`)\n                .concat('  if err != nil {')\n                .concat('    log.Fatal(err)')\n                .concat('  }')\n                .concat('  return objectID')\n                .concat('}')\n                .join('\\n'));\n            return `objectIDFromHex(${arg})`\n        }\n    BinarySymbolTemplate: &BinarySymbolTemplate null\n    BinarySymbolArgsTemplate: &BinarySymbolArgsTemplate null\n    BinarySymbolSubtypeDefaultTemplate: &BinarySymbolSubtypeDefaultTemplate null\n    BinarySymbolSubtypeFunctionTemplate: &BinarySymbolSubtypeFunctionTemplate null\n    BinarySymbolSubtypeByteArrayTemplate: &BinarySymbolSubtypeByteArrayTemplate null\n    BinarySymbolSubtypeUuidOldTemplate: &BinarySymbolSubtypeUuidOldTemplate null\n    BinarySymbolSubtypeUuidTemplate: &BinarySymbolSubtypeUuidTemplate null\n    BinarySymbolSubtypeMd5Template: &BinarySymbolSubtypeMd5Template null\n    BinarySymbolSubtypeUserDefinedTemplate: &BinarySymbolSubtypeUserDefinedTemplate null\n    DBRefSymbolTemplate: &DBRefSymbolTemplate null # No args\n    DBRefSymbolArgsTemplate: &DBRefSymbolArgsTemplate null\n    DoubleSymbolTemplate: &DoubleSymbolTemplate !!js/function >\n        () => ''\n    DoubleSymbolArgsTemplate: &DoubleSymbolArgsTemplate !!js/function >\n        (lhs, arg, type) => {\n            if (!arg)\n                arg = 0;\n            switch(type) {\n                case '_string':\n                    this.declarations.addFunc([]\n                        .concat('var parseFloat64 = func(str string) float64 {')\n                        .concat('  f64, err := strconv.ParseFloat(str, 64)')\n                        .concat('  if err != nil {')\n                        .concat('    log.Fatal(err)')\n                        .concat('  }')\n                        .concat('  return f64')\n                        .concat('}')\n                        .join('\\n'));\n                    return `parseFloat64(${arg})`\n                default:\n                    return `float64(${arg})`;\n            }\n        }\n    Int32SymbolTemplate: &Int32SymbolTemplate !!js/function >\n        () => ''\n    Int32SymbolArgsTemplate: &Int32SymbolArgsTemplate !!js/function >\n        (lhs, arg, type) => {\n            if (!arg)\n                arg = 0\n            switch(type) {\n                case '_string':\n                    this.declarations.addFunc([]\n                        .concat('var parseInt32 = func(str string) int32 {')\n                        .concat('i64, err := strconv.ParseInt(str, 10, 32)')\n                        .concat('  if err != nil {')\n                        .concat('    log.Fatal(err)')\n                        .concat('  }')\n                        .concat('  return int32(i64)')\n                        .concat('}')\n                        .join('\\n'));\n                    return `parseInt32(${arg})`;\n                default:\n                    return `int32(${arg})`;\n            }\n        }\n    LongSymbolTemplate: &LongSymbolTemplate !!js/function >\n        () => ''\n    LongSymbolArgsTemplate: &LongSymbolArgsTemplate !!js/function >\n        (lhs, arg, type) => {\n            if (!arg)\n                arg = 0\n            switch(type) {\n                case '_string':\n                    this.declarations.addFunc([]\n                        .concat('var parseInt = func(str string) int64 {')\n                        .concat('  i64, err := strconv.ParseInt(str, 10, 64)')\n                        .concat('  if err != nil {')\n                        .concat('    log.Fatal(err)')\n                        .concat('  }')\n                        .concat('  return i64')\n                        .concat('}')\n                        .join('\\n'));\n                    return `parseInt64(${arg})`;\n                default:\n                    return `int64(${arg})`;\n            }\n        }\n    RegExpSymbolTemplate: &RegExpSymbolTemplate !!js/function >\n        () => 'regex'\n    RegExpSymbolArgsTemplate: &RegExpSymbolArgsTemplate null # Args: lhs, pattern, flags\n    SymbolSymbolTemplate: &SymbolSymbolTemplate !!js/function >\n        () => 'primitive.Symbol'\n    SymbolSymbolArgsTemplate: &SymbolSymbolArgsTemplate null\n    BSONRegExpSymbolTemplate: &BSONRegExpSymbolTemplate !!js/function >\n        () => 'primitive.Regex'\n    BSONRegExpSymbolArgsTemplate: &BSONRegExpSymbolArgsTemplate !!js/function >\n        (_, pattern, flags) => {\n            // Wrap string in double quotes\n            const doubleStringify = (str) => {\n                const singleQuoted = str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'';\n                const doubleQuoted = str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"';\n                if (singleQuoted || doubleQuoted)\n                    str = str.substr(1, str.length - 2);\n                return `\"${str.replace(/\\\\([\\s\\S])|(\")/g, '\\\\$1$2')}\"`;\n            }\n\n            const structParts = [];\n            structParts.push(`Pattern: ${doubleStringify(pattern)}`);\n            if (flags)\n                structParts.push(`Options: ${doubleStringify(flags)}`);\n            return `(${structParts.join(\", \")})`;\n        }\n    Decimal128SymbolTemplate: &Decimal128SymbolTemplate !!js/function >\n        () => ''\n    Decimal128SymbolArgsTemplate: &Decimal128SymbolArgsTemplate !!js/function >\n        (_, arg) => {\n            if (!arg)\n                arg = '\"0\"';\n\n            // Double quote stringify\n            const singleQuoted = arg.charAt(0) === '\\'' && arg.charAt(arg.length - 1) === '\\'';\n            const doubleQuoted = arg.charAt(0) === '\"' && arg.charAt(arg.length - 1) === '\"';\n            if (singleQuoted || doubleQuoted)\n                arg = arg.substr(1, arg.length - 2);\n            arg = `\"${arg.replace(/\\\\([\\s\\S])|(\")/g, '\\\\$1$2')}\"`;\n\n            this.declarations.addFunc([]\n                .concat('var parseDecimal128 = func(str string) primitive.Decimal128 {')\n                .concat('  d128, err := primitive.ParseDecimal128(str)')\n                .concat('  if err != nil {')\n                .concat('    log.Fatal(err)')\n                .concat('  }')\n                .concat('  return d128')\n                .concat('}')\n                .join('\\n'));\n            return `parseDecimal128(${arg})`;\n        }\n    MinKeySymbolTemplate: &MinKeySymbolTemplate !!js/function >\n        () => 'primitive.MinKey'\n    MinKeySymbolArgsTemplate: &MinKeySymbolArgsTemplate !!js/function >\n        () => '{}'\n    MaxKeySymbolTemplate: &MaxKeySymbolTemplate !!js/function >\n        () => 'primitive.MaxKey'\n    MaxKeySymbolArgsTemplate: &MaxKeySymbolArgsTemplate !!js/function >\n        () => '{}'\n    TimestampSymbolTemplate: &TimestampSymbolTemplate !!js/function >\n        () => 'primitive.Timestamp'\n    TimestampSymbolArgsTemplate: &TimestampSymbolArgsTemplate !!js/function >\n        (lhs, low, high) => {\n            if (low === undefined) {\n                low = 0;\n                high = 0;\n            }\n            return `{T: ${low}, I: ${high}}`\n        }\n    # non bson-specific\n    NumberSymbolTemplate: &NumberSymbolTemplate !!js/function >\n        () => ''\n    NumberSymbolArgsTemplate: &NumberSymbolArgsTemplate !!js/function >\n        (lhs, arg, type) => {\n            arg = arg === undefined ? 0 : arg;\n\n            switch(type) {\n                case '_string':\n                    if (arg.indexOf('.') !== -1) {\n                        this.declarations.addFunc([]\n                            .concat('var parseFloat64 = func(str string) float64 {')\n                            .concat('  f64, err := strconv.ParseFloat(str, 64)')\n                            .concat('  if err != nil {')\n                            .concat('    log.Fatal(err)')\n                            .concat('  }')\n                            .concat('  return f64')\n                            .concat('}')\n                            .join('\\n'));\n                        return `parseFloat64(${arg})`\n                    }\n                    this.declarations.addFunc([]\n                        .concat('var parseInt = func(str string) int64 {')\n                        .concat('  i64, err := strconv.ParseInt(str, 10, 64)')\n                        .concat('  if err != nil {')\n                        .concat('    log.Fatal(err)')\n                        .concat('  }')\n                        .concat('  return i64')\n                        .concat('}')\n                        .join('\\n'));\n                    return `parseInt64(${arg})`;\n                default:\n                    return `${arg}`\n            }\n        }\n    DateSymbolTemplate: &DateSymbolTemplate !!js/function >\n        () => 'time.Date'\n    DateSymbolArgsTemplate: &DateSymbolArgsTemplate !!js/function >\n        (lhs, date, isString) => {\n            if (date === null)\n                return `time.Now()`;\n\n            const dateStr = [\n                date.getUTCFullYear(),\n                date.getUTCMonth() + 1,\n                date.getUTCDate(),\n                date.getUTCHours(),\n                date.getUTCMinutes(),\n                date.getUTCSeconds(),\n                '0',\n                'time.UTC'\n            ].join(', ');\n\n            return `${lhs}(${dateStr})`\n        }\n\n    #############################################\n    #         Object Attributes/Methods         #\n    #                                           #\n    # These're variables or functions called on #\n    # instantiated objects. For example,        #\n    # ObjectId().isValid() or Timestamp().t     #\n    #                                           #\n    # They follow the same pattern with the\n    # *Template/*ArgsTemplates: usually no args #\n    # to the Template and lhs plus any original #\n    # arguments to the ArgsTemplate.            #\n    #                                           #\n    #############################################\n    CodeCodeTemplate: &CodeCodeTemplate !!js/function >\n        (lhs) => `${lhs}.Code`\n    CodeCodeArgsTemplate: &CodeCodeArgsTemplate null\n    CodeScopeTemplate: &CodeScopeTemplate !!js/function >\n        (lhs) => lhs\n    CodeScopeArgsTemplate: &CodeScopeArgsTemplate null\n    ObjectIdToStringTemplate: &ObjectIdToStringTemplate !!js/function >\n        (lhs) => `${lhs}.String()`\n    ObjectIdToStringArgsTemplate: &ObjectIdToStringArgsTemplate !!js/function >\n        () => ''\n    ObjectIdEqualsTemplate: &ObjectIdEqualsTemplate !!js/function >\n        () => ''\n    ObjectIdEqualsArgsTemplate: &ObjectIdEqualsArgsTemplate !!js/function >\n        (arg1, arg2) => `${arg1} == ${arg2}`\n    ObjectIdGetTimestampTemplate: &ObjectIdGetTimestampTemplate !!js/function >\n        (lhs) => `${lhs}.Timestamp()`\n    ObjectIdGetTimestampArgsTemplate: &ObjectIdGetTimestampArgsTemplate !!js/function >\n        () => ''\n    ObjectIdIsValidTemplate: &ObjectIdIsValidTemplate !!js/function >\n        () => `primitive.IsValidObjectID`\n    ObjectIdIsValidArgsTemplate: &ObjectIdIsValidArgsTemplate null\n    BinaryValueTemplate: &BinaryValueTemplate null\n    BinaryValueArgsTemplate: &BinaryValueArgsTemplate null\n    BinaryLengthTemplate: &BinaryLengthTemplate null\n    BinaryLengthArgsTemplate: &BinaryLengthArgsTemplate null\n    BinaryToStringTemplate: &BinaryToStringTemplate null\n    BinaryToStringArgsTemplate: &BinaryToStringArgsTemplate null\n    BinarySubtypeTemplate: &BinarySubtypeTemplate null\n    BinarySubtypeArgsTemplate: &BinarySubtypeArgsTemplate null\n    DBRefGetDBTemplate: &DBRefGetDBTemplate null\n    DBRefGetCollectionTemplate: &DBRefGetCollectionTemplate null\n    DBRefGetIdTemplate: &DBRefGetIdTemplate null\n    DBRefGetDBArgsTemplate: &DBRefGetDBArgsTemplate null\n    DBRefGetCollectionArgsTemplate: &DBRefGetCollectionArgsTemplate null\n    DBRefGetIdArgsTemplate: &DBRefGetIdArgsTemplate null\n    DBRefToStringTemplate: &DBRefToStringTemplate null\n    DBRefToStringArgsTemplate: &DBRefToStringArgsTemplate null\n    DoubleValueOfTemplate: &DoubleValueOfTemplate null\n    DoubleValueOfArgsTemplate: &DoubleValueOfArgsTemplate null\n    Int32ValueOfTemplate: &Int32ValueOfTemplate null\n    Int32ValueOfArgsTemplate: &Int32ValueOfArgsTemplate null\n    Int32ToStringTemplate: &Int32ToStringTemplate null\n    Int32ToStringArgsTemplate: &Int32ToStringArgsTemplate null\n    LongEqualsTemplate: &LongEqualsTemplate !!js/function >\n        (lhs) => `${lhs} == `\n    LongEqualsArgsTemplate: &LongEqualsArgsTemplate !!js/function >\n        (_, arg) => arg\n    LongToStringTemplate: &LongToStringTemplate !!js/function >\n        (lhs) => `strconv.Itoa(${lhs})`\n    LongToStringArgsTemplate: &LongToStringArgsTemplate !!js/function >\n        () => ''\n    LongToIntTemplate: &LongToIntTemplate !!js/function >\n        (lhs) => `int(${lhs})`\n    LongToIntArgsTemplate: &LongToIntArgsTemplate !!js/function >\n        () => ''\n    LongValueOfTemplate: &LongValueOfTemplate null\n    LongValueOfArgsTemplate: &LongValueOfArgsTemplate null\n    LongToNumberTemplate: &LongToNumberTemplate !!js/function >\n        (lhs) => `float64(${lhs})`\n    LongToNumberArgsTemplate: &LongToNumberArgsTemplate !!js/function >\n        (arg) => ''\n    LongAddTemplate: &LongAddTemplate !!js/function >\n        (lhs) => `${lhs} + `\n    LongAddArgsTemplate: &LongAddArgsTemplate !!js/function >\n        (_, args) => args\n    LongSubtractTemplate: &LongSubtractTemplate !!js/function >\n        (lhs) => `${lhs} - `\n    LongSubtractArgsTemplate: &LongSubtractArgsTemplate !!js/function >\n        (_, arg) => arg\n    LongMultiplyTemplate: &LongMultiplyTemplate !!js/function >\n        (lhs) => `${lhs} * `\n    LongMultiplyArgsTemplate: &LongMultiplyArgsTemplate !!js/function >\n        (_, arg) => arg\n    LongDivTemplate: &LongDivTemplate !!js/function >\n        (lhs) => `${lhs} / `\n    LongDivArgsTemplate: &LongDivArgsTemplate !!js/function >\n        (_, arg) => arg\n    LongModuloTemplate: &LongModuloTemplate !!js/function >\n        (lhs) => `${lhs} % `\n    LongModuloArgsTemplate: &LongModuloArgsTemplate !!js/function >\n        (_, arg) => arg\n    LongAndTemplate: &LongAndTemplate !!js/function >\n        (lhs) => `${lhs} & `\n    LongAndArgsTemplate: &LongAndArgsTemplate !!js/function >\n        (_, arg) => arg\n    LongOrTemplate: &LongOrTemplate !!js/function >\n        (lhs) => `${lhs} | `\n    LongOrArgsTemplate: &LongOrArgsTemplate !!js/function >\n        (_, arg) => arg\n    LongXorTemplate: &LongXorTemplate !!js/function >\n        (lhs) => `${lhs} ^ `\n    LongXorArgsTemplate: &LongXorArgsTemplate !!js/function >\n        (_, arg) => arg\n    LongShiftLeftTemplate: &LongShiftLeftTemplate !!js/function >\n        (lhs) => `${lhs} << `\n    LongShiftLeftArgsTemplate: &LongShiftLeftArgsTemplate !!js/function >\n        (_, rhs) => rhs\n    LongShiftRightTemplate: &LongShiftRightTemplate !!js/function >\n        (lhs) => `${lhs} >> `\n    LongShiftRightArgsTemplate: &LongShiftRightArgsTemplate !!js/function >\n        (_, rhs) => rhs\n    LongCompareTemplate: &LongCompareTemplate !!js/function >\n        (lhs) => `${lhs} - `\n    LongCompareArgsTemplate: &LongCompareArgsTemplate !!js/function >\n        (_, rhs) => rhs\n    LongIsOddTemplate: &LongIsOddTemplate !!js/function >\n        (arg) => `${arg} % 2 == 1`\n    LongIsOddArgsTemplate: &LongIsOddArgsTemplate !!js/function >\n        () => ''\n    LongIsZeroTemplate: &LongIsZeroTemplate !!js/function >\n        (arg) => `${arg} == int64(0)`\n    LongIsZeroArgsTemplate: &LongIsZeroArgsTemplate !!js/function >\n        () => ''\n    LongIsNegativeTemplate: &LongIsNegativeTemplate !!js/function >\n        (arg) => `${arg} < int64(0)`\n    LongIsNegativeArgsTemplate: &LongIsNegativeArgsTemplate !!js/function >\n        () => ''\n    LongNegateTemplate: &LongNegateTemplate !!js/function >\n        () => '-'\n    LongNegateArgsTemplate: &LongNegateArgsTemplate !!js/function >\n        (lhs) => lhs\n    LongNotTemplate: &LongNotTemplate !!js/function >\n        () => '^'\n    LongNotArgsTemplate: &LongNotArgsTemplate !!js/function >\n        (lhs) => lhs\n    LongNotEqualsTemplate: &LongNotEqualsTemplate !!js/function >\n        (lhs) => `${lhs} != `\n    LongNotEqualsArgsTemplate: &LongNotEqualsArgsTemplate !!js/function >\n        (_, rhs) => rhs\n    LongGreaterThanTemplate: &LongGreaterThanTemplate !!js/function >\n        (lhs) => `${lhs} > `\n    LongGreaterThanArgsTemplate: &LongGreaterThanArgsTemplate !!js/function >\n        (_, rhs) => rhs\n    LongGreaterThanOrEqualTemplate: &LongGreaterThanOrEqualTemplate !!js/function >\n        (lhs) => `${lhs} >= `\n    LongGreaterThanOrEqualArgsTemplate: &LongGreaterThanOrEqualArgsTemplate !!js/function >\n        (_, rhs) => rhs\n    LongLessThanTemplate: &LongLessThanTemplate !!js/function >\n        (lhs) => `${lhs} < `\n    LongLessThanArgsTemplate: &LongLessThanArgsTemplate !!js/function >\n        (_, rhs) => rhs\n    LongLessThanOrEqualTemplate: &LongLessThanOrEqualTemplate !!js/function >\n        (lhs) => `${lhs} <= `\n    LongLessThanOrEqualArgsTemplate: &LongLessThanOrEqualArgsTemplate !!js/function >\n        (_, rhs) => rhs\n    LongFloatApproxTemplate: &LongFloatApproxTemplate !!js/function >\n        (arg) => `float64(${arg})`\n    LongTopTemplate: &LongTopTemplate !!js/function >\n        (arg) => `${arg} >> 32`\n    LongBottomTemplate: &LongBottomTemplate !!js/function >\n        (arg) => `${arg} & 0x0000ffff`\n    TimestampToStringTemplate: &TimestampToStringTemplate !!js/function >\n        (lhs) => `time.Unix(${lhs}.T, 0).String`\n    TimestampToStringArgsTemplate: &TimestampToStringArgsTemplate null\n        () => '()'\n    TimestampEqualsTemplate: &TimestampEqualsTemplate !!js/function >\n        (lhs) => `${lhs}.Equal`\n    TimestampEqualsArgsTemplate: &TimestampEqualsArgsTemplate !!js/function >\n        (_, rhs) => `(${rhs})`\n    TimestampGetLowBitsTemplate: &TimestampGetLowBitsTemplate !!js/function >\n        (lhs) => `${lhs}.T`\n    TimestampGetLowBitsArgsTemplate: &TimestampGetLowBitsArgsTemplate !!js/function >\n        () => ''\n    TimestampGetHighBitsTemplate: &TimestampGetHighBitsTemplate !!js/function >\n        (lhs) => `${lhs}.I`\n    TimestampGetHighBitsArgsTemplate: &TimestampGetHighBitsArgsTemplate !!js/function >\n        () => ''\n    TimestampTTemplate: &TimestampTTemplate !!js/function >\n        (lhs) => `${lhs}.T`\n    TimestampITemplate: &TimestampITemplate !!js/function >\n        (lhs) => `${lhs}.I`\n    TimestampAsDateTemplate: &TimestampAsDateTemplate !!js/function >\n        (lhs) => `time.Unix(${lhs}.T, 0)`\n    TimestampAsDateArgsTemplate: &TimestampAsDateArgsTemplate !!js/function >\n        () => ''\n    TimestampCompareTemplate: &TimestampCompareTemplate !!js/function >\n        () => 'primitive.CompareTimestamp'\n    TimestampCompareArgsTemplate: &TimestampCompareArgsTemplate !!js/function >\n        (lhs, rhs) => `(${lhs}, ${rhs})`\n    TimestampNotEqualsTemplate: &TimestampNotEqualsTemplate !!js/function >\n        (lhs) => `!${lhs}.Equal`\n    TimestampNotEqualsArgsTemplate: &TimestampNotEqualsArgsTemplate !!js/function >\n        (_, rhs) => `(${rhs})`\n    TimestampGreaterThanTemplate: &TimestampGreaterThanTemplate !!js/function >\n        () => ''\n    TimestampGreaterThanArgsTemplate: &TimestampGreaterThanArgsTemplate !!js/function >\n        (lhs, rhs) => `primitive.CompareTimestamp(${lhs}, ${rhs}) == 1`\n    TimestampGreaterThanOrEqualTemplate: &TimestampGreaterThanOrEqualTemplate !!js/function >\n        () => ''\n    TimestampGreaterThanOrEqualArgsTemplate: &TimestampGreaterThanOrEqualArgsTemplate !!js/function >\n        (arg1, arg2) => `primitive.CompareTimestamp(${arg1}, ${arg2}) >= 0`\n    TimestampLessThanTemplate: &TimestampLessThanTemplate !!js/function >\n        (lhs) => ''\n    TimestampLessThanArgsTemplate: &TimestampLessThanArgsTemplate !!js/function >\n        (lhs, rhs) => `primitive.CompareTimestamp(${lhs}, ${rhs}) == -1`\n    TimestampLessThanOrEqualTemplate: &TimestampLessThanOrEqualTemplate !!js/function >\n        () => ''\n    TimestampLessThanOrEqualArgsTemplate: &TimestampLessThanOrEqualArgsTemplate !!js/function >\n        (arg1, arg2) => `primitive.CompareTimestamp(${arg1}, ${arg2}) <= 0`\n    SymbolValueOfTemplate: &SymbolValueOfTemplate !!js/function >\n        () => ''\n    SymbolValueOfArgsTemplate: &SymbolValueOfArgsTemplate !!js/function >\n        (arg) => arg\n    SymbolInspectTemplate: &SymbolInspectTemplate !!js/function >\n        () => ''\n    SymbolInspectArgsTemplate: &SymbolInspectArgsTemplate !!js/function >\n        (arg) => arg\n    SymbolToStringTemplate: &SymbolToStringTemplate !!js/function >\n        () => ''\n    SymbolToStringArgsTemplate: &SymbolToStringArgsTemplate !!js/function >\n        (lhs) => `string(${lhs})`\n    Decimal128ToStringTemplate: &Decimal128ToStringTemplate !!js/function >\n        (lhs) => `${lhs}.String()`\n    Decimal128ToStringArgsTemplate: &Decimal128ToStringArgsTemplate !!js/function >\n        () => ''\n    # non bson-specific\n    DateSymbolNowTemplate: &DateSymbolNowTemplate !!js/function >\n        () => 'time.Now()'\n    DateSymbolNowArgsTemplate: &DateSymbolNowArgsTemplate !!js/function >\n        () => ''\n\n    #############################################\n    #         Symbol Attributes/Methods         #\n    #                                           #\n    # These're variables or functions called on #\n    # symbols. Also called bson-utils.          #\n    #                                           #\n    # They are basically the same thing as      #\n    # object attributes/methods, but need to be #\n    # distinguished since they are separate     #\n    # namespaces that happen to have the same   #\n    # name which is v confusing.                #\n    #                                           #\n    # For example, ObjectId().toString() is an  #\n    # object method, while ObjectId.fromString  #\n    # is a symbol attribute. These are two      #\n    # separate ObjectId related namespaces that #\n    # don't overlap.                            #\n    #                                           #\n    #############################################\n    LongSymbolMaxTemplate: &LongSymbolMaxTemplate !!js/function >\n        () => 'int(^uint(0) >> 1)'\n    LongSymbolMaxArgsTemplate: &LongSymbolMaxArgsTemplate null\n    LongSymbolMinTemplate: &LongSymbolMinTemplate !!js/function >\n        () => '-(1+int(^uint(0) >> 1))'\n    LongSymbolMinArgsTemplate: &LongSymbolMinArgsTemplate null\n    LongSymbolZeroTemplate: &LongSymbolZeroTemplate !!js/function >\n        () => 'int64(0)'\n    LongSymbolZeroArgsTemplate: &LongSymbolZeroArgsTemplate null\n    LongSymbolOneTemplate: &LongSymbolOneTemplate !!js/function >\n        () => 'int64(1)'\n    LongSymbolOneArgsTemplate: &LongSymbolOneArgsTemplate null\n    LongSymbolNegOneTemplate: &LongSymbolNegOneTemplate !!js/function >\n        () => 'int64(-1)'\n    LongSymbolNegOneArgsTemplate: &LongSymbolNegOneArgsTemplate null\n    LongSymbolFromBitsTemplate: &LongSymbolFromBitsTemplate !!js/function >\n        () => 'int64'\n    LongSymbolFromBitsArgsTemplate: &LongSymbolFromBitsArgsTemplate null\n    LongSymbolFromIntTemplate: &LongSymbolFromIntTemplate !!js/function >\n        () => 'int64'\n    LongSymbolFromIntArgsTemplate: &LongSymbolFromIntArgsTemplate null\n    LongSymbolFromNumberTemplate: &LongSymbolFromNumberTemplate !!js/function >\n        () => 'int64'\n    LongSymbolFromNumberArgsTemplate: &LongSymbolFromNumberArgsTemplate null\n    LongSymbolFromStringTemplate: &LongSymbolFromStringTemplate !!js/function >\n        () => ''\n    LongSymbolFromStringArgsTemplate: &LongSymbolFromStringArgsTemplate !!js/function >\n        (_, arg) => {\n            this.declarations.addFunc([]\n                .concat('var int64FromString = func(str string) int64 {')\n                .concat('  f64, err := strconv.Atoi(str)')\n                .concat('  if err != nil {')\n                .concat('    log.Fatal(err)')\n                .concat('  }')\n                .concat('  return f64')\n                .concat('}')\n                .join('\\n'));\n            return `int64FromString(${arg})`;\n        }\n    Decimal128SymbolFromStringTemplate: &Decimal128SymbolFromStringTemplate !!js/function >\n        () => ''\n    Decimal128SymbolFromStringArgsTemplate: &Decimal128SymbolFromStringArgsTemplate !!js/function >\n        (_, arg) => {\n            this.declarations.addFunc([]\n                .concat('var parseDecimal128 = func(str string) primitive.Decimal128 {')\n                .concat('  d128, err := primitive.ParseDecimal128(str)')\n                .concat('  if err != nil {')\n                .concat('    log.Fatal(err)')\n                .concat('  }')\n                .concat('  return d128')\n                .concat('}')\n                .join('\\n'));\n            return `parseDecimal128(${arg})`;\n        }\n    ObjectIdCreateFromHexStringTemplate: &ObjectIdCreateFromHexStringTemplate !!js/function >\n        () => ''\n    ObjectIdCreateFromHexStringArgsTemplate: &ObjectIdCreateFromHexStringArgsTemplate !!js/function >\n        (_, arg) => {\n            this.declarations.addFunc([]\n                .concat('var objectIDFromHex = func(hex string) primitive.ObjectID {')\n                .concat(`  objectID, err := primitive.ObjectIDFromHex(hex)`)\n                .concat('  if err != nil {')\n                .concat('    log.Fatal(err)')\n                .concat('  }')\n                .concat('  return objectID')\n                .concat('}')\n                .join('\\n'));\n            return `objectIDFromHex(${arg})`\n        }\n    ObjectIdCreateFromTimeTemplate: &ObjectIdCreateFromTimeTemplate !!js/function >\n        () => 'primitive.NewObjectIDFromTimestamp'\n    ObjectIdCreateFromTimeArgsTemplate: &ObjectIdCreateFromTimeArgsTemplate !!js/function >\n        (_, arg, isNumber) => isNumber ? `(time.Unix(${arg}, int64(0)))` : `(${arg})`\n    # non bson-specific would go here, but there aren't any atm.\n\n    #############################################\n    #                 Imports                   #\n    #                                           #\n    # Each type has a 'code' that is consistent #\n    # between languages. The import templates   #\n    # for each code generate the required       #\n    # statement for each type. No args.         #\n    #                                           #\n    # The ImportTemplate collects everything    #\n    # into one statement.                       #\n    #                                           #\n    #############################################\n    ImportTemplate: &ImportTemplate !!js/function >\n        (args) => {\n            const imports = Object.values(args).flat()\n            const driverImports = args.driver || [];\n            delete args['driver'];\n\n            const flattenedArgs = Array.from(new Set([...driverImports, ...imports])).sort();\n            const universal = [];\n            const all = universal\n                .concat(flattenedArgs)\n                .map((i) => `  \"${i}\"`);\n            return []\n                .concat('import (')\n                .concat(all.join('\\n'))\n                .concat(')')\n                .join('\\n');\n        }\n    DriverImportTemplate: &DriverImportTemplate !!js/function >\n        (args) => {\n            return [\n                    \"go.mongodb.org/mongo-driver/mongo\",\n                    \"go.mongodb.org/mongo-driver/mongo/options\",\n                    \"context\",\n                    \"log\"\n            ]\n        }\n    0ImportTemplate: &0ImportTemplate null\n    1ImportTemplate: &1ImportTemplate null\n    2ImportTemplate: &2ImportTemplate null\n    3ImportTemplate: &3ImportTemplate null\n    4ImportTemplate: &4ImportTemplate null\n    5ImportTemplate: &5ImportTemplate null\n    6ImportTemplate: &6ImportTemplate null\n    7ImportTemplate: &7ImportTemplate null\n    8ImportTemplate: &8ImportTemplate !!js/function >\n        (args) => ['go.mongodb.org/mongo-driver/bson/primitive']\n    9ImportTemplate: &9ImportTemplate null\n    10ImportTemplate: &10ImportTemplate !!js/function >\n        () => ['go.mongodb.org/mongo-driver/bson']\n    11ImportTemplate: &11ImportTemplate null\n    12ImportTemplate: &12ImportTemplate null\n    100ImportTemplate: &100ImportTemplate !!js/function >\n        (args) => ['go.mongodb.org/mongo-driver/bson/primitive']\n    101ImportTemplate: &101ImportTemplate !!js/function >\n        (args) => ['go.mongodb.org/mongo-driver/bson/primitive', 'log']\n    102ImportTemplate: &102ImportTemplate null\n    103ImportTemplate: &103ImportTemplate null\n    104ImportTemplate: &104ImportTemplate !!js/function >\n        (args) => ['log', 'strconv']\n    105ImportTemplate: &105ImportTemplate !!js/function >\n        (args) => ['log', 'strconv']\n    106ImportTemplate: &106ImportTemplate !!js/function >\n        (args) => ['log', 'strconv']\n    107ImportTemplate: &107ImportTemplate !!js/function >\n        (args) => ['go.mongodb.org/mongo-driver/bson/primitive']\n    108ImportTemplate: &108ImportTemplate !!js/function >\n        (args) => ['go.mongodb.org/mongo-driver/bson/primitive']\n    109ImportTemplate: &109ImportTemplate !!js/function >\n        (args) => ['go.mongodb.org/mongo-driver/bson/primitive']\n    110ImportTemplate: &110ImportTemplate !!js/function >\n        (args) => ['go.mongodb.org/mongo-driver/bson/primitive']\n    111ImportTemplate: &111ImportTemplate !!js/function >\n        (args) => ['go.mongodb.org/mongo-driver/bson/primitive']\n    112ImportTemplate: &112ImportTemplate !!js/function >\n        (args) => ['go.mongodb.org/mongo-driver/bson/primitive', 'log']\n    113ImportTemplate: &113ImportTemplate null\n    114ImportTemplate: &114ImportTemplate null\n    200ImportTemplate: &200ImportTemplate !!js/function >\n        (args) => ['time.Time']\n    201ImportTemplate: &201ImportTemplate null\n    300ImportTemplate: &300ImportTemplate null\n    301ImportTemplate: &301ImportTemplate null\n    302ImportTemplate: &302ImportTemplate null\n    303ImportTemplate: &303ImportTemplate null\n    304ImportTemplate: &304ImportTemplate null\n    305ImportTemplate: &305ImportTemplate null\n    306ImportTemplate: &306ImportTemplate null\n# Universal types\n# Everything inherits from StringType because we haven't implemented any of them.\nBasicTypes:\n    # Universal basic types\n    _bool: &BoolType\n        <<: *__type\n        id: \"_bool\"\n        code: 0\n        template: *BoolTypeTemplate\n    _integer: &IntegerType\n        <<: *__type\n        id: \"_integer\"\n        code: 1\n        template: *IntegerTypeTemplate\n    _long: &LongBasicType\n        <<: *__type\n        id: \"_long\"\n        code: 2\n        template: *LongBasicTypeTemplate\n    _decimal: &DecimalType\n        <<: *__type\n        id: \"_decimal\"\n        code: 3\n        template: *DecimalTypeTemplate\n    _hex: &HexType\n        <<: *__type\n        id: \"_hex\"\n        code: 4\n        template: *HexTypeTemplate\n    _octal: &OctalType\n        <<: *__type\n        id: \"_octal\"\n        code: 5\n        template: *OctalTypeTemplate\n    _numeric: &NumericType\n        <<: *__type\n        id: \"_numeric\"\n        code: 6\n        template: *NumericTypeTemplate\n    _string: &StringType\n        <<: *__type\n        id: \"_string\"\n        code: 7\n        template: *StringTypeTemplate\n    _regex: &RegexType\n        <<: *__type\n        id: \"_regex\"\n        code: 8\n        template: *RegexTypeTemplate\n    _array: &ArrayType\n        <<: *__type\n        id: \"_array\"\n        code: 9\n        template: *ArrayTypeTemplate\n        argsTemplate: *ArrayTypeArgsTemplate\n    _object: &ObjectType\n        <<: *__type\n        id: \"_object\"\n        code: 10\n        template: *ObjectTypeTemplate\n        argsTemplate: *ObjectTypeArgsTemplate\n    _null: &NullType\n        <<: *__type\n        id: \"_null\"\n        code: 11\n        template: *NullTypeTemplate\n    _undefined: &UndefinedType\n        <<: *__type\n        id: \"_undefined\"\n        code: 12\n        template: *UndefinedTypeTemplate\n\nSyntax:\n    equality:\n        template: *EqualitySyntaxTemplate\n    in:\n        template: *InSyntaxTemplate\n    and:\n        template: *AndSyntaxTemplate\n    or:\n        template: *OrSyntaxTemplate\n    not:\n        template: *NotSyntaxTemplate\n    unary:\n        template: *UnarySyntaxTemplate\n    binary:\n        template: *BinarySyntaxTemplate\n    parens:\n        template: *ParensSyntaxTemplate\n    eos:\n        template: *EosSyntaxTemplate\n    eof:\n        template: *EofSyntaxTemplate\n    # The new template takes in expr, and an optional skip argument and optional\n    # id argument. The skip argument is a boolean that if true then doesn't add\n    # new. The code argument is the symbol code being called. The template will check\n    # if it is an exception, i.e. a type that is a constructor but may not use new.\n    new:\n        template: *NewSyntaxTemplate\n    # The regex flags that change symbols between languages can be defined here.\n    # Flags that aren't defined can be left blank and will be ignored.\n    regexFlags: *RegexFlags\n    bsonRegexFlags: *BSONRegexFlags\n    driver: *DriverTemplate\nImports:\n    import:\n        template: *ImportTemplate\n    driver:\n        template: *DriverImportTemplate\n    0:\n        template: *0ImportTemplate\n    1:\n        template: *1ImportTemplate\n    2:\n        template: *2ImportTemplate\n    3:\n        template: *3ImportTemplate\n    4:\n        template: *4ImportTemplate\n    5:\n        template: *5ImportTemplate\n    6:\n        template: *6ImportTemplate\n    7:\n        template: *7ImportTemplate\n    8:\n        template: *8ImportTemplate\n    9:\n        template: *9ImportTemplate\n    10:\n        template: *10ImportTemplate\n    11:\n        template: *11ImportTemplate\n    12:\n        template: *12ImportTemplate\n    100:\n        template: *100ImportTemplate\n    101:\n        template: *101ImportTemplate\n    102:\n        template: *102ImportTemplate\n    103:\n        template: *103ImportTemplate\n    104:\n        template: *104ImportTemplate\n    105:\n        template: *105ImportTemplate\n    106:\n        template: *106ImportTemplate\n    107:\n        template: *107ImportTemplate\n    108:\n        template: *108ImportTemplate\n    109:\n        template: *109ImportTemplate\n    110:\n        template: *110ImportTemplate\n    111:\n        template: *111ImportTemplate\n    112:\n        template: *112ImportTemplate\n    113:\n        template: *113ImportTemplate\n    114:\n        template: *114ImportTemplate\n    200:\n        template: *200ImportTemplate\n    201:\n        template: *201ImportTemplate\n    300:\n        template: *300ImportTemplate\n    301:\n        template: *301ImportTemplate\n    302:\n        template: *302ImportTemplate\n    303:\n        template: *303ImportTemplate\n    304:\n        template: *304ImportTemplate\n    305:\n        template: *305ImportTemplate\n    306:\n        template: *306ImportTemplate\nNativeTypes:\n    Date: &DateType\n        <<: *__type\n        id: \"Date\"\n        code: 200\n        type: *ObjectType\n        attr: {} # TODO: no built-in date methods added yet\n    int: &intType\n        <<: *__type\n        id: \"int\"\n        code: 105\n        type: *IntegerType\n        attr: {}\n    float: &floatType\n        <<: *__type\n        id: \"float\"\n        code: 104\n        type: *IntegerType\n        attr: {}\nBsonTypes:\n    Code: &CodeType\n        <<: *__type\n        id: \"Code\"\n        code: 100\n        type: *ObjectType\n        attr:\n            scope:\n                callable: *var\n                args: null\n                attr: null\n                id: \"scope\"\n                type: *ObjectType\n                template: *CodeScopeTemplate\n                argsTemplate: *CodeScopeArgsTemplate\n    ObjectId: &ObjectIdType\n        <<: *__type\n        id: \"ObjectId\"\n        code: 101\n        type: *ObjectType\n        attr:\n            binary:\n                callable: *var\n                args: null\n                attr: null\n                type: *StringType\n                template: *ObjectIdToStringTemplate\n                argsTemplate: *ObjectIdToStringArgsTemplate\n            generation_time:\n                callable: *var\n                args: null\n                attr: null\n                id: \"db\"\n                type: *DateType\n                template: *ObjectIdGetTimestampTemplate\n                argsTemplate: *ObjectIdGetTimestampArgsTemplate\n    Binary: &BinaryType # Not currently supported\n        <<: *__type\n        id: \"Binary\"\n        code: 102\n        type: *ObjectType\n    DBRef: &DBRefType\n        <<: *__type\n        id: \"DBRef\"\n        code: 103\n        type: *ObjectType\n        attr:\n            database:\n                callable: *var\n                args: null\n                attr: null\n                id: \"db\"\n                type: *StringType\n                template: *DBRefGetDBTemplate\n                argsTemplate: *DBRefGetDBArgsTemplate\n            collection:\n                callable: *var\n                args: null\n                attr: null\n                id: \"collection\"\n                type: *StringType\n                template: *DBRefGetCollectionTemplate\n                argsTemplate: *DBRefGetCollectionArgsTemplate\n            id:\n                callable: *var\n                args: null\n                attr: null\n                id: \"id\"\n                type: *StringType\n                template: *DBRefGetIdTemplate\n                argsTemplate: *DBRefGetIdArgsTemplate\n    Int64: &LongType\n        <<: *__type\n        id: \"Int64\"\n        code: 106\n        type: *ObjectType\n        attr: {}\n    MinKey: &MinKeyType\n        <<: *__type\n        id: \"MinKey\"\n        code: 107\n        type: *ObjectType\n    MaxKey: &MaxKeyType\n        <<: *__type\n        id: \"MaxKey\"\n        code: 108\n        type: *ObjectType\n    Regex: &BSONRegExpType\n        <<: *__type\n        id: \"BSONRegExp\"\n        code: 109\n        type: *ObjectType\n    Timestamp: &TimestampType\n        <<: *__type\n        id: \"Timestamp\"\n        code: 110\n        type: *ObjectType\n        attr:\n            time:\n                callable: *var\n                args: null\n                attr: null\n                id: \"time\"\n                type: *IntegerType\n                template: *TimestampTTemplate\n                argsTemplate: null\n            inc:\n                callable: *var\n                args: null\n                attr: null\n                id: \"inc\"\n                type: *IntegerType\n                template: *TimestampITemplate\n                argsTemplate: null\n            as_datetime:\n                <<: *__func\n                id: \"inc\"\n                type: *DateType\n                template: *TimestampAsDateTemplate\n                argsTemplate: *TimestampAsDateArgsTemplate\n    Decimal128: &Decimal128Type\n        <<: *__type\n        id: \"Decimal128\"\n        code: 112\n        type: *ObjectType\n        attr: {}\nBsonSymbols:\n    Code: &CodeSymbol\n        id: \"Code\"\n        code: 100\n        callable: *constructor\n        args:\n            - [ *StringType ]\n            - [ *ObjectType, null ]\n        namedArgs:\n            scope:\n                default: {}\n                type: [ *ObjectType ]\n        type: *CodeType\n        attr: {}\n        template: *CodeSymbolTemplate\n        argsTemplate: *CodeSymbolArgsTemplate\n    ObjectId: &ObjectIdSymbol\n        id: \"ObjectId\"\n        code: 101\n        callable: *constructor\n        args:\n            - [ *StringType, null ]\n        namedArgs:\n            oid:\n                default: null\n                type: [ *StringType, *ObjectIdType ]\n        type: *ObjectIdType\n        attr:\n            from_datetime:\n                <<: *__func\n                id: \"ObjectIdfrom_datetime\"\n                args:\n                    - [ \"Date\" ]\n                type: *ObjectIdType\n                template: *ObjectIdCreateFromTimeTemplate\n                argsTemplate: *ObjectIdCreateFromTimeArgsTemplate\n            is_valid:\n                <<: *__func\n                id: \"is_valid\"\n                args:\n                    - [ *StringType,  ]\n                type: *BoolType\n                template: *ObjectIdIsValidTemplate\n                argsTemplate: *ObjectIdIsValidArgsTemplate\n        template: *ObjectIdSymbolTemplate\n        argsTemplate: *ObjectIdSymbolArgsTemplate\n    Binary: &BinarySymbol # Not currently supported\n        id: \"Binary\"\n        code: 102\n        callable: *constructor\n        args: null\n        type: *BinaryType\n        attr: {}\n        template: *BinarySymbolTemplate\n        argsTemplate: *BinarySymbolArgsTemplate\n    DBRef:\n        id: \"DBRef\"\n        code: 103\n        callable: *constructor\n        args:\n            - [ *StringType ]\n            - [ *ObjectIdType, *StringType ]\n            - [ *StringType, null ]\n        namedArgs:\n            database:\n                default: null\n                type: [ *StringType ]\n        type: *DBRefType\n        attr: {}\n        template: *DBRefSymbolTemplate\n        argsTemplate: *DBRefSymbolArgsTemplate\n    Int64:\n        id: \"Int64\"\n        code: 106\n        callable: *constructor\n        args:\n            - [ *IntegerType, *StringType, null ]\n        type: *LongType\n        attr: {}\n        template: *LongSymbolTemplate\n        argsTemplate: *LongSymbolArgsTemplate\n    MinKey:\n        id: \"MinKey\"\n        code: 107\n        callable: *constructor\n        args: []\n        type: *MinKeyType\n        attr: {}\n        template: *MinKeySymbolTemplate\n        argsTemplate: *MinKeySymbolArgsTemplate\n    MaxKey:\n        id: \"MaxKey\"\n        code: 108\n        callable: *constructor\n        args: []\n        type: *MaxKeyType\n        attr: {}\n        template: *MaxKeySymbolTemplate\n        argsTemplate: *MaxKeySymbolArgsTemplate\n    Regex:\n        id: \"Regex\"\n        code: 109\n        callable: *constructor\n        args:\n            - [ *StringType ]\n            - [ *StringType, *IntegerType, null ]\n        namedArgs:\n            flags:\n                default: 0\n                type: [ *StringType, *IntegerType ]\n        type: *BSONRegExpType\n        attr:\n            from_native:\n                <<: *__func\n                id: \"from_native\"\n                args:\n                - [ *RegexType ]\n                type: *BSONRegExpType\n                template: null\n                argsTemplate: null\n        template: *BSONRegExpSymbolTemplate\n        argsTemplate: *BSONRegExpSymbolArgsTemplate\n    Timestamp:\n        id: \"Timestamp\"\n        code: 110\n        callable: *constructor\n        args:\n            - [ *IntegerType ]\n            - [ *IntegerType ]\n        type: *TimestampType\n        attr: {}\n        template: *TimestampSymbolTemplate\n        argsTemplate: *TimestampSymbolArgsTemplate\n    Decimal128:\n        id: \"Decimal128\"\n        code: 112\n        callable: *constructor\n        args:\n            - [ *StringType ]\n        type: *Decimal128Type\n        attr: {}\n        template: *Decimal128SymbolTemplate\n        argsTemplate: *Decimal128SymbolArgsTemplate\n\nNativeSymbols:\n    datetime: # Needs process method\n        id: \"datetime\"\n        code: 200\n        callable: *constructor\n        args:\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n        type: *DateType\n        attr: {} # TODO: add more date funcs?\n        template: *DateSymbolTemplate\n        argsTemplate: *DateSymbolArgsTemplate\n    re:\n        id: \"re\"\n        code: 8\n        callable: *var\n        args: null\n        type: null\n        attr:\n            compile:\n                id: \"compile\"\n                code: 8\n                callable: *constructor\n                args:\n                    - [ *StringType ]\n                    - [ *IntegerType, null ]\n                namedArgs:\n                    flags:\n                        default: 0\n                        type: [ *IntegerType ]\n                type: *RegexType\n                attr: {}\n                template: *RegExpSymbolTemplate\n                argsTemplate: *RegExpSymbolArgsTemplate\n            A:\n                <<: *__type\n                id: 're.A'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '256';\n                    }\n            ASCII:\n                <<: *__type\n                id: 're.ASCII'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '256';\n                    }\n            I:\n                <<: *__type\n                id: 're.I'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '2';\n                    }\n            IGNORECASE:\n                <<: *__type\n                id: 're.IGNORECASE'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '2';\n                    }\n            DEBUG:\n                <<: *__type\n                id: 're.DEBUG'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '128';\n                    }\n            L:\n                <<: *__type\n                id: 're.L'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '4';\n                    }\n            LOCAL:\n                <<: *__type\n                id: 're.LOCAL'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '4';\n                    }\n            M:\n                <<: *__type\n                id: 're.M'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '8';\n                    }\n            MULTILINE:\n                <<: *__type\n                id: 're.MULTILINE'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '8';\n                    }\n            S:\n                <<: *__type\n                id: 're.S'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '16';\n                    }\n            DOTALL:\n                <<: *__type\n                id: 're.DOTALL'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '16';\n                    }\n            X:\n                <<: *__type\n                id: 're.X'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '64';\n                    }\n            VERBOSE:\n                <<: *__type\n                id: 're.VERBOSE'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '64';\n                    }\n        template: !!js/function >\n            () => {\n                return '';\n            }\n        argsTemplate: null\n    float:\n        id: \"float\"\n        code: 104\n        callable: *constructor\n        args:\n        - [ *NumericType, *StringType, null ]\n        type: *floatType\n        attr: {}\n        template: *DoubleSymbolTemplate\n        argsTemplate: *DoubleSymbolArgsTemplate\n    int:\n        id: \"int\"\n        code: 105\n        callable: *constructor\n        args:\n        - [ *NumericType, *StringType, null ]\n        type: *intType\n        attr: {}\n        template: *Int32SymbolTemplate\n        argsTemplate: *Int32SymbolArgsTemplate\n";
