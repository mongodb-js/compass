module.exports="SymbolTypes:\n    VAR: &var 0\n    CONSTRUCTOR: &constructor 1\n    FUNC: &func 2\n# Internal patterns to save typing\n__type: &__type\n    id: null\n    callable: *var\n    args: null\n    type: null\n    attr: {}\n    template: null\n    argsTemplate: null\n__func: &__func\n    callable: *func\n    args: []\n    attr: {}\n    template: null\n    argsTemplate: null\n\n# Java Templates\nTemplates:\n    # Misc\n    RegexFlags: &RegexFlags\n        i: 'i'\n        m: 'm'\n        u: 'u'\n        y: 'y'\n        g: 'g'\n    BSONRegexFlags: &BSONRegexFlags\n        i: 'i'\n        m: 'm'\n        x: 'x'\n        s: 's'\n        l: 'l'\n        u: 'u'\n    # Syntax\n    EqualitySyntaxTemplate: &EqualitySyntaxTemplate !!js/function >\n        (lhs, op, rhs) => {\n            if (op.includes('!') || op.includes('not')) {\n                return `${lhs} !== ${rhs}`;\n            }\n            return `${lhs} === ${rhs}`;\n        }\n    InSyntaxTemplate: &InSyntaxTemplate !!js/function >\n        (lhs, op, rhs) => {\n            let str = '!==';\n            if (op.includes('!') || op.includes('not')) {\n                str = '===';\n            }\n            return `${rhs}.indexOf(${lhs}) ${str} -1`\n        }\n    AndSyntaxTemplate: &AndSyntaxTemplate !!js/function >\n        (args) => {\n            return args.join(' && ');\n        }\n    OrSyntaxTemplate: &OrSyntaxTemplate !!js/function >\n        (args) => {\n            return args.join(' || ');\n        }\n    NotSyntaxTemplate: &NotSyntaxTemplate !!js/function >\n        (arg) => {\n            return `!${arg}`;\n        }\n    EosTemplate: &EosSyntaxTemplate null\n    EofTemplate: &EofSyntaxTemplate null\n    FloorDivTemplate: &FloorDivSyntaxTemplate !!js/function >\n        (lhs, rhs) => {\n            return `Math.floor(${lhs}, ${rhs})`;\n        }\n    PowerTemplate: &PowerSyntaxTemplate !!js/function >\n        (lhs, rhs) => {\n            return `Math.pow(${lhs}, ${rhs})`;\n        }\n    NewTemplate: &NewSyntaxTemplate !!js/function >\n        (expr, skip, code) => {\n            // Add classes that don't use \"new\" to array.\n            // So far: [Symbol, Double, Date.now]\n            noNew = [111, 104, 200.1];\n            if (skip || (code && noNew.indexOf(code) !== -1)) {\n                return expr;\n            }\n            return `new ${expr}`;\n        }\n    # BSON Object Type templates\n    CodeTypeTemplate: &CodeTypeTemplate null\n    StringTypeTemplate: &StringTypeTemplate !!js/function >\n        (str) => {\n          let newStr = str;\n          if (\n            (str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'') ||\n            (str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"')) {\n            newStr = str.substr(1, str.length - 2);\n          }\n          return `'${newStr.replace(/\\\\([\\s\\S])|(\")/g, '\\\\$1$2')}'`;\n        }\n    RegexTypeTemplate: &RegexTypeTemplate !!js/function >\n        (pattern, flags) => {\n            const str = pattern;\n            let newStr = str;\n            if (\n              (str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'') ||\n              (str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"')) {\n                newStr = str.substr(1, str.length - 2);\n            }\n            pattern = `'${newStr.replace(/\\\\([\\s\\S])|(')/g, '\\\\$1$2')}'`;\n            return `RegExp(${pattern}${flags ? ', ' + '\\'' + flags + '\\'': ''})`;\n        }\n    BoolTypeTemplate: &BoolTypeTemplate !!js/function >\n        (literal) => {\n            return literal.toLowerCase();\n        }\n    IntegerTypeTemplate: &IntegerTypeTemplate null\n    DecimalTypeTemplate: &DecimalTypeTemplate null\n    LongBasicTypeTemplate: &LongBasicTypeTemplate null\n    HexTypeTemplate: &HexTypeTemplate null\n    OctalTypeTemplate: &OctalTypeTemplate null\n    NumericTypeTemplate: &NumericTypeTemplate null\n    ArrayTypeTemplate: &ArrayTypeTemplate !!js/function >\n        (literal, depth) => {\n            depth++;\n            if (literal === '') {\n                return '[]'\n            }\n            const indent = '\\n' + '  '.repeat(depth);\n            const closingIndent = '\\n' + '  '.repeat(depth - 1);\n\n            return `[${indent}${literal}${closingIndent}]`;\n        }\n    ArrayTypeArgsTemplate: &ArrayTypeArgsTemplate null\n    NullTypeTemplate: &NullTypeTemplate !!js/function >\n        () => {\n            return 'null';\n        }\n    UndefinedTypeTemplate: &UndefinedTypeTemplate !!js/function >\n        () => {\n            return 'undefined';\n        }\n    ObjectTypeTemplate: &ObjectTypeTemplate !!js/function >\n        (literal) => {\n            if (literal === '') {\n                return '{}';\n            }\n            return literal;\n        }\n    ObjectTypeArgsTemplate: &ObjectTypeArgsTemplate !!js/function >\n        (args, depth) => {\n            if (args.length === 0) {\n                return '{}';\n            }\n            depth++;\n            const stringify = (str) => {\n                let newStr = str;\n                if (\n                  (str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'') ||\n                  (str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"')) {\n                    newStr = str.substr(1, str.length - 2);\n                }\n                return `'${newStr.replace(/\\\\([\\s\\S])|(')/g, '\\\\$1$2')}'`;\n            }\n            const indent = '\\n' + '  '.repeat(depth);\n            const closingIndent = '\\n' + '  '.repeat(depth - 1);\n            const pairs = args.map((arg) => {\n                return `${indent}${stringify(arg[0])}: ${arg[1]}`;\n            }).join(', ');\n\n            return `{${pairs}${closingIndent}}`\n        }\n    # BSON Object Method templates\n    CodeCodeTemplate: &CodeCodeTemplate null\n    CodeCodeArgsTemplate: &CodeCodeArgsTemplate null\n    CodeScopeTemplate: &CodeScopeTemplate null\n    CodeScopeArgsTemplate: &CodeScopeArgsTemplate null\n    ObjectIdToStringTemplate: &ObjectIdToStringTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.toString()`;\n        }\n    ObjectIdToStringArgsTemplate: &ObjectIdToStringArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    ObjectIdEqualsTemplate: &ObjectIdEqualsTemplate null\n    ObjectIdEqualsArgsTemplate: &ObjectIdEqualsArgsTemplate null\n    ObjectIdGetTimestampTemplate: &ObjectIdGetTimestampTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.getTimestamp()`;\n        }\n    ObjectIdGetTimestampArgsTemplate: &ObjectIdGetTimestampArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    BinaryValueTemplate: &BinaryValueTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.hex`;\n        }\n    BinaryValueArgsTemplate: &BinaryValueArgsTemplate null\n    BinaryLengthTemplate: &BinaryLengthTemplate null\n    BinaryLengthArgsTemplate: &BinaryLengthArgsTemplate null\n    BinaryToStringTemplate: &BinaryToStringTemplate null\n    BinaryToStringArgsTemplate: &BinaryToStringArgsTemplate null\n    BinarySubtypeTemplate: &BinarySubtypeTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.subtype()`;\n        }\n    BinarySubtypeArgsTemplate: &BinarySubtypeArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    DBRefGetDBTemplate: &DBRefGetDBTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.getDb()`;\n        }\n    DBRefGetDBArgsTemplate: &DBRefGetDBArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    DBRefGetCollectionTemplate: &DBRefGetCollectionTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.getCollection()`;\n        }\n    DBRefGetCollectionArgsTemplate: &DBRefGetCollectionArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    DBRefGetIdTemplate: &DBRefGetIdTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.getId()`;\n        }\n    DBRefGetIdArgsTemplate: &DBRefGetIdArgsTemplate !!js/function >\n        () => {\n            '';\n        }\n    DBRefToStringTemplate: &DBRefToStringTemplate null\n    DBRefToStringArgsTemplate: &DBRefToStringArgsTemplate null\n    DoubleValueOfTemplate: &DoubleValueOfTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    DoubleValueOfArgsTemplate: &DoubleValueOfArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    Int32ValueOfTemplate: &Int32ValueOfTemplate null\n    Int32ValueOfArgsTemplate: &Int32ValueOfArgsTemplate null\n    Int32ToStringTemplate: &Int32ToStringTemplate null\n    Int32ToStringArgsTemplate: &Int32ToStringArgsTemplate null\n    LongEqualsTemplate: &LongEqualsTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} ===`;\n        }\n    LongEqualsArgsTemplate: &LongEqualsArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongToStringTemplate: &LongToStringTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.toString`;\n        }\n    LongToStringArgsTemplate: &LongToStringArgsTemplate null\n    LongToIntTemplate: &LongToIntTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.valueOf`;\n        }\n    LongToIntArgsTemplate: &LongToIntArgsTemplate null\n    LongValueOfTemplate: &LongValueOfTemplate null\n    LongValueOfArgsTemplate: &LongValueOfArgsTemplate null\n    LongToNumberTemplate: &LongToNumberTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.floatApprox`;\n        }\n    LongToNumberArgsTemplate: &LongToNumberArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    LongAddTemplate: &LongAddTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} +`;\n        }\n    LongAddArgsTemplate: &LongAddArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongSubtractTemplate: &LongSubtractTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} -`;\n        }\n    LongSubtractArgsTemplate: &LongSubtractArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongMultiplyTemplate: &LongMultiplyTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} *`;\n        }\n    LongMultiplyArgsTemplate: &LongMultiplyArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongDivTemplate: &LongDivTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} /`;\n        }\n    LongDivArgsTemplate: &LongDivArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongModuloTemplate: &LongModuloTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} %`;\n        }\n    LongModuloArgsTemplate: &LongModuloArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongAndTemplate: &LongAndTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} &`;\n        }\n    LongAndArgsTemplate: &LongAndArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongOrTemplate: &LongOrTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} |`;\n        }\n    LongOrArgsTemplate: &LongOrArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongXorTemplate: &LongXorTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} ^`;\n        }\n    LongXorArgsTemplate: &LongXorArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongShiftLeftTemplate: &LongShiftLeftTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} <<`;\n        }\n    LongShiftLeftArgsTemplate: &LongShiftLeftArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongShiftRightTemplate: &LongShiftRightTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} >>`;\n        }\n    LongShiftRightArgsTemplate: &LongShiftRightArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongCompareTemplate: &LongCompareTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} -`;\n        }\n    LongCompareArgsTemplate: &LongCompareArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongIsOddTemplate: &LongIsOddTemplate !!js/function >\n        (lhs) => {\n            return `(${lhs} % 2) === 1`;\n        }\n    LongIsOddArgsTemplate: &LongIsOddArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    LongIsZeroTemplate: &LongIsZeroTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} === 0`;\n        }\n    LongIsZeroArgsTemplate: &LongIsZeroArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    LongIsNegativeTemplate: &LongIsNegativeTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} < 0`;\n        }\n    LongIsNegativeArgsTemplate: &LongIsNegativeArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    LongNegateTemplate: &LongNegateTemplate !!js/function >\n        () => {\n            return '-';\n        }\n    LongNegateArgsTemplate: &LongNegateArgsTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}`;\n        }\n    LongNotTemplate: &LongNotTemplate !!js/function >\n        () => {\n            return '~';\n        }\n    LongNotArgsTemplate: &LongNotArgsTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}`;\n        }\n    LongNotEqualsTemplate: &LongNotEqualsTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} !==`;\n        }\n    LongNotEqualsArgsTemplate: &LongNotEqualsArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongGreaterThanTemplate: &LongGreaterThanTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} >`;\n        }\n    LongGreaterThanArgsTemplate: &LongGreaterThanArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongGreaterThanOrEqualTemplate: &LongGreaterThanOrEqualTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} >=`;\n        }\n    LongGreaterThanOrEqualArgsTemplate: &LongGreaterThanOrEqualArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongLessThanTemplate: &LongLessThanTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} <`;\n        }\n    LongLessThanArgsTemplate: &LongLessThanArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongLessThanOrEqualTemplate: &LongLessThanOrEqualTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} <=`;\n        }\n    LongLessThanOrEqualArgsTemplate: &LongLessThanOrEqualArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongFloatApproxTemplate: &LongFloatApproxTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.floatValue()`;\n        }\n    LongTopTemplate: &LongTopTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} >> 32`;\n        }\n    LongBottomTemplate: &LongBottomTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} & 0x0000ffff`;\n        }\n    TimestampToStringTemplate: &TimestampToStringTemplate null\n    TimestampToStringArgsTemplate: &TimestampToStringArgsTemplate null\n    TimestampEqualsTemplate: &TimestampEqualsTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} ===`;\n        }\n    TimestampEqualsArgsTemplate: &TimestampEqualsArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    TimestampGetLowBitsTemplate: &TimestampGetLowBitsTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.getTime`;\n        }\n    TimestampGetLowBitsArgsTemplate: &TimestampGetLowBitsArgsTemplate null\n    TimestampGetHighBitsTemplate: &TimestampGetHighBitsTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.getInc`;\n        }\n    TimestampGetHighBitsArgsTemplate: &TimestampGetHighBitsArgsTemplate null\n    TimestampTTemplate: &TimestampTTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.getTime()`;\n        }\n    TimestampITemplate: &TimestampITemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.getInc()`;\n        }\n    TimestampAsDateTemplate: &TimestampAsDateTemplate !!js/function >\n        (lhs) => {\n            return `new Date(${lhs}.getHighBits() * 1000)`;\n        }\n    TimestampAsDateArgsTemplate: &TimestampAsDateArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    TimestampCompareTemplate: &TimestampCompareTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} -`;\n        }\n    TimestampCompareArgsTemplate: &TimestampCompareArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    TimestampNotEqualsTemplate: &TimestampNotEqualsTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} !==`;\n        }\n    TimestampNotEqualsArgsTemplate: &TimestampNotEqualsArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    TimestampGreaterThanTemplate: &TimestampGreaterThanTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} >`;\n        }\n    TimestampGreaterThanArgsTemplate: &TimestampGreaterThanArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    TimestampGreaterThanOrEqualTemplate: &TimestampGreaterThanOrEqualTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} >=`;\n        }\n    TimestampGreaterThanOrEqualArgsTemplate: &TimestampGreaterThanOrEqualArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    TimestampLessThanTemplate: &TimestampLessThanTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} <`;\n        }\n    TimestampLessThanArgsTemplate: &TimestampLessThanArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    TimestampLessThanOrEqualTemplate: &TimestampLessThanOrEqualTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} <=`;\n        }\n    TimestampLessThanOrEqualArgsTemplate: &TimestampLessThanOrEqualArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    SymbolValueOfTemplate: &SymbolValueOfTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    SymbolValueOfArgsTemplate: &SymbolValueOfArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    SymbolInspectTemplate: &SymbolInspectTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    SymbolInspectArgsTemplate: &SymbolInspectArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    SymbolToStringTemplate: &SymbolToStringTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    SymbolToStringArgsTemplate: &SymbolToStringArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    # Symbol Templates\n    CodeSymbolTemplate: &CodeSymbolTemplate null\n    CodeSymbolArgsTemplate: &CodeSymbolArgsTemplate !!js/function >\n        (lhs, code, scope) => {\n            scope = scope === undefined ? '' : `, ${scope}`;\n            // Single quote stringify\n            let newStr = code === undefined ? '' : code;\n            const str = newStr;\n            if (\n              (str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'') ||\n              (str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"')) {\n                newStr = str.substr(1, str.length - 2);\n            }\n            code = `'${newStr.replace(/\\\\([\\s\\S])|(')/g, '\\\\$1$2')}'`;\n            return `(${code}${scope})`;\n        }\n    ObjectIdSymbolTemplate: &ObjectIdSymbolTemplate null\n    ObjectIdSymbolArgsTemplate: &ObjectIdSymbolArgsTemplate !!js/function >\n        (lhs, str) => {\n          if (!str || str.length === 0) {\n            return '()';\n          }\n          let newStr = str;\n          if (\n            (str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'') ||\n            (str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"')) {\n            newStr = str.substr(1, str.length - 2);\n          }\n          return `('${newStr.replace(/\\\\([\\s\\S])|(\")/g, '\\\\$1$2')}')`;\n        }\n    BinarySymbolTemplate: &BinarySymbolTemplate !!js/function >\n        () => {\n            return 'BinData';\n        }\n    BinarySymbolArgsTemplate: &BinarySymbolArgsTemplate !!js/function >\n        (lhs, bytes, type) => {\n            const str = bytes;\n            let newStr = str;\n            if (\n              (str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'') ||\n              (str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"')) {\n                newStr = str.substr(1, str.length - 2);\n            }\n            bytes = `'${newStr.replace(/\\\\([\\s\\S])|(')/g, '\\\\$1$2')}'`;\n\n            if (type === null) {\n                type = '0';\n            }\n            return `(${type}, ${bytes})`;\n        }\n    BinarySymbolSubtypeDefaultTemplate: &BinarySymbolSubtypeDefaultTemplate !!js/function >\n        () => {\n            return '0';\n        }\n    BinarySymbolSubtypeFunctionTemplate: &BinarySymbolSubtypeFunctionTemplate !!js/function >\n        () => {\n            return '1';\n        }\n    BinarySymbolSubtypeByteArrayTemplate: &BinarySymbolSubtypeByteArrayTemplate !!js/function >\n        () => {\n            return '2';\n        }\n    BinarySymbolSubtypeUuidOldTemplate: &BinarySymbolSubtypeUuidOldTemplate !!js/function >\n        () => {\n            return '3';\n        }\n    BinarySymbolSubtypeUuidTemplate: &BinarySymbolSubtypeUuidTemplate !!js/function >\n        () => {\n            return '4';\n        }\n    BinarySymbolSubtypeMd5Template: &BinarySymbolSubtypeMd5Template !!js/function >\n        () => {\n            return '5';\n        }\n    BinarySymbolSubtypeUserDefinedTemplate: &BinarySymbolSubtypeUserDefinedTemplate !!js/function >\n        () => {\n            return '80';\n        }\n    DBRefSymbolTemplate: &DBRefSymbolTemplate null\n    DBRefSymbolArgsTemplate: &DBRefSymbolArgsTemplate null\n    DoubleSymbolTemplate: &DoubleSymbolTemplate !!js/function >\n        () => {\n            return '';\n        }\n    DoubleSymbolArgsTemplate: &DoubleSymbolArgsTemplate !!js/function >\n        (_, str) => {\n            // Remove quotes\n            let newStr = str;\n            if (\n              (str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'') ||\n              (str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"')) {\n                newStr = str.substr(1, str.length - 2);\n            }\n            return newStr;\n        }\n    Int32SymbolTemplate: &Int32SymbolTemplate !!js/function >\n        () => {\n            return 'NumberInt';\n        }\n    Int32SymbolArgsTemplate: &Int32SymbolArgsTemplate !!js/function >\n        (lhs, arg) => {\n            arg = arg === undefined ? 0 : arg;\n            return `(${arg})`;\n        }\n    LongSymbolTemplate: &LongSymbolTemplate !!js/function >\n        () => {\n            return 'NumberLong';\n        }\n    LongSymbolArgsTemplate: &LongSymbolArgsTemplate !!js/function >\n        (lhs, arg) => {\n            arg = arg === undefined ? 0 : arg;\n            return `(${arg})`;\n        }\n    LongSymbolMaxTemplate: &LongSymbolMaxTemplate !!js/function >\n        () => {\n            return 'Math.max()';\n        }\n    LongSymbolMaxArgsTemplate: &LongSymbolMaxArgsTemplate null\n    LongSymbolMinTemplate: &LongSymbolMinTemplate !!js/function >\n        () => {\n            return 'Math.min()';\n        }\n    LongSymbolMinArgsTemplate: &LongSymbolMinArgsTemplate null\n    LongSymbolZeroTemplate: &LongSymbolZeroTemplate !!js/function >\n        () => {\n            return 0;\n        }\n    LongSymbolZeroArgsTemplate: &LongSymbolZeroArgsTemplate null\n    LongSymbolOneTemplate: &LongSymbolOneTemplate !!js/function\n        () => {\n            return 1;\n        }\n    LongSymbolOneArgsTemplate: &LongSymbolOneArgsTemplate null\n    LongSymbolNegOneTemplate: &LongSymbolNegOneTemplate !!js/function\n        () => {\n            return -1;\n        }\n    LongSymbolNegOneArgsTemplate: &LongSymbolNegOneArgsTemplate null\n    LongSymbolFromBitsTemplate: &LongSymbolFromBitsTemplate !!js/function > # Also has process method\n        (lhs) => {\n            return lhs;\n        }\n    LongSymbolFromBitsArgsTemplate: &LongSymbolFromBitsArgsTemplate null # Also has process method\n    LongSymbolFromIntTemplate: &LongSymbolFromIntTemplate !!js/function >\n        (lhs) => {\n            return `new ${lhs}`;\n        }\n    LongSymbolFromIntArgsTemplate: &LongSymbolFromIntArgsTemplate null\n    LongSymbolFromNumberTemplate: &LongSymbolFromNumberTemplate !!js/function >\n        (lhs) => {\n            return `new ${lhs}`;\n        }\n    LongSymbolFromNumberArgsTemplate: &LongSymbolFromNumberArgsTemplate null\n    LongSymbolFromStringTemplate: &LongSymbolFromStringTemplate !!js/function >\n        (lhs) => {\n            return `new ${lhs}`;\n        }\n    LongSymbolFromStringArgsTemplate: &LongSymbolFromStringArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return `(${arg})`;\n        }\n    MinKeySymbolTemplate: &MinKeySymbolTemplate null\n    MinKeySymbolArgsTemplate: &MinKeySymbolArgsTemplate null\n    MaxKeySymbolTemplate: &MaxKeySymbolTemplate null\n    MaxKeySymbolArgsTemplate: &MaxKeySymbolArgsTemplate null\n    TimestampSymbolTemplate: &TimestampSymbolTemplate null\n    TimestampSymbolArgsTemplate: &TimestampSymbolArgsTemplate null\n    SymbolSymbolTemplate: &SymbolSymbolTemplate !!js/function >\n        () => {\n            return '';\n        }\n    SymbolSymbolArgsTemplate: &SymbolSymbolArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return arg;\n        }\n    BSONRegExpSymbolTemplate: &BSONRegExpSymbolTemplate !!js/function >\n        () => {\n            return 'RegExp';\n        }\n    BSONRegExpSymbolArgsTemplate: &BSONRegExpSymbolArgsTemplate !!js/function >\n        (lhs, pattern, flags) => {\n            const singleStringify = (str) => {\n                let newStr = str;\n                if (\n                  (str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'') ||\n                  (str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"')) {\n                    newStr = str.substr(1, str.length - 2);\n                }\n                return `'${newStr.replace(/\\\\([\\s\\S])|(\")/g, '\\\\$1$2')}'`;\n            }\n\n            return `(${singleStringify(pattern)}${flags ? ', ' + singleStringify(flags) : ''})`;\n        }\n    Decimal128SymbolTemplate: &Decimal128SymbolTemplate !!js/function >\n        () => {\n            return 'NumberDecimal';\n        }\n    Decimal128SymbolArgsTemplate: &Decimal128SymbolArgsTemplate null\n    Decimal128SymbolFromStringTemplate: &Decimal128SymbolFromStringTemplate !!js/function >\n        (lhs) => {\n            return `new ${lhs}`;\n        }\n    Decimal128SymbolFromStringArgsTemplate: &Decimal128SymbolFromStringArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return `(${arg})`;\n        }\n    Decimal128ToStringTemplate: &Decimal128ToStringTemplate null\n    Decimal128ToStringArgsTemplate: &Decimal128ToStringArgsTemplate null\n    # BSON Util Templates\n    ObjectIdCreateFromHexStringTemplate: &ObjectIdCreateFromHexStringTemplate !!js/function >\n        () => {\n            return 'new ObjectId';\n        }\n    ObjectIdCreateFromHexStringArgsTemplate: &ObjectIdCreateFromHexStringArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return `(${arg})`;\n        }\n    ObjectIdCreateFromTimeTemplate: &ObjectIdCreateFromTimeTemplate !!js/function >\n        () => {\n            return `ObjectId.fromDate`;\n        }\n    ObjectIdCreateFromTimeArgsTemplate: &ObjectIdCreateFromTimeArgsTemplate !!js/function >\n        (lhs, arg, isNumber) => {\n            if (isNumber) {\n                return `(new Date(${arg}))`;\n            }\n            return `(${arg})`;\n        }\n    ObjectIdIsValidTemplate: &ObjectIdIsValidTemplate !!js/function >\n        (lhs) => {\n            return 'new ObjectId';\n        }\n    ObjectIdIsValidArgsTemplate: &ObjectIdIsValidArgsTemplate null\n    # JS Symbol Templates\n    ObjectSymbolTemplate: &ObjectSymbolTemplate null\n    ObjectSymbolArgsTemplate: &ObjectSymbolArgsTemplate null\n    ObjectSymbolCreateTemplate: &ObjectSymbolCreateTemplate null\n    ObjectSymbolCreateArgsTemplate: &ObjectSymbolCreateArgsTemplate null\n    NumberSymbolTemplate: &NumberSymbolTemplate !!js/function >\n        () => {\n            return 'Number';\n        }\n    NumberSymbolArgsTemplate: &NumberSymbolArgsTemplate null\n    DateSymbolTemplate: &DateSymbolTemplate !!js/function >\n        () => {\n            return 'Date';\n        }\n    DateSymbolArgsTemplate: &DateSymbolArgsTemplate null\n    DateSymbolNowTemplate: &DateSymbolNowTemplate !!js/function >\n        () => {\n            return 'Date.now';\n        }\n    DateSymbolNowArgsTemplate: &DateSymbolNowArgsTemplate null\n    RegExpSymbolTemplate: &RegExpSymbolTemplate !!js/function >\n        () => {\n            return 'RegExp';\n        }\n    RegExpSymbolArgsTemplate: &RegExpSymbolArgsTemplate null\n    ImportTemplate: &ImportTemplate null\n    0ImportTemplate: &0ImportTemplate null\n    1ImportTemplate: &1ImportTemplate null\n    2ImportTemplate: &2ImportTemplate null\n    3ImportTemplate: &3ImportTemplate null\n    4ImportTemplate: &4ImportTemplate null\n    5ImportTemplate: &5ImportTemplate null\n    6ImportTemplate: &6ImportTemplate null\n    7ImportTemplate: &7ImportTemplate null\n    8ImportTemplate: &8ImportTemplate null\n    9ImportTemplate: &9ImportTemplate null\n    10ImportTemplate: &10ImportTemplate null\n    11ImportTemplate: &11ImportTemplate null\n    12ImportTemplate: &12ImportTemplate null\n    100ImportTemplate: &100ImportTemplate null\n    101ImportTemplate: &101ImportTemplate null\n    102ImportTemplate: &102ImportTemplate null\n    103ImportTemplate: &103ImportTemplate null\n    104ImportTemplate: &104ImportTemplate null\n    105ImportTemplate: &105ImportTemplate null\n    106ImportTemplate: &106ImportTemplate null\n    107ImportTemplate: &107ImportTemplate null\n    108ImportTemplate: &108ImportTemplate null\n    109ImportTemplate: &109ImportTemplate null\n    110ImportTemplate: &110ImportTemplate null\n    111ImportTemplate: &111ImportTemplate null\n    112ImportTemplate: &112ImportTemplate null\n    113ImportTemplate: &113ImportTemplate null\n    114ImportTemplate: &114ImportTemplate null\n    200ImportTemplate: &200ImportTemplate null\n    201ImportTemplate: &201ImportTemplate null\n    300ImportTemplate: &300ImportTemplate null\n    301ImportTemplate: &301ImportTemplate null\n    302ImportTemplate: &302ImportTemplate null\n    303ImportTemplate: &303ImportTemplate null\n    304ImportTemplate: &304ImportTemplate null\n    305ImportTemplate: &305ImportTemplate null\n    306ImportTemplate: &306ImportTemplate null\n# Universal types\n# Everything inherits from StringType because we haven't implemented any of them.\nBasicTypes:\n    # Universal basic types\n    _bool: &BoolType\n        <<: *__type\n        id: \"_bool\"\n        code: 0\n        template: *BoolTypeTemplate\n    _integer: &IntegerType\n        <<: *__type\n        id: \"_integer\"\n        code: 1\n        template: *IntegerTypeTemplate\n    _long: &LongBasicType\n        <<: *__type\n        id: \"_long\"\n        code: 2\n        template: *LongBasicTypeTemplate\n    _decimal: &DecimalType\n        <<: *__type\n        id: \"_decimal\"\n        code: 3\n        template: *DecimalTypeTemplate\n    _hex: &HexType\n        <<: *__type\n        id: \"_hex\"\n        code: 4\n        template: *HexTypeTemplate\n    _octal: &OctalType\n        <<: *__type\n        id: \"_octal\"\n        code: 5\n        template: *OctalTypeTemplate\n    _numeric: &NumericType\n        <<: *__type\n        id: \"_numeric\"\n        code: 6\n        template: *NumericTypeTemplate\n    _string: &StringType\n        <<: *__type\n        id: \"_string\"\n        code: 7\n        template: *StringTypeTemplate\n    _regex: &RegexType\n        <<: *__type\n        id: \"_regex\"\n        code: 8\n        template: *RegexTypeTemplate\n    _array: &ArrayType\n        <<: *__type\n        id: \"_array\"\n        code: 9\n        template: *ArrayTypeTemplate\n        argsTemplate: *ArrayTypeArgsTemplate\n    _object: &ObjectType\n        <<: *__type\n        id: \"_object\"\n        code: 10\n        template: *ObjectTypeTemplate\n        argsTemplate: *ObjectTypeArgsTemplate\n    _null: &NullType\n        <<: *__type\n        id: \"_null\"\n        code: 11\n        template: *NullTypeTemplate\n    _undefined: &UndefinedType\n        <<: *__type\n        id: \"_undefined\"\n        code: 12\n        template: *UndefinedTypeTemplate\n\nSyntax:\n    equality:\n        template: *EqualitySyntaxTemplate\n    in:\n        template: *InSyntaxTemplate\n    and:\n        template: *AndSyntaxTemplate\n    or:\n        template: *OrSyntaxTemplate\n    not:\n        template: *NotSyntaxTemplate\n    eos:\n        template: *EosSyntaxTemplate\n    eof:\n        template: *EofSyntaxTemplate\n    floorDiv:\n        template: *FloorDivSyntaxTemplate\n    power:\n        template: *PowerSyntaxTemplate\n    # The new template takes in expr, and an optional skip argument and optional\n    # id argument. The skip argument is a boolean that if true then doesn't add\n    # new. The code argument is the symbol code being called. The template will check\n    # if it is an exception, i.e. a type that is a constructor but may not use new.\n    new:\n        template: *NewSyntaxTemplate\n    # The regex flags that change symbols between languages can be defined here.\n    # Flags that aren't defined can be left blank and will be ignored.\n    regexFlags: *RegexFlags\n    bsonRegexFlags: *BSONRegexFlags\nImports:\n    import:\n        template: *ImportTemplate\n    0:\n        template: *0ImportTemplate\n    1:\n        template: *1ImportTemplate\n    2:\n        template: *2ImportTemplate\n    3:\n        template: *3ImportTemplate\n    4:\n        template: *4ImportTemplate\n    5:\n        template: *5ImportTemplate\n    6:\n        template: *6ImportTemplate\n    7:\n        template: *7ImportTemplate\n    8:\n        template: *8ImportTemplate\n    9:\n        template: *9ImportTemplate\n    10:\n        template: *10ImportTemplate\n    11:\n        template: *11ImportTemplate\n    12:\n        template: *12ImportTemplate\n    100:\n        template: *100ImportTemplate\n    101:\n        template: *101ImportTemplate\n    102:\n        template: *102ImportTemplate\n    103:\n        template: *103ImportTemplate\n    104:\n        template: *104ImportTemplate\n    105:\n        template: *105ImportTemplate\n    106:\n        template: *106ImportTemplate\n    107:\n        template: *107ImportTemplate\n    108:\n        template: *108ImportTemplate\n    109:\n        template: *109ImportTemplate\n    110:\n        template: *110ImportTemplate\n    111:\n        template: *111ImportTemplate\n    112:\n        template: *112ImportTemplate\n    113:\n        template: *113ImportTemplate\n    114:\n        template: *114ImportTemplate\n    200:\n        template: *200ImportTemplate\n    201:\n        template: *201ImportTemplate\n    300:\n        template: *300ImportTemplate\n    301:\n        template: *301ImportTemplate\n    302:\n        template: *302ImportTemplate\n    303:\n        template: *303ImportTemplate\n    304:\n        template: *304ImportTemplate\n    305:\n        template: *305ImportTemplate\n    306:\n        template: *306ImportTemplate\nNativeTypes:\n    Date: &DateType\n        <<: *__type\n        id: \"Date\"\n        code: 200\n        type: *ObjectType\n        attr: {} # TODO: no built-in date methods added yet\n    int: &intType\n        <<: *__type\n        id: \"int\"\n        code: 105\n        type: *IntegerType\n        attr: {}\n    float: &floatType\n        <<: *__type\n        id: \"float\"\n        code: 104\n        type: *IntegerType\n        attr: {}\nBsonTypes:\n    Code: &CodeType\n        <<: *__type\n        id: \"Code\"\n        code: 100\n        type: *ObjectType\n        attr:\n            scope:\n                callable: *var\n                args: null\n                attr: null\n                id: \"scope\"\n                type: *ObjectType\n                template: *CodeScopeTemplate\n                argsTemplate: *CodeScopeArgsTemplate\n        template: *CodeTypeTemplate\n    ObjectId: &ObjectIdType\n        <<: *__type\n        id: \"ObjectId\"\n        code: 101\n        type: *ObjectType\n        attr:\n            binary:\n                callable: *var\n                args: null\n                attr: null\n                type: *StringType\n                template: *ObjectIdToStringTemplate\n                argsTemplate: *ObjectIdToStringArgsTemplate\n            generation_time:\n                callable: *var\n                args: null\n                attr: null\n                id: \"db\"\n                type: *DateType\n                template: *ObjectIdGetTimestampTemplate\n                argsTemplate: *ObjectIdGetTimestampArgsTemplate\n    Binary: &BinaryType # Not currently supported\n        <<: *__type\n        id: \"Binary\"\n        code: 102\n        type: *ObjectType\n    DBRef: &DBRefType\n        <<: *__type\n        id: \"DBRef\"\n        code: 103\n        type: *ObjectType\n        attr:\n            database:\n                callable: *var\n                args: null\n                attr: null\n                id: \"db\"\n                type: *StringType\n                template: *DBRefGetDBTemplate\n                argsTemplate: *DBRefGetDBArgsTemplate\n            collection:\n                callable: *var\n                args: null\n                attr: null\n                id: \"collection\"\n                type: *StringType\n                template: *DBRefGetCollectionTemplate\n                argsTemplate: *DBRefGetCollectionArgsTemplate\n            id:\n                callable: *var\n                args: null\n                attr: null\n                id: \"id\"\n                type: *StringType\n                template: *DBRefGetIdTemplate\n                argsTemplate: *DBRefGetIdArgsTemplate\n    Int64: &LongType\n        <<: *__type\n        id: \"Int64\"\n        code: 106\n        type: *ObjectType\n        attr: {}\n    MinKey: &MinKeyType\n        <<: *__type\n        id: \"MinKey\"\n        code: 107\n        type: *ObjectType\n    MaxKey: &MaxKeyType\n        <<: *__type\n        id: \"MaxKey\"\n        code: 108\n        type: *ObjectType\n    Regex: &BSONRegExpType\n        <<: *__type\n        id: \"BSONRegExp\"\n        code: 109\n        type: *ObjectType\n    Timestamp: &TimestampType\n        <<: *__type\n        id: \"Timestamp\"\n        code: 110\n        type: *ObjectType\n        attr:\n            time:\n                callable: *var\n                args: null\n                attr: null\n                id: \"time\"\n                type: *IntegerType\n                template: *TimestampTTemplate\n                argsTemplate: null\n            inc:\n                callable: *var\n                args: null\n                attr: null\n                id: \"inc\"\n                type: *IntegerType\n                template: *TimestampITemplate\n                argsTemplate: null\n            as_datetime:\n                <<: *__func\n                id: \"inc\"\n                type: *DateType\n                template: *TimestampAsDateTemplate\n                argsTemplate: *TimestampAsDateArgsTemplate\n    Decimal128: &Decimal128Type\n        <<: *__type\n        id: \"Decimal128\"\n        code: 112\n        type: *ObjectType\n        attr: {}\nBsonSymbols:\n    Code: &CodeSymbol\n        id: \"Code\"\n        code: 100\n        callable: *constructor\n        args:\n            - [ *StringType ]\n            - [ *ObjectType, null ]\n        type: *CodeType\n        attr: {}\n        template: *CodeSymbolTemplate\n        argsTemplate: *CodeSymbolArgsTemplate\n    ObjectId: &ObjectIdSymbol\n        id: \"ObjectId\"\n        code: 101\n        callable: *constructor\n        args:\n            - [ *StringType, null, 'oid' ]\n        type: *ObjectIdType\n        attr:\n            from_datetime:\n                <<: *__func\n                id: \"ObjectIdfrom_datetime\"\n                args:\n                    - [ \"Date\" ]\n                type: *ObjectIdType\n                template: *ObjectIdCreateFromTimeTemplate\n                argsTemplate: *ObjectIdCreateFromTimeArgsTemplate\n            is_valid:\n                <<: *__func\n                id: \"is_valid\"\n                args:\n                    - [ *StringType,  ]\n                type: *BoolType\n                template: *ObjectIdIsValidTemplate\n                argsTemplate: *ObjectIdIsValidArgsTemplate\n        template: *ObjectIdSymbolTemplate\n        argsTemplate: *ObjectIdSymbolArgsTemplate\n    Binary: &BinarySymbol # Not currently supported\n        id: \"Binary\"\n        code: 102\n        callable: *constructor\n        args: null\n        type: *BinaryType\n        attr: {}\n        template: *BinarySymbolTemplate\n        argsTemplate: *BinarySymbolArgsTemplate\n    DBRef:\n        id: \"DBRef\"\n        code: 103\n        callable: *constructor\n        args:\n            - [ *StringType ]\n            - [ *ObjectIdType, *StringType ]\n            - [ *StringType, null, 'database' ]\n        type: *DBRefType\n        attr: {}\n        template: *DBRefSymbolTemplate\n        argsTemplate: *DBRefSymbolArgsTemplate\n    Int64:\n        id: \"Int64\"\n        code: 106\n        callable: *constructor\n        args:\n            - [ *IntegerType, *StringType, null ]\n        type: *LongType\n        attr: {}\n        template: *LongSymbolTemplate\n        argsTemplate: *LongSymbolArgsTemplate\n    MinKey:\n        id: \"MinKey\"\n        code: 107\n        callable: *constructor\n        args: []\n        type: *MinKeyType\n        attr: {}\n        template: *MinKeySymbolTemplate\n        argsTemplate: *MinKeySymbolArgsTemplate\n    MaxKey:\n        id: \"MaxKey\"\n        code: 108\n        callable: *constructor\n        args: []\n        type: *MaxKeyType\n        attr: {}\n        template: *MaxKeySymbolTemplate\n        argsTemplate: *MaxKeySymbolArgsTemplate\n    Regex:\n        id: \"Regex\"\n        code: 109\n        callable: *constructor\n        args:\n        - [ *StringType ]\n        - [ *StringType, *IntegerType, null, 'flags' ]\n        type: *BSONRegExpType\n        attr:\n            from_native:\n                <<: *__func\n                id: \"from_native\"\n                args:\n                - [ *RegexType ]\n                type: *BSONRegExpType\n                template: null\n                argsTemplate: null\n        template: *BSONRegExpSymbolTemplate\n        argsTemplate: *BSONRegExpSymbolArgsTemplate\n    Timestamp:\n        id: \"Timestamp\"\n        code: 110\n        callable: *constructor\n        args:\n            - [ *IntegerType ]\n            - [ *IntegerType ]\n        type: *TimestampType\n        attr: {}\n        template: *TimestampSymbolTemplate\n        argsTemplate: *TimestampSymbolArgsTemplate\n    Decimal128:\n        id: \"Decimal128\"\n        code: 112\n        callable: *constructor\n        args:\n            - [ *StringType ]\n        type: *Decimal128Type\n        attr: {}\n        template: *Decimal128SymbolTemplate\n        argsTemplate: *Decimal128SymbolArgsTemplate\n\nNativeSymbols:\n    datetime: # Needs process method\n        id: \"datetime\"\n        code: 200\n        callable: *constructor\n        args:\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n        type: *DateType\n        attr: # TODO: add more date funcs?\n            utcnow:\n                id: \"now\"\n                code: 200.1\n                callable: *constructor\n                args: []\n                type: *DateType\n                attr: {}\n                template: *DateSymbolNowTemplate\n                argsTemplate: *DateSymbolNowArgsTemplate\n        template: *DateSymbolTemplate\n        argsTemplate: *DateSymbolArgsTemplate\n    re:\n        id: \"re\"\n        code: 8\n        callable: *var\n        args: null\n        type: null\n        attr:\n            compile:\n                id: \"compile\"\n                code: 8\n                callable: *constructor\n                args:\n                - [ *StringType ]\n                - [ *IntegerType, null ]\n                type: *RegexType\n                attr: {}\n                template: *RegExpSymbolTemplate\n                argsTemplate: *RegExpSymbolArgsTemplate\n            A:\n                <<: *__type\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '256';\n                    }\n            ASCII:\n                <<: *__type\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '256';\n                    }\n            I:\n                <<: *__type\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '2';\n                    }\n            IGNORECASE:\n                <<: *__type\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '2';\n                    }\n            DEBUG:\n                <<: *__type\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '128';\n                    }\n            L:\n                <<: *__type\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '4';\n                    }\n            LOCAL:\n                <<: *__type\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '4';\n                    }\n            M:\n                <<: *__type\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '8';\n                    }\n            MULTILINE:\n                <<: *__type\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '8';\n                    }\n            S:\n                <<: *__type\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '16';\n                    }\n            DOTALL:\n                <<: *__type\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '16';\n                    }\n            X:\n                <<: *__type\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '64';\n                    }\n            VERBOSE:\n                <<: *__type\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '64';\n                    }\n        template: !!js/function >\n            () => {\n                return '';\n            }\n        argsTemplate: null\n    float:\n        id: \"float\"\n        code: 104\n        callable: *constructor\n        args:\n        - [ *NumericType, *StringType, null ]\n        type: *floatType\n        attr: {}\n        template: *DoubleSymbolTemplate\n        argsTemplate: *DoubleSymbolArgsTemplate\n    int:\n        id: \"int\"\n        code: 105\n        callable: *constructor\n        args:\n        - [ *NumericType, *StringType, null ]\n        type: *intType\n        attr: {}\n        template: *Int32SymbolTemplate\n        argsTemplate: *Int32SymbolArgsTemplate\n";
