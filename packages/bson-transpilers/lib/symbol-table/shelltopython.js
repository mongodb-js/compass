module.exports="SymbolTypes:\n    VAR: &var 0\n    CONSTRUCTOR: &constructor 1\n    FUNC: &func 2\n# Internal patterns to save typing\n__type: &__type\n    id: null\n    callable: *var\n    args: null\n    type: null\n    attr: {}\n    template: null\n    argsTemplate: null\n__func: &__func\n    callable: *func\n    args: []\n    attr: {}\n    template: null\n    argsTemplate: null\n\n# Python Templates\nTemplates:\n    # BSON Object Type templates\n    CodeTypeTemplate: &CodeTypeTemplate null\n    StringTypeTemplate: &StringTypeTemplate !!js/function >\n        (str) => {\n          let newStr = str;\n          if (\n            (str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'') ||\n            (str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"')) {\n            newStr = str.substr(1, str.length - 2);\n          }\n          return `'${newStr.replace(/\\\\([\\s\\S])|(\")/g, '\\\\$1$2')}'`;\n        }\n    RegexTypeTemplate: &RegexTypeTemplate !!js/function >\n        (pattern, flags) => {\n            flags = flags === '' ? '' : `(?${flags})`;\n            const escaped = pattern.replace(/\\\\(?!\\/)/, '\\\\\\\\');\n\n            // Double-quote stringify\n            const str = escaped + flags;\n            let newStr = str;\n            if (\n                (str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'') ||\n                (str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"')) {\n                    newStr = str.substr(1, str.length - 2);\n            }\n            return `re.compile(r\"${newStr.replace(/\\\\([\\s\\S])|(\")/g, '\\\\$1$2')}\")`;\n        }\n    BoolTypeTemplate: &BoolTypeTemplate !!js/function >\n        (str) => {\n          return `${str.charAt(0).toUpperCase()}${str.slice(1)}`;\n        }\n    IntegerTypeTemplate: &IntegerTypeTemplate null\n    DecimalTypeTemplate: &DecimalTypeTemplate null\n    LongBasicTypeTemplate: &LongBasicTypeTemplate null\n    HexTypeTemplate: &HexTypeTemplate null\n    OctalTypeTemplate: &OctalTypeTemplate !!js/function >\n        (literal) => {\n            let offset = 0;\n\n            if (\n                literal.charAt(0) === '0' &&\n                (literal.charAt(1) === '0' || literal.charAt(1) === 'o' || literal.charAt(1) === 'O')\n            ) {\n                offset = 2;\n            } else if (literal.charAt(0) === '0') {\n                offset = 1;\n            }\n\n            literal = `0o${literal.substr(offset, literal.length - 1)}`;\n\n            return literal;\n        }\n    NumericTypeTemplate: &NumericTypeTemplate null\n    ArrayTypeTemplate: &ArrayTypeTemplate !!js/function >\n        (literal) => {\n            return `[${literal}]`;\n        }\n    NullTypeTemplate: &NullTypeTemplate !!js/function >\n        () => {\n            return 'None';\n        }\n    UndefinedTypeTemplate: &UndefinedTypeTemplate !!js/function >\n        () => {\n            return 'None';\n        }\n    ObjectTypeTemplate: &ObjectTypeTemplate !!js/function >\n        (literal) => {\n            return `{${literal}}`;\n        }\n    ObjectTypeArgsTemplate: &ObjectTypeArgsTemplate !!js/function >\n        (args) => {\n            return args.map((arg) => {\n                return `'${arg[0]}': ${arg[1]}`;\n            }).join(', ');\n        }\n    # BSON Object Method templates\n    CodeCodeTemplate: &CodeCodeTemplate !!js/function >\n        (lhs) => {\n            return `str(${lhs})`;\n        }\n    CodeCodeArgsTemplate: &CodeCodeArgsTemplate null\n    CodeScopeTemplate: &CodeScopeTemplate null\n    CodeScopeArgsTemplate: &CodeScopeArgsTemplate null\n    ObjectIdToStringTemplate: &ObjectIdToStringTemplate !!js/function >\n        () => {\n            return '';\n        }\n    ObjectIdToStringArgsTemplate: &ObjectIdToStringArgsTemplate !!js/function >\n        (lhs) => {\n            return `str(${lhs})`;\n        }\n    ObjectIdEqualsTemplate: &ObjectIdEqualsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    ObjectIdEqualsArgsTemplate: &ObjectIdEqualsArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return `${lhs} == ${rhs}`;\n        }\n    ObjectIdGetTimestampTemplate: &ObjectIdGetTimestampTemplate !!js/function >\n        () => {\n            return '';\n        }\n    ObjectIdGetTimestampArgsTemplate: &ObjectIdGetTimestampArgsTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.generation_time`;\n        }\n    BinaryValueTemplate: &BinaryValueTemplate !!js/function >\n        () => {\n            return '';\n        }\n    BinaryValueArgsTemplate: &BinaryValueArgsTemplate !!js/function >\n        (lhs) => {\n            return `str(${lhs})`;\n        }\n    BinaryLengthTemplate: &BinaryLengthTemplate !!js/function >\n        () => {\n            return '';\n        }\n    BinaryLengthArgsTemplate: &BinaryLengthArgsTemplate !!js/function >\n        (lhs) => {\n            return `len(${lhs})`;\n        }\n    BinaryToStringTemplate: &BinaryToStringTemplate !!js/function >\n        () => {\n            return '';\n        }\n    BinaryToStringArgsTemplate: &BinaryToStringArgsTemplate !!js/function >\n        (lhs) => {\n            return `str(${lhs})`;\n        }\n    BinarySubtypeTemplate: &BinarySubtypeTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.subtype`;\n        }\n    BinarySubtypeArgsTemplate: &BinarySubtypeArgsTemplate null\n    DBRefGetDBTemplate: &DBRefGetDBTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.database`;\n        }\n    DBRefGetCollectionTemplate: &DBRefGetCollectionTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.collection`;\n        }\n    DBRefGetIdTemplate: &DBRefGetIdTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.id`;\n        }\n    DBRefGetIdArgsTemplate: &DBRefGetIdArgsTemplate !!js/function\n        () => {\n            return '';\n        }\n    DBRefGetDBArgsTemplate: &DBRefGetDBArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    DBRefGetCollectionArgsTemplate: &DBRefGetCollectionArgsTemplate !!js/function\n        () => {\n            return '';\n        }\n    DBRefToStringTemplate: &DBRefToStringTemplate !!js/function >\n        (lhs) => {\n            return `str(${lhs})`;\n        }\n    DBRefToStringArgsTemplate: &DBRefToStringArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    DoubleValueOfTemplate: &DoubleValueOfTemplate !!js/function >\n        () => {\n            return '';\n        }\n    DoubleValueOfArgsTemplate: &DoubleValueOfArgsTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    Int32ValueOfTemplate: &Int32ValueOfTemplate !!js/function >\n        () => {\n            return '';\n        }\n    Int32ValueOfArgsTemplate: &Int32ValueOfArgsTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    Int32ToStringTemplate: &Int32ToStringTemplate !!js/function >\n        () => {\n            return '';\n        }\n    Int32ToStringArgsTemplate: &Int32ToStringArgsTemplate !!js/function >\n        (lhs) => {\n            return `str(${lhs})`;\n        }\n    LongEqualsTemplate: &LongEqualsTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    LongEqualsArgsTemplate: &LongEqualsArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return ` == ${rhs}`;\n        }\n    LongToIntTemplate: &LongToIntTemplate !!js/function >\n        () => {\n            return '';\n        }\n    LongToIntArgsTemplate: &LongToIntArgsTemplate !!js/function >\n        (lhs) => {\n            return `int(${lhs})`;\n        }\n    LongValueOfTemplate: &LongValueOfTemplate !!js/function >\n        () => {\n            return '';\n        }\n    LongValueOfArgsTemplate: &LongValueOfArgsTemplate !!js/function >\n        (lhs) => {\n            return `long(${lhs})`;\n        }\n    LongToNumberTemplate: &LongToNumberTemplate !!js/function >\n        () => {\n            return '';\n        }\n    LongToNumberArgsTemplate: &LongToNumberArgsTemplate !!js/function >\n        (lhs) => {\n            return `float(${lhs})`;\n        }\n    LongAddTemplate: &LongAddTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    LongAddArgsTemplate: &LongAddArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return ` + ${rhs}`;\n        }\n    LongSubtractTemplate: &LongSubtractTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    LongSubtractArgsTemplate: &LongSubtractArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return ` - ${rhs}`;\n        }\n    LongMultiplyTemplate: &LongMultiplyTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    LongMultiplyArgsTemplate: &LongMultiplyArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return ` * ${rhs}`;\n        }\n    LongDivTemplate: &LongDivTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    LongDivArgsTemplate: &LongDivArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return ` / ${rhs}`;\n        }\n    LongModuloTemplate: &LongModuloTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    LongModuloArgsTemplate: &LongModuloArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return ` % ${rhs}`;\n        }\n    LongAndTemplate: &LongAndTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    LongAndArgsTemplate: &LongAndArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return ` & ${rhs}`;\n        }\n    LongOrTemplate: &LongOrTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    LongOrArgsTemplate: &LongOrArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return ` | ${rhs}`;\n        }\n    LongXorTemplate: &LongXorTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    LongXorArgsTemplate: &LongXorArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return ` ^ ${rhs}`;\n        }\n    LongShiftLeftTemplate: &LongShiftLeftTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    LongShiftLeftArgsTemplate: &LongShiftLeftArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return ` << ${rhs}`;\n        }\n    LongShiftRightTemplate: &LongShiftRightTemplate !!js/function >\n        () => {\n            return '';\n        }\n    LongShiftRightArgsTemplate: &LongShiftRightArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return `${lhs} >> ${rhs}`;\n        }\n    LongCompareTemplate: &LongCompareTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    LongCompareArgsTemplate: &LongCompareArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return ` - ${rhs}`;\n        }\n    LongIsOddTemplate: &LongIsOddTemplate !!js/function >\n        (lhs) => {\n            return `(${lhs} % 2)`;\n        }\n    LongIsOddArgsTemplate: &LongIsOddArgsTemplate !!js/function >\n        () => {\n            return ' == 1';\n        }\n    LongIsZeroTemplate: &LongIsZeroTemplate !!js/function >\n        () => {\n            return '';\n        }\n    LongIsZeroArgsTemplate: &LongIsZeroArgsTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} == 0`;\n        }\n    LongIsNegativeTemplate: &LongIsNegativeTemplate !!js/function >\n        () => {\n            return '';\n        }\n    LongIsNegativeArgsTemplate: &LongIsNegativeArgsTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} < 0`;\n        }\n    LongNegateTemplate: &LongNegateTemplate !!js/function >\n        () => {\n            return '-';\n        }\n    LongNegateArgsTemplate: &LongNegateArgsTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    LongNotTemplate: &LongNotTemplate !!js/function >\n        () => {\n            return '~';\n        }\n    LongNotArgsTemplate: &LongNotArgsTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    LongNotEqualsTemplate: &LongNotEqualsTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    LongNotEqualsArgsTemplate: &LongNotEqualsArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return ` != ${rhs}`;\n        }\n    LongGreaterThanTemplate: &LongGreaterThanTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    LongGreaterThanArgsTemplate: &LongGreaterThanArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return ` > ${rhs}`;\n        }\n    LongGreaterThanOrEqualTemplate: &LongGreaterThanOrEqualTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    LongGreaterThanOrEqualArgsTemplate: &LongGreaterThanOrEqualArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return ` >= ${rhs}`;\n        }\n    LongLessThanTemplate: &LongLessThanTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    LongLessThanArgsTemplate: &LongLessThanArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return ` < ${rhs}`;\n        }\n    LongLessThanOrEqualTemplate: &LongLessThanOrEqualTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    LongLessThanOrEqualArgsTemplate: &LongLessThanOrEqualArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return ` <= ${rhs}`;\n        }\n    LongFloatApproxTemplate: &LongFloatApproxTemplate !!js/function >\n        (lhs) => {\n            return `float(${lhs})`;\n        }\n    LongTopTemplate: &LongTopTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} >> 32`;\n        }\n    LongBottomTemplate: &LongBottomTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} & 0x0000ffff`;\n        }\n    TimestampToStringTemplate: &TimestampToStringTemplate !!js/function >\n        () => {\n            return '';\n        }\n    TimestampToStringArgsTemplate: &TimestampToStringArgsTemplate !!js/function >\n        (lhs) => {\n            return `str(${lhs})`;\n        }\n    TimestampEqualsTemplate: &TimestampEqualsTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    TimestampEqualsArgsTemplate: &TimestampEqualsArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return ` == ${rhs}`;\n        }\n    TimestampGetLowBitsTemplate: &TimestampGetLowBitsTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    TimestampGetLowBitsArgsTemplate: &TimestampGetLowBitsArgsTemplate !!js/function >\n        (lhs) => {\n            return '.time';\n        }\n    TimestampGetHighBitsTemplate: &TimestampGetHighBitsTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    TimestampGetHighBitsArgsTemplate: &TimestampGetHighBitsArgsTemplate !!js/function >\n        (lhs) => {\n            return '.inc';\n        }\n    TimestampTTemplate: &TimestampTTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.time`;\n        }\n    TimestampITemplate: &TimestampITemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.inc`;\n        }\n    TimestampCompareTemplate: &TimestampCompareTemplate !!js/function >\n        () => {\n            return '';\n        }\n    TimestampCompareArgsTemplate: &TimestampCompareArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return `(${lhs}.as_datetime() - ${rhs}.as_datetime()).total_seconds()`;\n        }\n    TimestampNotEqualsTemplate: &TimestampNotEqualsTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    TimestampNotEqualsArgsTemplate: &TimestampNotEqualsArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return ` != ${rhs}`;\n        }\n    TimestampGreaterThanTemplate: &TimestampGreaterThanTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    TimestampGreaterThanArgsTemplate: &TimestampGreaterThanArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return ` > ${rhs}`;\n        }\n    TimestampGreaterThanOrEqualTemplate: &TimestampGreaterThanOrEqualTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    TimestampGreaterThanOrEqualArgsTemplate: &TimestampGreaterThanOrEqualArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return ` >= ${rhs}`;\n        }\n    TimestampLessThanTemplate: &TimestampLessThanTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    TimestampLessThanArgsTemplate: &TimestampLessThanArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return ` < ${rhs}`;\n        }\n    TimestampLessThanOrEqualTemplate: &TimestampLessThanOrEqualTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    TimestampLessThanOrEqualArgsTemplate: &TimestampLessThanOrEqualArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return ` <= ${rhs}`;\n        }\n    SymbolValueOfTemplate: &SymbolValueOfTemplate !!js/function >\n        () => {\n            return '';\n        }\n    SymbolValueOfArgsTemplate: &SymbolValueOfArgsTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    SymbolInspectTemplate: &SymbolInspectTemplate !!js/function >\n        () => {\n            return '';\n        }\n    SymbolInspectArgsTemplate: &SymbolInspectArgsTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    SymbolToStringTemplate: &SymbolToStringTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    SymbolToStringArgsTemplate: &SymbolToStringArgsTemplate !!js/function >\n        (lhs) => {\n            return '';\n        }\n    # Symbol Templates\n    CodeSymbolTemplate: &CodeSymbolTemplate !!js/function >\n        () => {\n            return 'Code';\n        }\n    CodeSymbolArgsTemplate: &CodeSymbolArgsTemplate !!js/function >\n        (lhs, code, scope) => {\n          // Single quote stringify\n          const scopestr = scope === undefined ? '' : `, ${scope}`;\n          let newStr = code === undefined ? '' : code;\n          const str = newStr;\n          if (\n            (str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'') ||\n            (str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"')) {\n            newStr = str.substr(1, str.length - 2);\n          }\n          code = `'${newStr.replace(/\\\\([\\s\\S])|(\")/g, '\\\\$1$2')}'`;\n          return `(${code}${scopestr})`;\n        }\n    ObjectIdSymbolTemplate: &ObjectIdSymbolTemplate null\n    ObjectIdSymbolArgsTemplate: &ObjectIdSymbolArgsTemplate !!js/function >\n        (lhs, str) => {\n          let newStr = str;\n          if (\n            (str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'') ||\n            (str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"')) {\n            newStr = str.substr(1, str.length - 2);\n          }\n          return `('${newStr.replace(/\\\\([\\s\\S])|(\")/g, '\\\\$1$2')}')`;\n        }\n    BinarySymbolTemplate: &BinarySymbolTemplate null\n    BinarySymbolArgsTemplate: &BinarySymbolArgsTemplate !!js/function >\n        (lhs, bytes, type) => {\n            const str = bytes;\n            let newStr = str;\n            if (\n              (str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'') ||\n              (str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"')) {\n                newStr = str.substr(1, str.length - 2);\n            }\n            bytes = `'${newStr.replace(/\\\\([\\s\\S])|(')/g, '\\\\$1$2')}'`;\n\n            if (type === null) {\n                return `(b${bytes})`;\n            }\n            return `(b${bytes}, ${type})`;\n        }\n    BinarySymbolSubtypeDefaultTemplate: &BinarySymbolSubtypeDefaultTemplate !!js/function >\n        () => {\n            return 'binary.BINARY_SUBTYPE';\n        }\n    BinarySymbolSubtypeFunctionTemplate: &BinarySymbolSubtypeFunctionTemplate !!js/function >\n        () => {\n            return 'binary.FUNCTION_SUBTYPE';\n        }\n    BinarySymbolSubtypeByteArrayTemplate: &BinarySymbolSubtypeByteArrayTemplate !!js/function >\n        () => {\n            return 'binary.BINARY_SUBTYPE';\n        }\n    BinarySymbolSubtypeUuidOldTemplate: &BinarySymbolSubtypeUuidOldTemplate !!js/function >\n        () => {\n            return 'binary.OLD_UUID_SUBTYPE';\n        }\n    BinarySymbolSubtypeUuidTemplate: &BinarySymbolSubtypeUuidTemplate !!js/function >\n        () => {\n            return 'binary.UUID_SUBTYPE';\n        }\n    BinarySymbolSubtypeMd5Template: &BinarySymbolSubtypeMd5Template !!js/function >\n        () => {\n            return 'binary.MD5_SUBTYPE';\n        }\n    BinarySymbolSubtypeUserDefinedTemplate: &BinarySymbolSubtypeUserDefinedTemplate !!js/function >\n        () => {\n            return 'binary.USER_DEFINED_SUBTYPE';\n        }\n    DBRefSymbolTemplate: &DBRefSymbolTemplate null\n    DBRefSymbolArgsTemplate: &DBRefSymbolArgsTemplate null\n    DoubleSymbolTemplate: &DoubleSymbolTemplate !!js/function >\n        () => {\n            return 'float';\n        }\n    DoubleSymbolArgsTemplate: &DoubleSymbolArgsTemplate null\n    Int32SymbolTemplate: &Int32SymbolTemplate !!js/function >\n        () => {\n            return 'int';\n        }\n    Int32SymbolArgsTemplate: &Int32SymbolArgsTemplate !!js/function >\n        (lhs, arg) => {\n            arg = arg === undefined ? 0 : arg;\n            const str = arg.toString();\n            let newStr = str;\n            if (\n                (str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'') ||\n                (str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"')) {\n                newStr = str.substr(1, str.length - 2);\n                return `('${newStr}')`;\n            } else {\n                return `(${newStr})`;\n            }\n        }\n    LongSymbolTemplate: &LongSymbolTemplate !!js/function >\n        () => {\n            return 'Int64';\n        }\n    LongSymbolArgsTemplate: &LongSymbolArgsTemplate null\n    LongSymbolMaxTemplate: &LongSymbolMaxTemplate !!js/function >\n        () => {\n            return 'sys.maxsize';\n        }\n    LongSymbolMaxArgsTemplate: &LongSymbolMaxArgsTemplate null\n    LongSymbolMinTemplate: &LongSymbolMinTemplate !!js/function >\n        () => {\n            return '-sys.maxsize -1';\n        }\n    LongSymbolMinArgsTemplate: &LongSymbolMinArgsTemplate null\n    LongSymbolZeroTemplate: &LongSymbolZeroTemplate !!js/function >\n        () => {\n            return 'Int64(0)';\n        }\n    LongSymbolZeroArgsTemplate: &LongSymbolZeroArgsTemplate null\n    LongSymbolOneTemplate: &LongSymbolOneTemplate !!js/function >\n        () => {\n            return 'Int64(1)';\n        }\n    LongSymbolOneArgsTemplate: &LongSymbolOneArgsTemplate null\n    LongSymbolNegOneTemplate: &LongSymbolNegOneTemplate !!js/function >\n        () => {\n            return 'Int64(-1)';\n        }\n    LongSymbolNegOneArgsTemplate: &LongSymbolNegOneArgsTemplate null\n    LongSymbolFromBitsTemplate: &LongSymbolFromBitsTemplate null\n    LongSymbolFromBitsArgsTemplate: &LongSymbolFromBitsArgsTemplate null\n    LongSymbolFromIntTemplate: &LongSymbolFromIntTemplate !!js/function >\n        () => {\n            return 'Int64';\n        }\n    LongSymbolFromIntArgsTemplate: &LongSymbolFromIntArgsTemplate null\n    LongSymbolFromNumberTemplate: &LongSymbolFromNumberTemplate !!js/function >\n        () => {\n            return 'Int64';\n        }\n    LongSymbolFromNumberArgsTemplate: &LongSymbolFromNumberArgsTemplate null\n    LongSymbolFromStringTemplate: &LongSymbolFromStringTemplate !!js/function >\n        (lhs, arg) => {\n            return 'Int64';\n        }\n    LongSymbolFromStringArgsTemplate: &LongSymbolFromStringArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return `(int(${arg}))`;\n        }\n    MinKeySymbolTemplate: &MinKeySymbolTemplate null\n    MinKeySymbolArgsTemplate: &MinKeySymbolArgsTemplate null\n    MaxKeySymbolTemplate: &MaxKeySymbolTemplate null\n    MaxKeySymbolArgsTemplate: &MaxKeySymbolArgsTemplate null\n    TimestampSymbolTemplate: &TimestampSymbolTemplate !!js/function >\n        () => {\n            return 'Timestamp';\n        }\n    TimestampSymbolArgsTemplate: &TimestampSymbolArgsTemplate !!js/function >\n        (lhs, arg1, arg2) => {\n            return `(${arg1 === undefined ? 0 : arg1}, ${arg2 === undefined ? 0 : arg2})`;\n        }\n    SymbolSymbolTemplate: &SymbolSymbolTemplate !!js/function >\n        () => {\n            return '';\n        }\n    SymbolSymbolArgsTemplate: &SymbolSymbolArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return arg;\n        }\n    BSONRegExpSymbolTemplate: &BSONRegExpSymbolTemplate !!js/function >\n        () => {\n            return 'Regex';\n        }\n    BSONRegExpSymbolArgsTemplate: &BSONRegExpSymbolArgsTemplate !!js/function >\n        (lhs, pattern, flags) => {\n            return `(${pattern}${flags ? ', ' + flags : ''})`;\n        }\n    Decimal128SymbolTemplate: &Decimal128SymbolTemplate !!js/function >\n        () => {\n            return 'Decimal128';\n        }\n    Decimal128SymbolArgsTemplate: &Decimal128SymbolArgsTemplate !!js/function >\n        (lhs, str) => {\n          let newStr = str;\n          if (\n            (str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'') ||\n            (str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"')) {\n            newStr = str.substr(1, str.length - 2);\n          }\n          return `('${newStr.replace(/\\\\([\\s\\S])|(\")/g, '\\\\$1$2')}')`;\n        }\n    Decimal128SymbolFromStringTemplate: &Decimal128SymbolFromStringTemplate !!js/function >\n        () => {\n            return '';\n        }\n    Decimal128SymbolFromStringArgsTemplate: &Decimal128SymbolFromStringArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return `Decimal128(${arg})`;\n        }\n    Decimal128ToStringTemplate: &Decimal128ToStringTemplate !!js/function >\n        () => {\n            return '';\n        }\n    Decimal128ToStringArgsTemplate: &Decimal128ToStringArgsTemplate !!js/function >\n        (lhs) => {\n            return `str(${lhs})`;\n        }\n    # BSON Util Templates\n    ObjectIdCreateFromHexStringTemplate: &ObjectIdCreateFromHexStringTemplate !!js/function >\n        () => {\n            return '';\n        }\n    ObjectIdCreateFromHexStringArgsTemplate: &ObjectIdCreateFromHexStringArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return `ObjectId(${arg})`;\n        }\n    ObjectIdCreateFromTimeTemplate: &ObjectIdCreateFromTimeTemplate null\n    ObjectIdCreateFromTimeArgsTemplate: &ObjectIdCreateFromTimeArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return `ObjectId.from_datetime(${arg})`;\n        }\n    ObjectIdIsValidTemplate: &ObjectIdIsValidTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}.is_valid`;\n        }\n    ObjectIdIsValidArgsTemplate: &ObjectIdIsValidArgsTemplate null\n    # JS Symbol Templates\n    ObjectSymbolTemplate: &ObjectSymbolTemplate null\n    ObjectSymbolArgsTemplate: &ObjectSymbolArgsTemplate null\n    ObjectSymbolCreateTemplate: &ObjectSymbolCreateTemplate !!js/function >\n        () => {\n            return '';\n        }\n    ObjectSymbolCreateArgsTemplate: &ObjectSymbolCreateArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return arg;\n        }\n    NumberSymbolTemplate: &NumberSymbolTemplate !!js/function >\n        () => {\n            return '';\n        }\n    NumberSymbolArgsTemplate: &NumberSymbolArgsTemplate !!js/function >\n        (lhs, arg) => {\n            arg = arg === undefined ? 0 : arg;\n            const str = arg.toString();\n            let newStr = str;\n            if (\n                (str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'') ||\n                (str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"')) {\n                newStr = str.substr(1, str.length - 2);\n                return `float('${newStr}')`;\n            } else {\n                return `${newStr}`;\n            }\n        }\n    DateSymbolTemplate: &DateSymbolTemplate null\n    DateSymbolArgsTemplate: &DateSymbolArgsTemplate null\n    DateSymbolNowTemplate: &DateSymbolNowTemplate !!js/function >\n        () => {\n            return 'datetime.datetime.utcnow';\n        }\n    DateSymbolNowArgsTemplate: &DateSymbolNowArgsTemplate null\n    RegExpSymbolTemplate: &RegExpSymbolTemplate null\n    RegExpSymbolArgsTemplate: &RegExpSymbolArgsTemplate null\n# Universal types\n# Everything inherits from StringType because we haven't implemented any of them.\nBasicTypes:\n    # Universal basic types\n    _string: &StringType\n        <<: *__type\n        id: \"_string\"\n        template: *StringTypeTemplate\n    _regex: &RegexType\n        <<: *__type\n        id: \"_regex\"\n        template: *RegexTypeTemplate\n    _bool: &BoolType\n        <<: *__type\n        id: \"_bool\"\n        template: *BoolTypeTemplate\n    _integer: &IntegerType\n        <<: *__type\n        id: \"_integer\"\n        template: *IntegerTypeTemplate\n    _long: &LongBasicType\n        <<: *__type\n        id: \"_long\"\n        template: *LongBasicTypeTemplate\n    _decimal: &DecimalType\n        <<: *__type\n        id: \"_decimal\"\n        template: *DecimalTypeTemplate\n    _hex: &HexType\n        <<: *__type\n        id: \"_hex\"\n        template: *HexTypeTemplate\n    _octal: &OctalType\n        <<: *__type\n        id: \"_octal\"\n        template: *OctalTypeTemplate\n    _numeric: &NumericType\n        <<: *__type\n        id: \"_numeric\"\n        template: *NumericTypeTemplate\n    _array: &ArrayType\n        <<: *__type\n        id: \"_array\"\n        template: *ArrayTypeTemplate\n    _object: &ObjectType\n        <<: *__type\n        id: \"_object\"\n        template: *ObjectTypeTemplate\n        argsTemplate: *ObjectTypeArgsTemplate\n    _null: &NullType\n        <<: *__type\n        id: \"_null\"\n        template: *NullTypeTemplate\n    _undefined: &UndefinedType\n        <<: *__type\n        id: \"_undefined\"\n        template: *UndefinedTypeTemplate\n\nBsonTypes:\n    Code: &CodeType\n        <<: *__type\n        id: \"Code\"\n        type: *ObjectType\n        attr:\n            code:\n                callable: *var\n                args: null\n                attr: null\n                id: \"code\"\n                type: *StringType\n                template: *CodeCodeTemplate\n                argsTemplate: *CodeCodeArgsTemplate\n            scope:\n                callable: *var\n                args: null\n                attr: null\n                id: \"scope\"\n                type: *StringType\n                template: *CodeScopeTemplate\n                argsTemplate: *CodeScopeArgsTemplate\n        template: *CodeTypeTemplate\n    ObjectId: &ObjectIdType\n        <<: *__type\n        id: \"ObjectId\"\n        type: *ObjectType\n        attr:\n            toString:\n                <<: *__func\n                id: \"toString\"\n                type: *StringType\n                template: *ObjectIdToStringTemplate\n                argsTemplate: *ObjectIdToStringArgsTemplate\n            equals:\n                <<: *__func\n                id: \"equals\"\n                args:\n                    - [ \"ObjectId\" ]\n                type: *BoolType\n                template: *ObjectIdEqualsTemplate\n                argsTemplate: *ObjectIdEqualsArgsTemplate\n            getTimestamp:\n                <<: *__func\n                id: \"getTimestamp\"\n                type: *IntegerType\n                template: *ObjectIdGetTimestampTemplate\n                argsTemplate: *ObjectIdGetTimestampArgsTemplate\n    BinData: &BinaryType\n        <<: *__type\n        id: \"BinData\"\n        type: *ObjectType\n        attr:\n            toString:\n                <<: *__func\n                id: \"toString\"\n                type: *StringType\n                template: *BinaryToStringTemplate\n                argsTemplate: *BinaryToStringArgsTemplate\n            base64:\n                <<: *__func\n                id: \"base64\"\n                type: *StringType\n                template: *BinaryValueTemplate\n                argsTemplate: *BinaryValueArgsTemplate\n            length:\n                <<: *__func\n                id: \"length\"\n                type: *IntegerType\n                template: *BinaryLengthTemplate\n                argsTemplate: *BinaryLengthArgsTemplate\n            subtype:\n                <<: *__func\n                id: \"subtype\"\n                type: *IntegerType\n                template: *BinarySubtypeTemplate\n                argsTemplate: *BinarySubtypeArgsTemplate\n    DBRef: &DBRefType\n        <<: *__type\n        id: \"DBRef\"\n        type: *ObjectType\n        attr:\n            toString:\n                <<: *__func\n                id: \"toString\"\n                type: *StringType\n                template: *DBRefToStringTemplate\n                argsTemplate: *DBRefToStringArgsTemplate\n            getDb:\n                <<: *__func\n                id: \"getDb\"\n                type: *StringType\n                template: *DBRefGetDBTemplate\n                argsTemplate: *DBRefGetDBArgsTemplate\n            $db:\n                callable: *var\n                args: null\n                attr: null\n                id: \"$db\"\n                type: *StringType\n                template: *DBRefGetDBTemplate\n                argsTemplate: *DBRefGetDBArgsTemplate\n            getCollection:\n                <<: *__func\n                id: \"getCollection\"\n                type: *StringType\n                template: *DBRefGetCollectionTemplate\n                argsTemplate: *DBRefGetCollectionArgsTemplate\n            getRef:\n                <<: *__func\n                id: \"getRef\"\n                type: *StringType\n                template: *DBRefGetCollectionTemplate\n                argsTemplate: *DBRefGetCollectionArgsTemplate\n            $ref:\n                callable: *var\n                args: null\n                attr: null\n                id: \"$ref\"\n                type: *StringType\n                template: *DBRefGetCollectionTemplate\n                argsTemplate: *DBRefGetCollectionArgsTemplate\n            getId:\n                <<: *__func\n                id: \"getId\"\n                type: *StringType\n                template: *DBRefGetIdTemplate\n                argsTemplate: *DBRefGetIdArgsTemplate\n            $id:\n                callable: *var\n                args: null\n                attr: null\n                id: \"$id\"\n                type: *StringType\n                template: *DBRefGetIdTemplate\n                argsTemplate: *DBRefGetIdArgsTemplate\n    NumberInt: &Int32Type\n        <<: *__type\n        id: \"NumberInt\"\n        type: *ObjectType\n        attr:\n            toString:\n                <<: *__func\n                id: \"toString\"\n                type: *StringType\n                template: *Int32ToStringTemplate\n                argsTemplate: *Int32ToStringArgsTemplate\n            valueOf: # TODO: needed?\n                <<: *__func\n                id: \"valueOf\"\n                type: *Int32Type\n                template: *Int32ValueOfTemplate\n                argsTemplate: *Int32ValueOfArgsTemplate\n    NumberLong: &LongType\n        <<: *__type\n        id: \"NumberLong\"\n        type: *ObjectType\n        attr:\n            toString:\n                <<: *__func\n                id: \"LongtoString\" # Needs emit method\n                type: *StringType\n            valueOf:\n                <<: *__func\n                id: \"valueOf\"\n                type: *LongBasicType\n                template: *LongValueOfTemplate\n                argsTemplate: *LongValueOfArgsTemplate\n            top:\n                callable: *var\n                args: null\n                attr: null\n                id: \"top\"\n                type: *IntegerType\n                template: *LongTopTemplate\n                argsTemplate: null\n            bottom:\n                callable: *var\n                args: null\n                attr: null\n                id: \"bottom\"\n                type: *IntegerType\n                template: *LongBottomTemplate\n                argsTemplate: null\n            floatApprox:\n                callable: *var\n                args: null\n                attr: null\n                id: \"floatApprox\"\n                type: *IntegerType\n                template: *LongFloatApproxTemplate\n                argsTemplate: null\n    MinKeyType: &MinKeyType\n        <<: *__type\n        id: \"MinKey\"\n        type: *ObjectType\n    MaxKeyType: &MaxKeyType\n        <<: *__type\n        id: \"MaxKey\"\n        type: *ObjectType\n    Timestamp: &TimestampType\n        <<: *__type\n        id: \"TimestampFromShell\"\n        type: *ObjectType\n        attr:\n            toString:\n                <<: *__func\n                id: \"toString\"\n                type: *StringType\n                template: *TimestampToStringTemplate\n                argsTemplate: *TimestampToStringArgsTemplate\n            getTime:\n                <<: *__func\n                id: \"getTime\"\n                type: *IntegerType\n                template: *TimestampGetLowBitsTemplate\n                argsTemplate: *TimestampGetLowBitsArgsTemplate\n            getInc:\n                <<: *__func\n                id: \"getInc\"\n                type: *IntegerType\n                template: *TimestampGetHighBitsTemplate\n                argsTemplate: *TimestampGetHighBitsArgsTemplate\n            t:\n                callable: *var\n                args: null\n                attr: null\n                id: \"getTime\"\n                type: *IntegerType\n                template: *TimestampTTemplate\n                argsTemplate: null\n            i:\n                callable: *var\n                args: null\n                attr: null\n                id: \"getInc\"\n                type: *IntegerType\n                template: *TimestampITemplate\n                argsTemplate: null\n    Symbol: &SymbolType\n        <<: *__type\n        id: \"Symbol\"\n        type: *ObjectType\n    NumberDecimal: &Decimal128Type\n        <<: *__type\n        id: \"NumberDecimal\"\n        type: *ObjectType\n        attr:\n            toString:\n                <<: *__func\n                id: \"toString\"\n                type: *StringType\n                template: *Decimal128ToStringTemplate\n                argsTemplate: *Decimal128ToStringArgsTemplate\n    SUBTYPE_DEFAULT:\n        id: \"SUBTYPE_DEFAULT\"\n        callable: *var\n        args: null\n        type: *IntegerType\n        template: *BinarySymbolSubtypeDefaultTemplate\n    SUBTYPE_FUNCTION:\n        id: \"SUBTYPE_FUNCTION\"\n        callable: *var\n        args: null\n        type: *IntegerType\n        template: *BinarySymbolSubtypeFunctionTemplate\n    SUBTYPE_BYTE_ARRAY:\n        id: \"SUBTYPE_BYTE_ARRAY\"\n        callable: *var\n        args: null\n        type: *IntegerType\n        template: *BinarySymbolSubtypeByteArrayTemplate\n    SUBTYPE_UUID_OLD:\n        id: \"SUBTYPE_UUID_OLD\"\n        callable: *var\n        args: null\n        type: *IntegerType\n        template: *BinarySymbolSubtypeUuidOldTemplate\n    SUBTYPE_UUID:\n        id: \"SUBTYPE_UUID\"\n        callable: *var\n        args: null\n        type: *IntegerType\n        template: *BinarySymbolSubtypeUuidTemplate\n    SUBTYPE_MD5:\n        id: \"SUBTYPE_MD5\"\n        callable: *var\n        args: null\n        type: *IntegerType\n        template: *BinarySymbolSubtypeMd5Template\n    SUBTYPE_USER_DEFINED:\n        id: \"SUBTYPE_USER_DEFINED\"\n        callable: *var\n        args: null\n        type: *IntegerType\n        template: *BinarySymbolSubtypeUserDefinedTemplate\nJSTypes:\n    Date: &DateType\n        <<: *__type\n        id: \"Date\"\n        type: *ObjectType\n        attr: {} # TODO: no built-in date methods added yet\n    RegExp: &RegExpType\n        <<: *__type\n        id: \"RegExp\"\n        type: *ObjectType\n        attr: {}\n\n\n\n\nBsonSymbols:\n    Code: &CodeSymbol\n        id: \"Code\"\n        callable: *constructor\n        args:\n            - [ *StringType, null ]\n            - [ *ObjectType, null ]\n        type: *CodeType\n        attr: {}\n        template: *CodeSymbolTemplate\n        argsTemplate: *CodeSymbolArgsTemplate\n    ObjectId: &ObjectIdSymbol\n        id: \"ObjectId\"\n        callable: *constructor\n        args:\n            - [ *StringType, null ]\n        type: *ObjectIdType\n        attr:\n            fromDate:\n                <<: *__func\n                id: \"ObjectIdCreateFromTime\"\n                args:\n                    - [ *DateType ]\n                type: *ObjectIdType\n                template: *ObjectIdCreateFromTimeTemplate\n                argsTemplate: *ObjectIdCreateFromTimeArgsTemplate\n        template: *ObjectIdSymbolTemplate\n        argsTemplate: *ObjectIdSymbolArgsTemplate\n    BinData: &BinarySymbol\n        id: \"BinData\"\n        callable: *constructor\n        args:\n            - [ *IntegerType ]\n            - [ *StringType ]\n        type: *BinaryType\n        attr: {}\n        template: *BinarySymbolTemplate\n        argsTemplate: *BinarySymbolArgsTemplate\n    DBRef:\n        id: \"DBRef\"\n        callable: *constructor\n        args:\n            - [ *StringType ]\n            - [ *ObjectIdType ]\n            - [ *StringType, null ]\n        type: *DBRefType\n        attr: {}\n        template: *DBRefSymbolTemplate\n        argsTemplate: *DBRefSymbolArgsTemplate\n    NumberInt:\n        id: \"Int32\"\n        callable: *constructor\n        args:\n            - [ *IntegerType, *StringType, null ]\n        type: *Int32Type\n        attr: {}\n        template: *Int32SymbolTemplate\n        argsTemplate: *Int32SymbolArgsTemplate\n    NumberLong:\n        id: \"NumberLong\"\n        callable: *constructor\n        args:\n            - [ *IntegerType, *StringType, null ]\n        type: *LongType\n        attr: {}\n        template: *LongSymbolTemplate\n        argsTemplate: *LongSymbolArgsTemplate\n    MinKey:\n        id: \"MinKey\"\n        callable: *constructor\n        args: []\n        type: *MinKeyType\n        attr: {}\n        template: *MinKeySymbolTemplate\n        argsTemplate: *MinKeySymbolArgsTemplate\n    MaxKey:\n        id: \"MaxKey\"\n        callable: *constructor\n        args: []\n        type: *MaxKeyType\n        attr: {}\n        template: *MaxKeySymbolTemplate\n        argsTemplate: *MaxKeySymbolArgsTemplate\n    Timestamp:\n        id: \"Timestamp\"\n        callable: *constructor\n        args:\n            - [ *IntegerType, null ]\n            - [ *IntegerType, null ]\n        type: *TimestampType\n        attr: {}\n        template: *TimestampSymbolTemplate\n        argsTemplate: *TimestampSymbolArgsTemplate\n    Symbol:\n        id: \"Symbol\"\n        callable: *constructor\n        args:\n            - [ *StringType ]\n        type: *SymbolType\n        attr: {}\n        template: *SymbolSymbolTemplate\n        argsTemplate: *SymbolSymbolArgsTemplate\n    NumberDecimal:\n        id: \"NumberDecimal\"\n        callable: *constructor\n        args:\n            - [ *StringType, *NumericType, null ]\n        type: *Decimal128Type\n        attr: {}\n        template: *Decimal128SymbolTemplate\n        argsTemplate: *Decimal128SymbolArgsTemplate\n\nJSSymbols:\n    Object:\n        id: \"Object\"\n        callable: *var\n        args: null\n        type: *ObjectType\n        attr:\n            create:\n                id: \"create\"\n                callable: *func\n                args:\n                    - [ *ObjectType ]\n                type: *ObjectType\n                attr: {}\n                template: *ObjectSymbolCreateTemplate\n                argsTemplate: *ObjectSymbolCreateArgsTemplate\n        template: *ObjectSymbolTemplate\n        argsTemplate: *ObjectSymbolArgsTemplate\n    Number:\n        id: \"Number\"\n        callable: *constructor\n        args:\n            - [ *IntegerType, *StringType, null ]\n        type: *NumericType\n        attr: {} # TODO: no built-in number funcs added yet\n        template: *NumberSymbolTemplate\n        argsTemplate: *NumberSymbolArgsTemplate\n    Date: # Needs emit method\n        id: \"Date\"\n        callable: *constructor\n        args:\n            - [ *StringType, *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n        type: *DateType\n        attr: # TODO: add more date funcs?\n            now:\n                id: \"now\"\n                callable: *constructor\n                args: []\n                type: *DateType\n                attr: {}\n                template: *DateSymbolNowTemplate\n                argsTemplate: *DateSymbolNowArgsTemplate\n        template: *DateSymbolTemplate\n        argsTemplate: *DateSymbolArgsTemplate\n    ISODate: # Needs emit method\n        id: \"ISODate\"\n        callable: *constructor\n        args:\n            - [ *StringType, null ]\n        type: *DateType\n        attr:\n            now:\n                id: \"now\"\n                callable: *constructor\n                args: []\n                type: *DateType\n                attr: {}\n                template: *DateSymbolNowTemplate\n                argsTemplate: *DateSymbolNowArgsTemplate\n        template: *DateSymbolTemplate\n        argsTemplate: *DateSymbolArgsTemplate\n    RegExp: # Needs emit method\n        id: \"RegExp\"\n        callable: *constructor\n        args:\n            - [ *StringType, *RegexType ]\n            - [ *StringType, null ]\n        type: *RegExpType\n        attr: {} # TODO: no built-in regex funcs added yet\n        template: *RegExpSymbolTemplate\n        argsTemplate: *RegExpSymbolArgsTemplate\n\n";
