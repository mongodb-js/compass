module.exports="SymbolTypes:\n    VAR: &var 0\n    CONSTRUCTOR: &constructor 1\n    FUNC: &func 2\n# Internal patterns to save typing\n__type: &__type\n    id: null\n    callable: *var\n    args: null\n    type: null\n    attr: {}\n    template: null\n    argsTemplate: null\n__func: &__func\n    callable: *func\n    args: []\n    attr: {}\n    template: null\n    argsTemplate: null\n\n#############################################\n#             Sample Templates              #\n#                                           #\n# The expected arguments are commented next #\n# to the template itself. Currently all are #\n# set to null, but to define a function     #\n# replace 'null' with '!!js/function > \\n   #\n# and a function defined below.             #\n#                                           #\n# See the other template files for examples #\n#                                           #\n#               Good to know:               #\n# lhs is left-hand-side of the expression   #\n# rhs is right-hand-side of the expression  #\n# All args are strings unless noted         #\n#    - arg? is boolean                      #\n#    - arg# is number                       #\n#                                           #\n#############################################\nTemplates:\n    ########\n    # Misc #\n    ########\n\n    # Filter out regex flags that have translations or are unsupported.\n    RegexFlags: &RegexFlags\n        i: 'i'\n        m: 'm'\n        u: 'u'\n        y: 'y'\n        g: 'g'\n    BSONRegexFlags: &BSONRegexFlags\n        i: 'i'\n        m: 'm'\n        x: 'x'\n        s: 's'\n        l: 'l'\n        u: 'u'\n\n    #############################################\n    #                  Syntax                   #\n    #                                           #\n    # Templates for language syntax expressions #\n    #                                           #\n    #############################################\n\n    EqualitySyntaxTemplate: &EqualitySyntaxTemplate !!js/function >\n        (lhs, op, rhs) => {\n            if (op.includes('!') || op.includes('not')) {\n                return lhs !== rhs;\n            }\n            if (op === '==' || op === '===' || op === 'is') {\n                if (typeof(lhs) === 'object' && 'equals' in lhs) {\n                    // Use '.equals' for objects, if it exists.\n                    return lhs.equals(rhs);\n                }\n                return lhs === rhs;\n            }\n            if (op === '>') {\n                return lhs > rhs;\n            }\n            if (op === '<') {\n                return lhs < rhs;\n            }\n            if (op === '>=') {\n                return lhs >= rhs;\n            }\n            if (op === '<=') {\n                return lhs <= rhs;\n            }\n            throw new Error(`unrecognized operation: ${op}`);\n        }\n    InSyntaxTemplate: &InSyntaxTemplate !!js/function >\n        (lhs, op, rhs) => {\n            if (op.includes('!') || op.includes('not')) {\n                if (typeof rhs === 'array') {\n                    return rhs.indexOf(lhs) === -1;\n                }\n                return !(lhs in rhs);\n            }\n            if (typeof rhs === 'array') {\n                return rhs.indexOf(lhs) !== -1;\n            }\n            return lhs in rhs;\n        }\n\n    AndSyntaxTemplate: &AndSyntaxTemplate !!js/function >\n        (args) => {\n            return args.reduce((t, k, i) => {\n                return t && k;\n            });\n        }\n    OrSyntaxTemplate: &OrSyntaxTemplate !!js/function >\n        (args) => {\n            return args.reduce((t, k, i) => {\n                return t || k;\n            });\n        }\n    NotSyntaxTemplate: &NotSyntaxTemplate !!js/function >\n        (arg) => {\n            return !arg;\n        }\n    UnarySyntaxTemplate: &UnarySyntaxTemplate !!js/function >\n        (op, arg) => {\n            switch(op) {\n                case '+':\n                    return +arg;\n                case '-':\n                    return -arg;\n                case '~':\n                    return ~arg;\n                default:\n                    throw new Error(`unrecognized operation: ${op}`);\n            }\n        }\n    BinarySyntaxTemplate: &BinarySyntaxTemplate !!js/function >\n        (args) => {\n            return args.reduce((s, op, i, arr) => {\n                if (i % 2 === 0) {\n                    return s;\n                }\n                const rhs = arr[i + 1];\n                switch(op) {\n                    case '+':\n                        return s + rhs;\n                    case '-':\n                        return s - rhs;\n                    case '*':\n                        return s * rhs;\n                    case '/':\n                        return s / rhs;\n                    case '**':\n                        return Math.pow(s, rhs);\n                    case '//':\n                        return Math.floor(s, rhs);\n                    case '%':\n                        return s % rhs;\n                    case '>>':\n                        return s >> rhs;\n                    case '<<':\n                        return s << rhs;\n                    case '|':\n                        return s | rhs;\n                    case '&':\n                        return s & rhs;\n                    case '^':\n                        return s ^ rhs;\n                    default:\n                        throw new Error(`unrecognized operation: ${op}`);\n                }\n            }, args[0]);\n        }\n    ParensSyntaxTemplate: &ParensSyntaxTemplate !!js/function >\n        (arg) => {\n            return arg;\n        }\n    EosSyntaxTemplate: &EosSyntaxTemplate !!js/function >\n        () => {\n            return 'a unique thing';\n        }\n    EofSyntaxTemplate: &EofSyntaxTemplate !!js/function >\n        () => {\n            return 'a unique thing';\n        }\n    FloorDivTemplate: &FloorDivSyntaxTemplate null # Args: lhs, rhs\n    PowerTemplate: &PowerSyntaxTemplate null # Args: lhs, rhs\n    NewTemplate: &NewSyntaxTemplate null # Args: expression, skip?, code# [to check if meant to be skipped]\n\n    #############################################\n    #               Literal Types               #\n    #                                           #\n    # Templates for literal type instance. Most #\n    # get passed the literal itself as an arg.  #\n    #                                           #\n    #############################################\n    StringTypeTemplate: &StringTypeTemplate !!js/function >\n        (str) => {\n            let newStr = str.toString();\n            if (\n                (newStr.charAt(0) === '\"' && newStr.charAt(newStr.length - 1) === '\"') ||\n                (newStr.charAt(0) === '\\'' && newStr.charAt(newStr.length - 1) === '\\'')\n            ) {\n                newStr = newStr.substr(1, newStr.length - 2);\n            }\n            return newStr;\n        }\n    RegexTypeTemplate: &RegexTypeTemplate !!js/function >\n        (pattern, flags) => {\n            return new RegExp(pattern, flags);\n        }\n    BoolTypeTemplate: &BoolTypeTemplate !!js/function >\n        (str) => {\n            return str.toLowerCase() === 'true';\n        }\n    IntegerTypeTemplate: &IntegerTypeTemplate !!js/function >\n        (arg) => {\n            return parseInt(arg, 10);\n        }\n    DecimalTypeTemplate: &DecimalTypeTemplate !!js/function >\n        (arg) => {\n            return parseFloat(arg);\n        }\n    LongBasicTypeTemplate: &LongBasicTypeTemplate !!js/function >\n        (arg) => {\n            return parseInt(arg, 10);\n        }\n    HexTypeTemplate: &HexTypeTemplate !!js/function >\n        (arg) => {\n            return parseInt(arg, 16);\n        }\n    OctalTypeTemplate: &OctalTypeTemplate !!js/function >\n        (arg) => {\n            arg = arg.replace(/[oO]/g, '')\n            return parseInt(arg, 8);\n        }\n    NumericTypeTemplate: &NumericTypeTemplate !!js/function >\n        (arg) => {\n            if (arg.contains('x')) {\n                return parseInt(arg, 16);\n            }\n            if (arg.contains('o') || arg.startsWith('0')) {\n                arg = arg.replace(/o/g, '')\n                return parseInt(arg, 8);\n            }\n            return parseFloat(arg);\n        }\n    ArrayTypeTemplate: &ArrayTypeTemplate null\n    ArrayTypeArgsTemplate: &ArrayTypeArgsTemplate null # Args: single array element, nestedness, lastElement? (note: not being used atm)\n    NullTypeTemplate: &NullTypeTemplate !!js/function >\n        () => {\n            return null;\n        }\n    UndefinedTypeTemplate: &UndefinedTypeTemplate !!js/function >\n        () => {\n            return undefined;\n        }\n    ObjectTypeTemplate: &ObjectTypeTemplate null # Args: literal (for empty array, is empty string. Otherwise all set)\n    ObjectTypeArgsTemplate: &ObjectTypeArgsTemplate null # Args: single object element [2] (i.e. array with [key, value]), nestedness#\n\n    #############################################\n    #               Symbols                     #\n    #                                           #\n    # Templates for symbols, can be either      #\n    # functions or variables.                   #\n    #                                           #\n    # The *SymbolTemplates return names and     #\n    # usually don't take any arguments. The     #\n    # *SymbolArgsTemplates are invoked for func #\n    # calls. The first argument is always the   #\n    # lhs, i.e. the symbol returned from the    #\n    # corresponding SymbolTemplate. The rest of #\n    # the arguments are the processed arguments #\n    # passed to the original function.          #\n    #                                           #\n    #############################################\n    CodeSymbolTemplate: &CodeSymbolTemplate null # No args\n    CodeSymbolArgsTemplate: &CodeSymbolArgsTemplate null # Args: code, scope\n    ObjectIdSymbolTemplate: &ObjectIdSymbolTemplate null # No args\n    ObjectIdSymbolArgsTemplate: &ObjectIdSymbolArgsTemplate null # Args: lhs, string (can be empty or null for no arg)\n    BinarySymbolTemplate: &BinarySymbolTemplate null\n    BinarySymbolArgsTemplate: &BinarySymbolArgsTemplate null\n    BinarySymbolSubtypeDefaultTemplate: &BinarySymbolSubtypeDefaultTemplate null\n    BinarySymbolSubtypeFunctionTemplate: &BinarySymbolSubtypeFunctionTemplate null\n    BinarySymbolSubtypeByteArrayTemplate: &BinarySymbolSubtypeByteArrayTemplate null\n    BinarySymbolSubtypeUuidOldTemplate: &BinarySymbolSubtypeUuidOldTemplate null\n    BinarySymbolSubtypeUuidTemplate: &BinarySymbolSubtypeUuidTemplate null\n    BinarySymbolSubtypeMd5Template: &BinarySymbolSubtypeMd5Template null\n    BinarySymbolSubtypeUserDefinedTemplate: &BinarySymbolSubtypeUserDefinedTemplate null\n    DBRefSymbolTemplate: &DBRefSymbolTemplate null # No args\n    DBRefSymbolArgsTemplate: &DBRefSymbolArgsTemplate null # Args: lhs, coll, id, db\n    DoubleSymbolTemplate: &DoubleSymbolTemplate null # No args\n    DoubleSymbolArgsTemplate: &DoubleSymbolArgsTemplate null # Args: lhs, arg, argType (i.e. '_string', '_double')\n    Int32SymbolTemplate: &Int32SymbolTemplate null # No args\n    Int32SymbolArgsTemplate: &Int32SymbolArgsTemplate null # Args: lhs, arg, argType\n    LongSymbolTemplate: &LongSymbolTemplate null # No args\n    LongSymbolArgsTemplate: &LongSymbolArgsTemplate !!js/function > # Args: lhs, arg, argType\n        (lhs, arg) => {\n            return lhs.fromNumber(arg);\n        }\n    RegExpSymbolTemplate: &RegExpSymbolTemplate null # No args\n    RegExpSymbolArgsTemplate: &RegExpSymbolArgsTemplate null # Args: lhs, pattern, flags\n    SymbolSymbolTemplate: &SymbolSymbolTemplate null # No args\n    SymbolSymbolArgsTemplate: &SymbolSymbolArgsTemplate null # Args: lhs, arg\n    BSONRegExpSymbolTemplate: &BSONRegExpSymbolTemplate null # No args\n    BSONRegExpSymbolArgsTemplate: &BSONRegExpSymbolArgsTemplate null # Args: lhs, pattern, flags\n    Decimal128SymbolTemplate: &Decimal128SymbolTemplate null # No args\n    Decimal128SymbolArgsTemplate: &Decimal128SymbolArgsTemplate null # Args: lhs, arg\n    MinKeySymbolTemplate: &MinKeySymbolTemplate null # No args\n    MinKeySymbolArgsTemplate: &MinKeySymbolArgsTemplate null # No args\n    MaxKeySymbolTemplate: &MaxKeySymbolTemplate null # No args\n    MaxKeySymbolArgsTemplate: &MaxKeySymbolArgsTemplate null # No args\n    TimestampSymbolTemplate: &TimestampSymbolTemplate null # No args\n    TimestampSymbolArgsTemplate: &TimestampSymbolArgsTemplate null # Args: lhs, low, high\n    # non bson-specific\n    NumberSymbolTemplate: &NumberSymbolTemplate !!js/function >\n        () => {\n            return Number;\n        }\n    NumberSymbolArgsTemplate: &NumberSymbolArgsTemplate null # Args: lhs, arg, argType\n    DateSymbolTemplate: &DateSymbolTemplate null # No args\n    DateSymbolArgsTemplate: &DateSymbolArgsTemplate !!js/function >\n        (lhs, date, isString) => {\n            if (isString) {\n                return date.toString();\n            }\n            return date;\n        }\n\n    #############################################\n    #         Object Attributes/Methods         #\n    #                                           #\n    # These're variables or functions called on #\n    # instantiated objects. For example,        #\n    # ObjectId().isValid() or Timestamp().t     #\n    #                                           #\n    # They follow the same pattern with the\n    # *Template/*ArgsTemplates: usually no args #\n    # to the Template and lhs plus any original #\n    # arguments to the ArgsTemplate.            #\n    #                                           #\n    #############################################\n    CodeCodeTemplate: &CodeCodeTemplate null\n    CodeCodeArgsTemplate: &CodeCodeArgsTemplate null\n    CodeScopeTemplate: &CodeScopeTemplate null\n    CodeScopeArgsTemplate: &CodeScopeArgsTemplate null\n    ObjectIdToStringTemplate: &ObjectIdToStringTemplate !!js/function >\n        (lhs, rhs) => {\n            return lhs.toString();\n        }\n    ObjectIdToStringArgsTemplate: &ObjectIdToStringArgsTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    ObjectIdEqualsTemplate: &ObjectIdEqualsTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    ObjectIdEqualsArgsTemplate: &ObjectIdEqualsArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return lhs.equals(rhs);\n        }\n    ObjectIdGetTimestampTemplate: &ObjectIdGetTimestampTemplate !!js/function >\n        (lhs, rhs) => {\n            return lhs.getTimestamp();\n        }\n    ObjectIdGetTimestampArgsTemplate: &ObjectIdGetTimestampArgsTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    ObjectIdIsValidTemplate: &ObjectIdIsValidTemplate !!js/function >\n        (lhs, rhs) => {\n            return  lhs.isValid;\n        }\n    ObjectIdIsValidArgsTemplate: &ObjectIdIsValidArgsTemplate null\n    BinaryValueTemplate: &BinaryValueTemplate null\n    BinaryValueArgsTemplate: &BinaryValueArgsTemplate null\n    BinaryLengthTemplate: &BinaryLengthTemplate null\n    BinaryLengthArgsTemplate: &BinaryLengthArgsTemplate null\n    BinaryToStringTemplate: &BinaryToStringTemplate null\n    BinaryToStringArgsTemplate: &BinaryToStringArgsTemplate null\n    BinarySubtypeTemplate: &BinarySubtypeTemplate null\n    BinarySubtypeArgsTemplate: &BinarySubtypeArgsTemplate null\n    DBRefGetDBTemplate: &DBRefGetDBTemplate !!js/function >\n        (lhs, rhs) => {\n            return lhs.db;\n        }\n    DBRefGetCollectionTemplate: &DBRefGetCollectionTemplate !!js/function >\n        (lhs, rhs) => {\n            return lhs.collection;\n        }\n    DBRefGetIdTemplate: &DBRefGetIdTemplate !!js/function >\n        (lhs, rhs) => {\n            return lhs.oid;\n        }\n    DBRefGetDBArgsTemplate: &DBRefGetDBArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return lhs;\n        }\n    DBRefGetCollectionArgsTemplate: &DBRefGetCollectionArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return lhs;\n        }\n    DBRefGetIdArgsTemplate: &DBRefGetIdArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return lhs;\n        }\n    LongEqualsTemplate: &LongEqualsTemplate null\n    LongEqualsArgsTemplate: &LongEqualsArgsTemplate null\n    LongToStringTemplate: &LongToStringTemplate null\n    LongToStringArgsTemplate: &LongToStringArgsTemplate null\n    LongToIntTemplate: &LongToIntTemplate null\n    LongToIntArgsTemplate: &LongToIntArgsTemplate null\n    LongValueOfTemplate: &LongValueOfTemplate null\n    LongValueOfArgsTemplate: &LongValueOfArgsTemplate null\n    LongToNumberTemplate: &LongToNumberTemplate null\n    LongToNumberArgsTemplate: &LongToNumberArgsTemplate null\n    LongAddTemplate: &LongAddTemplate null\n    LongAddArgsTemplate: &LongAddArgsTemplate null\n    LongSubtractTemplate: &LongSubtractTemplate null\n    LongSubtractArgsTemplate: &LongSubtractArgsTemplate null\n    LongMultiplyTemplate: &LongMultiplyTemplate null\n    LongMultiplyArgsTemplate: &LongMultiplyArgsTemplate null\n    LongDivTemplate: &LongDivTemplate null\n    LongDivArgsTemplate: &LongDivArgsTemplate null\n    LongModuloTemplate: &LongModuloTemplate null\n    LongModuloArgsTemplate: &LongModuloArgsTemplate null\n    LongAndTemplate: &LongAndTemplate null\n    LongAndArgsTemplate: &LongAndArgsTemplate null\n    LongOrTemplate: &LongOrTemplate null\n    LongOrArgsTemplate: &LongOrArgsTemplate null\n    LongXorTemplate: &LongXorTemplate null\n    LongXorArgsTemplate: &LongXorArgsTemplate null\n    LongShiftLeftTemplate: &LongShiftLeftTemplate null\n    LongShiftLeftArgsTemplate: &LongShiftLeftArgsTemplate null\n    LongShiftRightTemplate: &LongShiftRightTemplate null\n    LongShiftRightArgsTemplate: &LongShiftRightArgsTemplate null\n    LongCompareTemplate: &LongCompareTemplate null\n    LongCompareArgsTemplate: &LongCompareArgsTemplate null\n    LongIsOddTemplate: &LongIsOddTemplate null\n    LongIsOddArgsTemplate: &LongIsOddArgsTemplate null\n    LongIsZeroTemplate: &LongIsZeroTemplate null\n    LongIsZeroArgsTemplate: &LongIsZeroArgsTemplate null\n    LongIsNegativeTemplate: &LongIsNegativeTemplate null\n    LongIsNegativeArgsTemplate: &LongIsNegativeArgsTemplate null\n    LongNegateTemplate: &LongNegateTemplate null\n    LongNegateArgsTemplate: &LongNegateArgsTemplate null\n    LongNotTemplate: &LongNotTemplate null\n    LongNotArgsTemplate: &LongNotArgsTemplate null\n    LongNotEqualsTemplate: &LongNotEqualsTemplate null\n    LongNotEqualsArgsTemplate: &LongNotEqualsArgsTemplate null\n    LongGreaterThanTemplate: &LongGreaterThanTemplate null\n    LongGreaterThanArgsTemplate: &LongGreaterThanArgsTemplate null\n    LongGreaterThanOrEqualTemplate: &LongGreaterThanOrEqualTemplate null\n    LongGreaterThanOrEqualArgsTemplate: &LongGreaterThanOrEqualArgsTemplate null\n    LongLessThanTemplate: &LongLessThanTemplate null\n    LongLessThanArgsTemplate: &LongLessThanArgsTemplate null\n    LongLessThanOrEqualTemplate: &LongLessThanOrEqualTemplate null\n    LongLessThanOrEqualArgsTemplate: &LongLessThanOrEqualArgsTemplate null\n    LongFloatApproxTemplate: &LongFloatApproxTemplate !!js/function >\n        (lhs, rhs) => {\n            return lhs.toNumber();\n        }\n    LongTopTemplate: &LongTopTemplate !!js/function >\n        (lhs, rhs) => {\n            return lhs.high_;\n        }\n    LongBottomTemplate: &LongBottomTemplate !!js/function >\n        (lhs, rhs) => {\n            return lhs.low_;\n        }\n    TimestampToStringTemplate: &TimestampToStringTemplate null\n    TimestampToStringArgsTemplate: &TimestampToStringArgsTemplate null\n    TimestampEqualsTemplate: &TimestampEqualsTemplate null\n    TimestampEqualsArgsTemplate: &TimestampEqualsArgsTemplate null\n    TimestampGetLowBitsTemplate: &TimestampGetLowBitsTemplate !!js/function >\n        (lhs, rhs) => {\n            return lhs.getLowBits();\n        }\n    TimestampGetLowBitsArgsTemplate: &TimestampGetLowBitsArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return lhs;\n        }\n    TimestampGetHighBitsTemplate: &TimestampGetHighBitsTemplate !!js/function >\n        (lhs, rhs) => {\n            return lhs.getHighBits();\n        }\n    TimestampGetHighBitsArgsTemplate: &TimestampGetHighBitsArgsTemplate  !!js/function >\n        (lhs, rhs) => {\n            return lhs;\n        }\n    TimestampTTemplate: &TimestampTTemplate !!js/function >\n        (lhs, rhs) => {\n            return lhs.getLowBits();\n        }\n    TimestampITemplate: &TimestampITemplate !!js/function >\n        (lhs, rhs) => {\n            return lhs.getHighBits();\n        }\n    TimestampAsDateTemplate: &TimestampAsDateTemplate !!js/function >\n        (lhs, rhs) => {\n            return new Date(lhs.getHighBits() * 1000);\n        }\n    TimestampAsDateArgsTemplate: &TimestampAsDateArgsTemplate !!js/function >\n        (lhs, rhs) => {\n            return lhs;\n        }\n    TimestampCompareTemplate: &TimestampCompareTemplate null\n    TimestampCompareArgsTemplate: &TimestampCompareArgsTemplate null\n    TimestampNotEqualsTemplate: &TimestampNotEqualsTemplate null\n    TimestampNotEqualsArgsTemplate: &TimestampNotEqualsArgsTemplate null\n    TimestampGreaterThanTemplate: &TimestampGreaterThanTemplate null\n    TimestampGreaterThanArgsTemplate: &TimestampGreaterThanArgsTemplate null\n    TimestampGreaterThanOrEqualTemplate: &TimestampGreaterThanOrEqualTemplate null\n    TimestampGreaterThanOrEqualArgsTemplate: &TimestampGreaterThanOrEqualArgsTemplate null\n    TimestampLessThanTemplate: &TimestampLessThanTemplate null\n    TimestampLessThanArgsTemplate: &TimestampLessThanArgsTemplate null\n    TimestampLessThanOrEqualTemplate: &TimestampLessThanOrEqualTemplate null\n    TimestampLessThanOrEqualArgsTemplate: &TimestampLessThanOrEqualArgsTemplate null\n    SymbolValueOfTemplate: &SymbolValueOfTemplate null\n    SymbolValueOfArgsTemplate: &SymbolValueOfArgsTemplate null\n    SymbolInspectTemplate: &SymbolInspectTemplate null\n    SymbolInspectArgsTemplate: &SymbolInspectArgsTemplate null\n    SymbolToStringTemplate: &SymbolToStringTemplate null\n    SymbolToStringArgsTemplate: &SymbolToStringArgsTemplate null\n    Decimal128ToStringTemplate: &Decimal128ToStringTemplate null\n    Decimal128ToStringArgsTemplate: &Decimal128ToStringArgsTemplate null\n    # non bson-specific\n    DateSymbolNowTemplate: &DateSymbolNowTemplate !!js/function >\n        () => {\n            return Date.now;\n        }\n    DateSymbolNowArgsTemplate: &DateSymbolNowArgsTemplate null\n\n    #############################################\n    #         Symbol Attributes/Methods         #\n    #                                           #\n    # These're variables or functions called on #\n    # symbols. Also called bson-utils.          #\n    #                                           #\n    # They are basically the same thing as      #\n    # object attributes/methods, but need to be #\n    # distinguished since they are separate     #\n    # namespaces that happen to have the same   #\n    # name which is v confusing.                #\n    #                                           #\n    # For example, ObjectId().toString() is an  #\n    # object method, while ObjectId.fromString  #\n    # is a symbol attribute. These are two      #\n    # separate ObjectId related namespaces that #\n    # don't overlap.                            #\n    #                                           #\n    #############################################\n    LongSymbolMaxTemplate: &LongSymbolMaxTemplate null\n    LongSymbolMaxArgsTemplate: &LongSymbolMaxArgsTemplate null\n    LongSymbolMinTemplate: &LongSymbolMinTemplate null\n    LongSymbolMinArgsTemplate: &LongSymbolMinArgsTemplate null\n    LongSymbolZeroTemplate: &LongSymbolZeroTemplate null\n    LongSymbolZeroArgsTemplate: &LongSymbolZeroArgsTemplate null\n    LongSymbolOneTemplate: &LongSymbolOneTemplate null\n    LongSymbolOneArgsTemplate: &LongSymbolOneArgsTemplate null\n    LongSymbolNegOneTemplate: &LongSymbolNegOneTemplate null\n    LongSymbolNegOneArgsTemplate: &LongSymbolNegOneArgsTemplate null\n    LongSymbolFromBitsTemplate: &LongSymbolFromBitsTemplate null\n    LongSymbolFromBitsArgsTemplate: &LongSymbolFromBitsArgsTemplate null\n    LongSymbolFromIntTemplate: &LongSymbolFromIntTemplate null\n    LongSymbolFromIntArgsTemplate: &LongSymbolFromIntArgsTemplate null\n    LongSymbolFromNumberTemplate: &LongSymbolFromNumberTemplate null\n    LongSymbolFromNumberArgsTemplate: &LongSymbolFromNumberArgsTemplate null\n    LongSymbolFromStringTemplate: &LongSymbolFromStringTemplate null\n    LongSymbolFromStringArgsTemplate: &LongSymbolFromStringArgsTemplate null\n    Decimal128SymbolFromStringTemplate: &Decimal128SymbolFromStringTemplate null\n    Decimal128SymbolFromStringArgsTemplate: &Decimal128SymbolFromStringArgsTemplate null\n    ObjectIdCreateFromHexStringTemplate: &ObjectIdCreateFromHexStringTemplate null\n    ObjectIdCreateFromHexStringArgsTemplate: &ObjectIdCreateFromHexStringArgsTemplate null\n    ObjectIdCreateFromTimeTemplate: &ObjectIdCreateFromTimeTemplate !!js/function >\n        (lhs, rhs) => {\n            return lhs.createFromTime;\n        }\n    ObjectIdCreateFromTimeArgsTemplate: &ObjectIdCreateFromTimeArgsTemplate null\n    # non bson-specific would go here, but there aren't any atm.\n\n    #############################################\n    #                 Imports                   #\n    #                                           #\n    # Each type has a 'code' that is consistent #\n    # between languages. The import templates   #\n    # for each code generate the required       #\n    # statement for each type. No args.         #\n    #                                           #\n    # The ImportTemplate collects everything    #\n    # into one statement.                       #\n    #                                           #\n    #############################################\n    ImportTemplate: &ImportTemplate null\n    0ImportTemplate: &0ImportTemplate null\n    1ImportTemplate: &1ImportTemplate null\n    2ImportTemplate: &2ImportTemplate null\n    3ImportTemplate: &3ImportTemplate null\n    4ImportTemplate: &4ImportTemplate null\n    5ImportTemplate: &5ImportTemplate null\n    6ImportTemplate: &6ImportTemplate null\n    7ImportTemplate: &7ImportTemplate null\n    8ImportTemplate: &8ImportTemplate null\n    9ImportTemplate: &9ImportTemplate null\n    10ImportTemplate: &10ImportTemplate null\n    11ImportTemplate: &11ImportTemplate null\n    12ImportTemplate: &12ImportTemplate null\n    100ImportTemplate: &100ImportTemplate null\n    101ImportTemplate: &101ImportTemplate null\n    102ImportTemplate: &102ImportTemplate null\n    103ImportTemplate: &103ImportTemplate null\n    104ImportTemplate: &104ImportTemplate null\n    105ImportTemplate: &105ImportTemplate null\n    106ImportTemplate: &106ImportTemplate null\n    107ImportTemplate: &107ImportTemplate null\n    108ImportTemplate: &108ImportTemplate null\n    109ImportTemplate: &109ImportTemplate null\n    110ImportTemplate: &110ImportTemplate null\n    111ImportTemplate: &111ImportTemplate null\n    112ImportTemplate: &112ImportTemplate null\n    113ImportTemplate: &113ImportTemplate null\n    114ImportTemplate: &114ImportTemplate null\n    200ImportTemplate: &200ImportTemplate null\n    201ImportTemplate: &201ImportTemplate null\n    300ImportTemplate: &300ImportTemplate null\n    301ImportTemplate: &301ImportTemplate null\n    302ImportTemplate: &302ImportTemplate null\n    303ImportTemplate: &303ImportTemplate null\n    304ImportTemplate: &304ImportTemplate null\n    305ImportTemplate: &305ImportTemplate null\n    306ImportTemplate: &306ImportTemplate null\n# Universal types\n# Everything inherits from StringType because we haven't implemented any of them.\nBasicTypes:\n    # Universal basic types\n    _bool: &BoolType\n        <<: *__type\n        id: \"_bool\"\n        code: 0\n        template: *BoolTypeTemplate\n    _integer: &IntegerType\n        <<: *__type\n        id: \"_integer\"\n        code: 1\n        template: *IntegerTypeTemplate\n    _long: &LongBasicType\n        <<: *__type\n        id: \"_long\"\n        code: 2\n        template: *LongBasicTypeTemplate\n    _decimal: &DecimalType\n        <<: *__type\n        id: \"_decimal\"\n        code: 3\n        template: *DecimalTypeTemplate\n    _hex: &HexType\n        <<: *__type\n        id: \"_hex\"\n        code: 4\n        template: *HexTypeTemplate\n    _octal: &OctalType\n        <<: *__type\n        id: \"_octal\"\n        code: 5\n        template: *OctalTypeTemplate\n    _numeric: &NumericType\n        <<: *__type\n        id: \"_numeric\"\n        code: 6\n        template: *NumericTypeTemplate\n    _string: &StringType\n        <<: *__type\n        id: \"_string\"\n        code: 7\n        template: *StringTypeTemplate\n    _regex: &RegexType\n        <<: *__type\n        id: \"_regex\"\n        code: 8\n        template: *RegexTypeTemplate\n    _array: &ArrayType\n        <<: *__type\n        id: \"_array\"\n        code: 9\n        template: *ArrayTypeTemplate\n        argsTemplate: *ArrayTypeArgsTemplate\n    _object: &ObjectType\n        <<: *__type\n        id: \"_object\"\n        code: 10\n        template: *ObjectTypeTemplate\n        argsTemplate: *ObjectTypeArgsTemplate\n    _null: &NullType\n        <<: *__type\n        id: \"_null\"\n        code: 11\n        template: *NullTypeTemplate\n    _undefined: &UndefinedType\n        <<: *__type\n        id: \"_undefined\"\n        code: 12\n        template: *UndefinedTypeTemplate\n\nSyntax:\n    equality:\n        template: *EqualitySyntaxTemplate\n    in:\n        template: *InSyntaxTemplate\n    and:\n        template: *AndSyntaxTemplate\n    or:\n        template: *OrSyntaxTemplate\n    not:\n        template: *NotSyntaxTemplate\n    unary:\n        template: *UnarySyntaxTemplate\n    binary:\n        template: *BinarySyntaxTemplate\n    parens:\n        template: *ParensSyntaxTemplate\n    eos:\n        template: *EosSyntaxTemplate\n    eof:\n        template: *EofSyntaxTemplate\n    # The new template takes in expr, and an optional skip argument and optional\n    # id argument. The skip argument is a boolean that if true then doesn't add\n    # new. The code argument is the symbol code being called. The template will check\n    # if it is an exception, i.e. a type that is a constructor but may not use new.\n    new:\n        template: *NewSyntaxTemplate\n    # The regex flags that change symbols between languages can be defined here.\n    # Flags that aren't defined can be left blank and will be ignored.\n    regexFlags: *RegexFlags\n    bsonRegexFlags: *BSONRegexFlags\nImports:\n    import:\n        template: *ImportTemplate\n    0:\n        template: *0ImportTemplate\n    1:\n        template: *1ImportTemplate\n    2:\n        template: *2ImportTemplate\n    3:\n        template: *3ImportTemplate\n    4:\n        template: *4ImportTemplate\n    5:\n        template: *5ImportTemplate\n    6:\n        template: *6ImportTemplate\n    7:\n        template: *7ImportTemplate\n    8:\n        template: *8ImportTemplate\n    9:\n        template: *9ImportTemplate\n    10:\n        template: *10ImportTemplate\n    11:\n        template: *11ImportTemplate\n    12:\n        template: *12ImportTemplate\n    100:\n        template: *100ImportTemplate\n    101:\n        template: *101ImportTemplate\n    102:\n        template: *102ImportTemplate\n    103:\n        template: *103ImportTemplate\n    104:\n        template: *104ImportTemplate\n    105:\n        template: *105ImportTemplate\n    106:\n        template: *106ImportTemplate\n    107:\n        template: *107ImportTemplate\n    108:\n        template: *108ImportTemplate\n    109:\n        template: *109ImportTemplate\n    110:\n        template: *110ImportTemplate\n    111:\n        template: *111ImportTemplate\n    112:\n        template: *112ImportTemplate\n    113:\n        template: *113ImportTemplate\n    114:\n        template: *114ImportTemplate\n    200:\n        template: *200ImportTemplate\n    201:\n        template: *201ImportTemplate\n    300:\n        template: *300ImportTemplate\n    301:\n        template: *301ImportTemplate\n    302:\n        template: *302ImportTemplate\n    303:\n        template: *303ImportTemplate\n    304:\n        template: *304ImportTemplate\n    305:\n        template: *305ImportTemplate\n    306:\n        template: *306ImportTemplate\nNativeTypes:\n    Date: &DateType\n        <<: *__type\n        id: \"Date\"\n        code: 200\n        type: *ObjectType\n        attr: {} # TODO: no built-in date methods added yet\n    int: &intType\n        <<: *__type\n        id: \"int\"\n        code: 105\n        type: *IntegerType\n        attr: {}\n    float: &floatType\n        <<: *__type\n        id: \"float\"\n        code: 104\n        type: *IntegerType\n        attr: {}\nBsonTypes:\n    Code: &CodeType\n        <<: *__type\n        id: \"Code\"\n        code: 100\n        type: *ObjectType\n        attr:\n            scope:\n                callable: *var\n                args: null\n                attr: null\n                id: \"scope\"\n                type: *ObjectType\n                template: *CodeScopeTemplate\n                argsTemplate: *CodeScopeArgsTemplate\n    ObjectId: &ObjectIdType\n        <<: *__type\n        id: \"ObjectId\"\n        code: 101\n        type: *ObjectType\n        attr:\n            binary:\n                callable: *var\n                args: null\n                attr: null\n                type: *StringType\n                template: *ObjectIdToStringTemplate\n                argsTemplate: *ObjectIdToStringArgsTemplate\n            generation_time:\n                callable: *var\n                args: null\n                attr: null\n                id: \"db\"\n                type: *DateType\n                template: *ObjectIdGetTimestampTemplate\n                argsTemplate: *ObjectIdGetTimestampArgsTemplate\n    Binary: &BinaryType # Not currently supported\n        <<: *__type\n        id: \"Binary\"\n        code: 102\n        type: *ObjectType\n    DBRef: &DBRefType\n        <<: *__type\n        id: \"DBRef\"\n        code: 103\n        type: *ObjectType\n        attr:\n            database:\n                callable: *var\n                args: null\n                attr: null\n                id: \"db\"\n                type: *StringType\n                template: *DBRefGetDBTemplate\n                argsTemplate: *DBRefGetDBArgsTemplate\n            collection:\n                callable: *var\n                args: null\n                attr: null\n                id: \"collection\"\n                type: *StringType\n                template: *DBRefGetCollectionTemplate\n                argsTemplate: *DBRefGetCollectionArgsTemplate\n            id:\n                callable: *var\n                args: null\n                attr: null\n                id: \"id\"\n                type: *StringType\n                template: *DBRefGetIdTemplate\n                argsTemplate: *DBRefGetIdArgsTemplate\n    Int64: &LongType\n        <<: *__type\n        id: \"Int64\"\n        code: 106\n        type: *ObjectType\n        attr: {}\n    MinKey: &MinKeyType\n        <<: *__type\n        id: \"MinKey\"\n        code: 107\n        type: *ObjectType\n    MaxKey: &MaxKeyType\n        <<: *__type\n        id: \"MaxKey\"\n        code: 108\n        type: *ObjectType\n    Regex: &BSONRegExpType\n        <<: *__type\n        id: \"BSONRegExp\"\n        code: 109\n        type: *ObjectType\n    Timestamp: &TimestampType\n        <<: *__type\n        id: \"Timestamp\"\n        code: 110\n        type: *ObjectType\n        attr:\n            time:\n                callable: *var\n                args: null\n                attr: null\n                id: \"time\"\n                type: *IntegerType\n                template: *TimestampTTemplate\n                argsTemplate: null\n            inc:\n                callable: *var\n                args: null\n                attr: null\n                id: \"inc\"\n                type: *IntegerType\n                template: *TimestampITemplate\n                argsTemplate: null\n            as_datetime:\n                <<: *__func\n                id: \"inc\"\n                type: *DateType\n                template: *TimestampAsDateTemplate\n                argsTemplate: *TimestampAsDateArgsTemplate\n    Decimal128: &Decimal128Type\n        <<: *__type\n        id: \"Decimal128\"\n        code: 112\n        type: *ObjectType\n        attr: {}\nBsonSymbols:\n    Code: &CodeSymbol\n        id: \"Code\"\n        code: 100\n        callable: *constructor\n        args:\n            - [ *StringType ]\n            - [ *ObjectType, null ]\n        namedArgs:\n            scope:\n                default: {}\n                type: [ *ObjectType ]\n        type: *CodeType\n        attr: {}\n        template: *CodeSymbolTemplate\n        argsTemplate: *CodeSymbolArgsTemplate\n    ObjectId: &ObjectIdSymbol\n        id: \"ObjectId\"\n        code: 101\n        callable: *constructor\n        args:\n            - [ *StringType, null ]\n        namedArgs:\n            oid:\n                default: null\n                type: [ *StringType, *ObjectIdType ]\n        type: *ObjectIdType\n        attr:\n            from_datetime:\n                <<: *__func\n                id: \"ObjectIdfrom_datetime\"\n                args:\n                    - [ \"Date\" ]\n                type: *ObjectIdType\n                template: *ObjectIdCreateFromTimeTemplate\n                argsTemplate: *ObjectIdCreateFromTimeArgsTemplate\n            is_valid:\n                <<: *__func\n                id: \"is_valid\"\n                args:\n                    - [ *StringType,  ]\n                type: *BoolType\n                template: *ObjectIdIsValidTemplate\n                argsTemplate: *ObjectIdIsValidArgsTemplate\n        template: *ObjectIdSymbolTemplate\n        argsTemplate: *ObjectIdSymbolArgsTemplate\n    Binary: &BinarySymbol # Not currently supported\n        id: \"Binary\"\n        code: 102\n        callable: *constructor\n        args: null\n        type: *BinaryType\n        attr: {}\n        template: *BinarySymbolTemplate\n        argsTemplate: *BinarySymbolArgsTemplate\n    DBRef:\n        id: \"DBRef\"\n        code: 103\n        callable: *constructor\n        args:\n            - [ *StringType ]\n            - [ *ObjectIdType, *StringType ]\n            - [ *StringType, null ]\n        namedArgs:\n            database:\n                default: null\n                type: [ *StringType ]\n        type: *DBRefType\n        attr: {}\n        template: *DBRefSymbolTemplate\n        argsTemplate: *DBRefSymbolArgsTemplate\n    Int64:\n        id: \"Int64\"\n        code: 106\n        callable: *constructor\n        args:\n            - [ *IntegerType, *StringType, null ]\n        type: *LongType\n        attr: {}\n        template: *LongSymbolTemplate\n        argsTemplate: *LongSymbolArgsTemplate\n    MinKey:\n        id: \"MinKey\"\n        code: 107\n        callable: *constructor\n        args: []\n        type: *MinKeyType\n        attr: {}\n        template: *MinKeySymbolTemplate\n        argsTemplate: *MinKeySymbolArgsTemplate\n    MaxKey:\n        id: \"MaxKey\"\n        code: 108\n        callable: *constructor\n        args: []\n        type: *MaxKeyType\n        attr: {}\n        template: *MaxKeySymbolTemplate\n        argsTemplate: *MaxKeySymbolArgsTemplate\n    Regex:\n        id: \"Regex\"\n        code: 109\n        callable: *constructor\n        args:\n            - [ *StringType ]\n            - [ *StringType, *IntegerType, null ]\n        namedArgs:\n            flags:\n                default: 0\n                type: [ *StringType, *IntegerType ]\n        type: *BSONRegExpType\n        attr:\n            from_native:\n                <<: *__func\n                id: \"from_native\"\n                args:\n                - [ *RegexType ]\n                type: *BSONRegExpType\n                template: null\n                argsTemplate: null\n        template: *BSONRegExpSymbolTemplate\n        argsTemplate: *BSONRegExpSymbolArgsTemplate\n    Timestamp:\n        id: \"Timestamp\"\n        code: 110\n        callable: *constructor\n        args:\n            - [ *IntegerType ]\n            - [ *IntegerType ]\n        type: *TimestampType\n        attr: {}\n        template: *TimestampSymbolTemplate\n        argsTemplate: *TimestampSymbolArgsTemplate\n    Decimal128:\n        id: \"Decimal128\"\n        code: 112\n        callable: *constructor\n        args:\n            - [ *StringType ]\n        type: *Decimal128Type\n        attr: {}\n        template: *Decimal128SymbolTemplate\n        argsTemplate: *Decimal128SymbolArgsTemplate\n\nNativeSymbols:\n    datetime: # Needs process method\n        id: \"datetime\"\n        code: 200\n        callable: *constructor\n        args:\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n        type: *DateType\n        attr: {} # TODO: add more date funcs?\n        template: *DateSymbolTemplate\n        argsTemplate: *DateSymbolArgsTemplate\n    re:\n        id: \"re\"\n        code: 8\n        callable: *var\n        args: null\n        type: null\n        attr:\n            compile:\n                id: \"compile\"\n                code: 8\n                callable: *constructor\n                args:\n                    - [ *StringType ]\n                    - [ *IntegerType, null ]\n                namedArgs:\n                    flags:\n                        default: 0\n                        type: [ *IntegerType ]\n                type: *RegexType\n                attr: {}\n                template: *RegExpSymbolTemplate\n                argsTemplate: *RegExpSymbolArgsTemplate\n            A:\n                <<: *__type\n                id: 're.A'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '256';\n                    }\n            ASCII:\n                <<: *__type\n                id: 're.ASCII'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '256';\n                    }\n            I:\n                <<: *__type\n                id: 're.I'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '2';\n                    }\n            IGNORECASE:\n                <<: *__type\n                id: 're.IGNORECASE'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '2';\n                    }\n            DEBUG:\n                <<: *__type\n                id: 're.DEBUG'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '128';\n                    }\n            L:\n                <<: *__type\n                id: 're.L'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '4';\n                    }\n            LOCAL:\n                <<: *__type\n                id: 're.LOCAL'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '4';\n                    }\n            M:\n                <<: *__type\n                id: 're.M'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '8';\n                    }\n            MULTILINE:\n                <<: *__type\n                id: 're.MULTILINE'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '8';\n                    }\n            S:\n                <<: *__type\n                id: 're.S'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '16';\n                    }\n            DOTALL:\n                <<: *__type\n                id: 're.DOTALL'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '16';\n                    }\n            X:\n                <<: *__type\n                id: 're.X'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '64';\n                    }\n            VERBOSE:\n                <<: *__type\n                id: 're.VERBOSE'\n                type: *IntegerType\n                template: !!js/function >\n                    () => {\n                        return '64';\n                    }\n        template: !!js/function >\n            () => {\n                return '';\n            }\n        argsTemplate: null\n    float:\n        id: \"float\"\n        code: 104\n        callable: *constructor\n        args:\n        - [ *NumericType, *StringType, null ]\n        type: *floatType\n        attr: {}\n        template: *DoubleSymbolTemplate\n        argsTemplate: *DoubleSymbolArgsTemplate\n    int:\n        id: \"int\"\n        code: 105\n        callable: *constructor\n        args:\n        - [ *NumericType, *StringType, null ]\n        type: *intType\n        attr: {}\n        template: *Int32SymbolTemplate\n        argsTemplate: *Int32SymbolArgsTemplate\n";
