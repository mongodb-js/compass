module.exports =
  'SymbolTypes:\n  VAR: &var 0\n  CONSTRUCTOR: &constructor 1\n  FUNC: &func 2\n# Internal patterns to save typing\n__type: &__type\n  id: null\n  callable: *var\n  args: null\n  type: null\n  attr: {}\n  template: null\n  argsTemplate: null\n__func: &__func\n  callable: *func\n  args: []\n  attr: {}\n  template: null\n  argsTemplate: null\n# C# Templates\nTemplates:\n  # Misc\n  RegexFlags: &RegexFlags\n    i: \'i\'\n    m: \'m\'\n    u: \'\'\n    y: \'\'\n    g: \'\'\n  BSONRegexFlags: &BSONRegexFlags\n    i: \'i\'\n    m: \'m\'\n    x: \'x\'\n    s: \'s\'\n    l: \'\'\n    u: \'\'\n  # Syntax\n  DriverTemplate: &DriverTemplate null\n  EqualitySyntaxTemplate: !!js/function &EqualitySyntaxTemplate >\n    (lhs, op, rhs) => {\n        if (op.includes(\'!\') || op.includes(\'not\')) {\n            return `${lhs} != ${rhs}`;\n        }\n        else if (op === \'==\' || op === \'===\' || op === \'is\') {\n            return `${lhs} == ${rhs}`;\n        }\n        return `${lhs} ${op} ${rhs}`;\n    }\n  InSyntaxTemplate: !!js/function &InSyntaxTemplate >\n    (lhs, op, rhs) => {\n        let str = \'!=\';\n        if (op.includes(\'!\') || op.includes(\'not\')) {\n            str = \'==\';\n        }\n        return `${rhs}.indexOf(${lhs}) ${str} -1`\n    }\n  AndSyntaxTemplate: !!js/function &AndSyntaxTemplate >\n    (args) => {\n        return args.join(\' && \');\n    }\n  OrSyntaxTemplate: !!js/function &OrSyntaxTemplate >\n    (args) => {\n        return args.join(\' || \');\n    }\n  NotSyntaxTemplate: !!js/function &NotSyntaxTemplate >\n    (arg) => {\n        return `!${arg}`;\n    }\n  UnarySyntaxTemplate: &UnarySyntaxTemplate null\n  BinarySyntaxTemplate: !!js/function &BinarySyntaxTemplate >\n    (args) => {\n        return args.reduce((s, op, i, arr) => {\n            if (i % 2 === 0) {\n                return s;\n            }\n            const rhs = arr[i + 1];\n            switch(op) {\n                case \'//\':\n                    return `Math.floor(${s}, ${rhs})`;\n                case \'**\':\n                    return `Math.pow(${s}, ${rhs})`;\n                default:\n                    return `${s} ${op} ${rhs}`;\n            }\n        }, args[0]);\n    }\n  ParensSyntaxTemplate: &ParensSyntaxTemplate null\n  EosSyntaxTemplate: &EosSyntaxTemplate null\n  EofSyntaxTemplate: &EofSyntaxTemplate null\n  NewTemplate: !!js/function &NewSyntaxTemplate >\n    (expr, skip, code) => {\n        // Add classes that don\'t use "new" to array\n        // So far: [Symbol, Decimal128/NumberDecimal, Long/NumberLong, MinKey, MaxKey, Date.now, Double, Int32, Number, Date]\n        noNew = [111, 112, 106, 107, 108, 200.1, 104, 105, 2, 200];\n        if (skip || (code && noNew.indexOf(code) !== -1)) {\n            return expr;\n        }\n        return `new ${expr}`;\n    }\n  # BSON Object Type templates\n  CodeTypeTemplate: &CodeTypeTemplate null\n  StringTypeTemplate: !!js/function &StringTypeTemplate >\n    (str) => {\n        let newStr = str;\n        if (\n          (str.charAt(0) === \'\\\'\' && str.charAt(str.length - 1) === \'\\\'\') ||\n          (str.charAt(0) === \'"\' && str.charAt(str.length - 1) === \'"\')) {\n          newStr = str.substr(1, str.length - 2);\n        }\n        return `"${newStr.replace(/\\\\([\\s\\S])|(")/g, \'\\\\$1$2\')}"`;\n    }\n  RegexTypeTemplate: !!js/function &RegexTypeTemplate >\n    (pattern, flags) => {\n        flags = flags === \'\' ? \'\' : `(?${flags})`;\n        // Double-quote stringify\n        const str = flags + pattern;\n        let newStr = str;\n        if (\n            (str.charAt(0) === \'\\\'\' && str.charAt(str.length - 1) === \'\\\'\') ||\n            (str.charAt(0) === \'"\' && str.charAt(str.length - 1) === \'"\')) {\n                newStr = str.substr(1, str.length - 2);\n        }\n        return `Regex("${newStr.replace(/\\\\([\\s\\S])|(")/g, \'\\\\$1$2\')}")`;\n    }\n  BoolTypeTemplate: !!js/function &BoolTypeTemplate >\n    (literal) => {\n        return literal.toLowerCase();\n    }\n  IntegerTypeTemplate: &IntegerTypeTemplate null\n  DecimalTypeTemplate: &DecimalTypeTemplate null\n  LongBasicTypeTemplate: &LongBasicTypeTemplate null\n  HexTypeTemplate: &HexTypeTemplate null\n  OctalTypeTemplate: !!js/function &OctalTypeTemplate >\n    (literal) => {\n        literal = literal.replace(/[oO]+/g, \'0\')\n        return parseInt(literal, 8).toString()\n    }\n  NumericTypeTemplate: &NumericTypeTemplate null\n  ArrayTypeTemplate: !!js/function &ArrayTypeTemplate >\n    (literal, depth) => {\n        depth++;\n        const indent = \'\\n\' + \'    \'.repeat(depth);\n        const initialIndent = \'\\n\' + \'    \'.repeat(depth-1);\n        if (literal === \'\') {\n          return \'new BsonArray()\'\n        }\n\n        return `new BsonArray${initialIndent}{${literal}${initialIndent}}`;\n    }\n  ArrayTypeArgsTemplate: !!js/function &ArrayTypeArgsTemplate >\n    (arg, depth, last) => {\n        depth++;\n        const indent = \'\\n\' + \'    \'.repeat(depth);\n        const arr = arg.split(\', new\').join(`, ${indent}new`)\n\n        return last ? `${indent}${arr}` : `${indent}${arr},`;\n    }\n  NullTypeTemplate: !!js/function &NullTypeTemplate >\n    () => {\n        return \'BsonNull.Value\';\n    }\n  UndefinedTypeTemplate: !!js/function &UndefinedTypeTemplate >\n    () => {\n        return \'BsonUndefined.Value\';\n    }\n  ObjectTypeTemplate: !!js/function &ObjectTypeTemplate >\n    (literal) => {\n        if (literal === \'\') {\n            return `new BsonDocument()`;\n        }\n        return literal;\n    }\n  ObjectTypeArgsTemplate: !!js/function &ObjectTypeArgsTemplate >\n    (args, depth) => {\n        if (args.length === 0) {\n            return \'new BsonDocument()\';\n        }\n        depth++;\n        const indent = \'\\n\' + \'    \'.repeat(depth);\n        const initialIndent = \'\\n\' + \'    \'.repeat(depth-1);\n        const doubleStringify = (str) => {\n            let newStr = str;\n            if (\n              (str.charAt(0) === \'\\\'\' && str.charAt(str.length - 1) === \'\\\'\') ||\n              (str.charAt(0) === \'"\' && str.charAt(str.length - 1) === \'"\')) {\n                newStr = str.substr(1, str.length - 2);\n            }\n            return `"${newStr.replace(/\\\\([\\s\\S])|(")/g, \'\\\\$1$2\')}"`;\n        }\n\n        if (args.length === 1) {\n          return `new BsonDocument(${doubleStringify(args[0][0])}, ${args[0][1]})`;\n        }\n\n        const pairs = args.map((pair) => {\n            return `${indent}{ ${doubleStringify(pair[0])}, ${pair[1]} }`;\n        }).join(\', \');\n\n        return `new BsonDocument${initialIndent}{${pairs}${initialIndent}}`\n    }\n  # BSON Object Method templates\n  CodeCodeTemplate: !!js/function &CodeCodeTemplate >\n    (lhs) => {\n        return `${lhs}.Code`;\n    }\n  CodeCodeArgsTemplate: &CodeCodeArgsTemplate null\n  CodeScopeTemplate: !!js/function &CodeScopeTemplate >\n    (lhs) => {\n        return `${lhs}.Scope`;\n    }\n  CodeScopeArgsTemplate: &CodeScopeArgsTemplate null\n  # Since in python, generated from attr access instead of func call, add () in template.\n  ObjectIdToStringTemplate: !!js/function &ObjectIdToStringTemplate >\n    (lhs) => {\n        return `${lhs}.ToString()`;\n    }\n  ObjectIdToStringArgsTemplate: !!js/function &ObjectIdToStringArgsTemplate >\n    () => {\n        return \'\';\n    }\n  ObjectIdEqualsTemplate: !!js/function &ObjectIdEqualsTemplate >\n    (lhs) => {\n        return `${lhs}.Equals`;\n    }\n  ObjectIdEqualsArgsTemplate: !!js/function &ObjectIdEqualsArgsTemplate >\n    (lhs, arg) => {\n        if (arg.indexOf(\'new\') === 0) {\n          arg = arg.replace(/new /g, \'\')\n        }\n        return `(new ${arg})`;\n    }\n\n  ObjectIdGetTimestampTemplate: !!js/function &ObjectIdGetTimestampTemplate >\n    (lhs) => {\n        return `${lhs}.Timestamp`;\n    }\n  ObjectIdGetTimestampArgsTemplate:\n    !!js/function &ObjectIdGetTimestampArgsTemplate >\n    (lhs) => {\n        return \'\';\n    }\n  BinaryValueTemplate: !!js/function &BinaryValueTemplate >\n    (lhs) => {\n        return `${lhs}.ToString`;\n    }\n  BinaryValueArgsTemplate: &BinaryValueArgsTemplate null\n  BinaryLengthTemplate: !!js/function &BinaryLengthTemplate >\n    () => {\n      return \'\';\n    }\n  BinaryLengthArgsTemplate: !!js/function &BinaryLengthArgsTemplate >\n    (lhs) => {\n      return `${lhs}.Bytes.Length`;\n    }\n  BinaryToStringTemplate: !!js/function &BinaryToStringTemplate >\n    (lhs) => {\n      return `${lhs}.ToString`;\n    }\n  BinaryToStringArgsTemplate: &BinaryToStringArgsTemplate null\n  BinarySubtypeTemplate: !!js/function &BinarySubtypeTemplate >\n    (lhs) => {\n      return `${lhs}.SubType`;\n    }\n  BinarySubtypeArgsTemplate: !!js/function &BinarySubtypeArgsTemplate >\n    () => {\n      return \'\';\n    }\n  DBRefGetDBTemplate: !!js/function &DBRefGetDBTemplate >\n    (lhs) => {\n      return `${lhs}.DatabaseName`;\n    }\n  DBRefGetDBArgsTemplate: !!js/function &DBRefGetDBArgsTemplate >\n    () => {\n      return \'\';\n    }\n  DBRefGetCollectionTemplate: !!js/function &DBRefGetCollectionTemplate >\n    (lhs) => {\n        return `${lhs}.CollectionName`;\n    }\n  DBRefGetCollectionArgsTemplate:\n    !!js/function &DBRefGetCollectionArgsTemplate >\n    () => {\n      return \'\';\n    }\n  DBRefGetIdTemplate: !!js/function &DBRefGetIdTemplate >\n    (lhs) => {\n        return `${lhs}.Id`;\n    }\n  DBRefGetIdArgsTemplate: !!js/function &DBRefGetIdArgsTemplate >\n    () => {\n      return \'\';\n    }\n  LongEqualsTemplate: !!js/function &LongEqualsTemplate >\n    (lhs) => {\n        return `${lhs} == `;\n    }\n  LongEqualsArgsTemplate: !!js/function &LongEqualsArgsTemplate >\n    (lhs, arg) => {\n          return `${arg}`;\n    }\n  LongToIntTemplate: !!js/function &LongToIntTemplate >\n    (lhs) => {\n        return `(int) ${lhs}`;\n    }\n  LongToIntArgsTemplate: !!js/function &LongToIntArgsTemplate >\n    () => {\n        return \'\';\n    }\n  LongToStringTemplate: !!js/function &LongToStringTemplate >\n    (lhs) => {\n        return lhs;\n    }\n  LongToStringArgsTemplate: &LongToStringArgsTemplate null\n  LongToNumberTemplate: !!js/function &LongToNumberTemplate >\n    (lhs) => {\n        return `(double) ${lhs}`;\n    }\n  LongToNumberArgsTemplate: !!js/function &LongToNumberArgsTemplate >\n    () => {\n        return \'\';\n    }\n  LongAddTemplate: !!js/function &LongAddTemplate >\n    (lhs) => {\n        return `${lhs} +`;\n    }\n  LongAddArgsTemplate: !!js/function &LongAddArgsTemplate >\n    (lhs, arg) => {\n        return ` ${arg}`;\n    }\n  LongSubtractTemplate: !!js/function &LongSubtractTemplate >\n    (lhs) => {\n        return `${lhs} -`;\n    }\n  LongSubtractArgsTemplate: !!js/function &LongSubtractArgsTemplate >\n    (lhs, arg) => {\n        return ` ${arg}`;\n    }\n  LongMultiplyTemplate: !!js/function &LongMultiplyTemplate >\n    (lhs) => {\n        return `${lhs} *`;\n    }\n  LongMultiplyArgsTemplate: !!js/function &LongMultiplyArgsTemplate >\n    (lhs, arg) => {\n        return ` ${arg}`;\n    }\n  LongDivTemplate: !!js/function &LongDivTemplate >\n    (lhs) => {\n        return `${lhs} /`;\n    }\n  LongDivArgsTemplate: !!js/function &LongDivArgsTemplate >\n    (lhs, arg) => {\n        return ` ${arg}`;\n    }\n  LongModuloTemplate: !!js/function &LongModuloTemplate >\n    (lhs) => {\n        return `${lhs} %`;\n    }\n  LongModuloArgsTemplate: !!js/function &LongModuloArgsTemplate >\n    (lhs, arg) => {\n        return ` ${arg}`;\n    }\n  LongAndTemplate: !!js/function &LongAndTemplate >\n    (lhs) => {\n        return `${lhs} &`;\n    }\n  LongAndArgsTemplate: !!js/function &LongAndArgsTemplate >\n    (lhs, arg) => {\n        return ` ${arg}`;\n    }\n  LongOrTemplate: !!js/function &LongOrTemplate >\n    (lhs) => {\n        return `${lhs} |`;\n    }\n  LongOrArgsTemplate: !!js/function &LongOrArgsTemplate >\n    (lhs, arg) => {\n        return ` ${arg}`;\n    }\n  LongXorTemplate: !!js/function &LongXorTemplate >\n    (lhs) => {\n        return `${lhs} ^`;\n    }\n  LongXorArgsTemplate: !!js/function &LongXorArgsTemplate >\n    (lhs, arg) => {\n        return ` ${arg}`;\n    }\n  LongShiftLeftTemplate: !!js/function &LongShiftLeftTemplate >\n    (lhs) => {\n        return `${lhs} <<`;\n    }\n  LongShiftLeftArgsTemplate: !!js/function &LongShiftLeftArgsTemplate >\n    (lhs, arg) => {\n        return ` ${arg}`;\n    }\n  LongShiftRightTemplate: !!js/function &LongShiftRightTemplate >\n    (lhs) => {\n        return `${lhs} >>`;\n    }\n  LongShiftRightArgsTemplate: !!js/function &LongShiftRightArgsTemplate >\n    (lhs, arg) => {\n        return ` ${arg}`;\n    }\n  LongCompareTemplate: !!js/function &LongCompareTemplate >\n    (lhs) => {\n        return `${lhs} - `;\n    }\n  LongCompareArgsTemplate: !!js/function &LongCompareArgsTemplate >\n    (lhs, arg) => {\n        return arg;\n    }\n  LongIsOddTemplate: !!js/function &LongIsOddTemplate >\n    (lhs) => {\n        return `${lhs}`;\n    }\n  LongIsOddArgsTemplate: !!js/function &LongIsOddArgsTemplate >\n    () => {\n        return \' % 2 == 1\';\n    }\n  LongIsZeroTemplate: !!js/function &LongIsZeroTemplate >\n    (lhs) => {\n        return `${lhs} == 0`;\n    }\n  LongIsZeroArgsTemplate: !!js/function &LongIsZeroArgsTemplate >\n    () => {\n        return \'\';\n    }\n  LongIsNegativeTemplate: !!js/function &LongIsNegativeTemplate >\n    (lhs) => {\n        return `${lhs} < 0`;\n    }\n  LongIsNegativeArgsTemplate: !!js/function &LongIsNegativeArgsTemplate >\n    () => {\n        return \'\';\n    }\n  LongNegateTemplate: !!js/function &LongNegateTemplate >\n    () => {\n        return \'-\';\n    }\n  LongNegateArgsTemplate: !!js/function &LongNegateArgsTemplate >\n    (lhs) => {\n        return `${lhs}`;\n    }\n  LongNotTemplate: !!js/function &LongNotTemplate >\n    () => {\n        return \'~\';\n    }\n  LongNotArgsTemplate: !!js/function &LongNotArgsTemplate >\n    (lhs) => {\n        return `${lhs}`;\n    }\n  LongNotEqualsTemplate: !!js/function &LongNotEqualsTemplate >\n    (lhs) => {\n        return `${lhs} !=`;\n    }\n  LongNotEqualsArgsTemplate: !!js/function &LongNotEqualsArgsTemplate >\n    (lhs, arg) => {\n        return ` ${arg}`;\n    }\n  LongGreaterThanTemplate: !!js/function &LongGreaterThanTemplate >\n    (lhs) => {\n        return `${lhs} >`;\n    }\n  LongGreaterThanArgsTemplate: !!js/function &LongGreaterThanArgsTemplate >\n    (lhs, arg) => {\n        return ` ${arg}`;\n    }\n  LongGreaterThanOrEqualTemplate:\n    !!js/function &LongGreaterThanOrEqualTemplate >\n    (lhs) => {\n        return `${lhs} >=`;\n    }\n  LongGreaterThanOrEqualArgsTemplate:\n    !!js/function &LongGreaterThanOrEqualArgsTemplate >\n    (lhs, arg) => {\n        return ` ${arg}`;\n    }\n  LongLessThanTemplate: !!js/function &LongLessThanTemplate >\n    (lhs) => {\n        return `${lhs} <`;\n    }\n  LongLessThanArgsTemplate: !!js/function &LongLessThanArgsTemplate >\n    (lhs, arg) => {\n        return ` ${arg}`;\n    }\n  LongLessThanOrEqualTemplate: !!js/function &LongLessThanOrEqualTemplate >\n    (lhs) => {\n        return `${lhs} <=`;\n    }\n  LongLessThanOrEqualArgsTemplate:\n    !!js/function &LongLessThanOrEqualArgsTemplate >\n    (lhs, arg) => {\n        return ` ${arg}`;\n    }\n  LongFloatApproxTemplate: !!js/function &LongFloatApproxTemplate >\n    (lhs) => {\n        return `(float) ${lhs}`;\n    }\n  LongTopTemplate: !!js/function &LongTopTemplate >\n    (lhs) => {\n        return `${lhs} >> 32`;\n    }\n  LongBottomTemplate: !!js/function &LongBottomTemplate >\n    (lhs) => {\n       return `${lhs} & 0x0000ffff`;\n    }\n  TimestampToStringTemplate: !!js/function &TimestampToStringTemplate >\n    (lhs) => {\n      return `${lhs}.ToString`;\n    }\n  TimestampToStringArgsTemplate: &TimestampToStringArgsTemplate null\n  TimestampEqualsTemplate: !!js/function &TimestampEqualsTemplate >\n    (lhs) => {\n      return `${lhs}.Equals`;\n    }\n  TimestampEqualsArgsTemplate: &TimestampEqualsArgsTemplate null\n  TimestampGetLowBitsTemplate: !!js/function &TimestampGetLowBitsTemplate >\n    (lhs) => {\n        return `${lhs}.ToUniversalTime`;\n    }\n  TimestampGetLowBitsArgsTemplate: &TimestampGetLowBitsArgsTemplate null\n  TimestampGetHighBitsTemplate: !!js/function &TimestampGetHighBitsTemplate >\n    (lhs) => {\n        return `${lhs}.Increment`;\n    }\n  TimestampGetHighBitsArgsTemplate:\n    !!js/function &TimestampGetHighBitsArgsTemplate >\n    (lhs) => {\n        return \'\';\n    }\n  TimestampTTemplate: !!js/function &TimestampTTemplate >\n    (lhs) => {\n        return `${lhs}.ToUniversalTime()`;\n    }\n  TimestampITemplate: !!js/function &TimestampITemplate >\n    (lhs) => {\n        return `${lhs}.Increment`;\n    }\n  TimestampAsDateTemplate: !!js/function &TimestampAsDateTemplate >\n    (lhs) => {\n        return `new DateTime(1970, 1, 1).AddSeconds(${lhs}.Timestamp)`;\n    }\n  TimestampAsDateArgsTemplate: !!js/function &TimestampAsDateArgsTemplate >\n    () => {\n        return \'\';\n    }\n  TimestampCompareTemplate: !!js/function &TimestampCompareTemplate >\n    (lhs) => {\n        return `${lhs}.CompareTo`;\n    }\n  TimestampCompareArgsTemplate: &TimestampCompareArgsTemplate null\n  TimestampNotEqualsTemplate: !!js/function &TimestampNotEqualsTemplate >\n    (lhs) => {\n        return `${lhs} != `;\n    }\n  TimestampNotEqualsArgsTemplate:\n    !!js/function &TimestampNotEqualsArgsTemplate >\n    (lhs, arg) => {\n        return `${arg}`;\n    }\n  TimestampGreaterThanTemplate: !!js/function &TimestampGreaterThanTemplate >\n    (lhs) => {\n        return `${lhs} > `;\n    }\n  TimestampGreaterThanArgsTemplate:\n    !!js/function &TimestampGreaterThanArgsTemplate >\n    (lhs, arg) => {\n        return `${arg}`;\n    }\n  TimestampGreaterThanOrEqualTemplate:\n    !!js/function &TimestampGreaterThanOrEqualTemplate >\n    (lhs) => {\n        return `${lhs} >= `;\n    }\n  TimestampGreaterThanOrEqualArgsTemplate:\n    !!js/function &TimestampGreaterThanOrEqualArgsTemplate >\n    (lhs, arg) => {\n        return `${arg}`;\n    }\n  TimestampLessThanTemplate: !!js/function &TimestampLessThanTemplate >\n    (lhs) => {\n        return `${lhs} < `;\n    }\n  TimestampLessThanArgsTemplate: !!js/function &TimestampLessThanArgsTemplate >\n    (lhs, arg) => {\n        return `${arg}`;\n    }\n  TimestampLessThanOrEqualTemplate:\n    !!js/function &TimestampLessThanOrEqualTemplate >\n    (lhs) => {\n        return `${lhs} <= `;\n    }\n  TimestampLessThanOrEqualArgsTemplate:\n    !!js/function &TimestampLessThanOrEqualArgsTemplate >\n    (lhs, arg) => {\n        return `${arg}`;\n    }\n  SymbolValueOfTemplate: !!js/function &SymbolValueOfTemplate >\n    (lhs) => {\n        return `${lhs}`;\n    }\n  SymbolValueOfArgsTemplate: !!js/function &SymbolValueOfArgsTemplate >\n    () => {\n        return \'\';\n    }\n  SymbolInspectTemplate: !!js/function &SymbolInspectTemplate >\n    (lhs) => {\n        return `${lhs}`;\n    }\n  SymbolInspectArgsTemplate: !!js/function &SymbolInspectArgsTemplate >\n    () => {\n        return \'\';\n    }\n  SymbolToStringTemplate: !!js/function &SymbolToStringTemplate >\n    (lhs) => {\n        return `${lhs}`;\n    }\n  SymbolToStringArgsTemplate: !!js/function &SymbolToStringArgsTemplate >\n    () => {\n        return \'\';\n    }\n  # Symbol Templates\n  CodeSymbolTemplate:\n    !!js/function &CodeSymbolTemplate > # Also has process method\n    () => {\n        return \'BsonJavaScript\';\n    }\n  CodeSymbolArgsTemplate: !!js/function &CodeSymbolArgsTemplate >\n    (lhs, code, scope) => {\n        // Double quote stringify\n        let newStr = code === undefined ? \'\' : code;\n        const str = newStr;\n        if (\n            (str.charAt(0) === \'\\\'\' && str.charAt(str.length - 1) === \'\\\'\') ||\n            (str.charAt(0) === \'"\' && str.charAt(str.length - 1) === \'"\')) {\n            newStr = str.substr(1, str.length - 2);\n        }\n        code = `"${newStr.replace(/\\\\([\\s\\S])|(")/g, \'\\\\$1$2\')}"`;\n        return (scope === undefined) ? `(${code})` : `WithScope(${code}, ${scope})`;\n    }\n  ObjectIdSymbolTemplate: !!js/function &ObjectIdSymbolTemplate >\n    () => {\n        return \'ObjectId\';\n    }\n  ObjectIdSymbolArgsTemplate: !!js/function &ObjectIdSymbolArgsTemplate >\n    (lhs, str) => {\n        if (!str || str.length === 0) {\n            return \'()\';\n        }\n        let newStr = str;\n        if (\n            (str.charAt(0) === \'\\\'\' && str.charAt(str.length - 1) === \'\\\'\') ||\n            (str.charAt(0) === \'"\' && str.charAt(str.length - 1) === \'"\')) {\n            newStr = str.substr(1, str.length - 2);\n        }\n        return `("${newStr.replace(/\\\\([\\s\\S])|(")/g, \'\\\\$1$2\')}")`;\n    }\n  BinarySymbolTemplate: !!js/function &BinarySymbolTemplate >\n    () => {\n        return \'BsonBinaryData\';\n    }\n  BinarySymbolArgsTemplate: !!js/function &BinarySymbolArgsTemplate >\n    (lhs, bytes, type) => {\n        const str = bytes;\n        let newStr = str;\n        if (\n          (str.charAt(0) === \'\\\'\' && str.charAt(str.length - 1) === \'\\\'\') ||\n          (str.charAt(0) === \'"\' && str.charAt(str.length - 1) === \'"\')) {\n            newStr = str.substr(1, str.length - 2);\n        }\n        bytes = `"${newStr.replace(/\\\\([\\s\\S])|(")/g, \'\\\\$1$2\')}"`;\n\n        if (type === null) {\n            return `(System.Text.Encoding.ASCII.GetBytes(${bytes}))`;\n        }\n        return `(System.Text.Encoding.ASCII.GetBytes(${bytes}), ${type})`;\n    }\n  BinarySymbolSubtypeDefaultTemplate:\n    !!js/function &BinarySymbolSubtypeDefaultTemplate >\n    () => {\n        return \'BsonBinarySubType.Binary\';\n    }\n  BinarySymbolSubtypeFunctionTemplate:\n    !!js/function &BinarySymbolSubtypeFunctionTemplate >\n    () => {\n        return \'BsonBinarySubType.Function\';\n    }\n  BinarySymbolSubtypeByteArrayTemplate:\n    !!js/function &BinarySymbolSubtypeByteArrayTemplate >\n    () => {\n        return \'BsonBinarySubType.OldBinary\';\n    }\n  BinarySymbolSubtypeUuidOldTemplate:\n    !!js/function &BinarySymbolSubtypeUuidOldTemplate >\n    () => {\n        return \'BsonBinarySubType.UuidLegacy\';\n    }\n  BinarySymbolSubtypeUuidTemplate:\n    !!js/function &BinarySymbolSubtypeUuidTemplate >\n    () => {\n        return \'BsonBinarySubType.UuidStandard\';\n    }\n  BinarySymbolSubtypeMd5Template:\n    !!js/function &BinarySymbolSubtypeMd5Template >\n    () => {\n        return \'BsonBinarySubType.MD5\';\n    }\n  BinarySymbolSubtypeUserDefinedTemplate:\n    !!js/function &BinarySymbolSubtypeUserDefinedTemplate >\n    () => {\n        return \'BsonBinarySubType.UserDefined\';\n    }\n  DBRefSymbolTemplate: !!js/function &DBRefSymbolTemplate >\n    () => {\n        return \'MongoDBRef\';\n    }\n  DBRefSymbolArgsTemplate: &DBRefSymbolArgsTemplate null\n  DoubleSymbolTemplate: !!js/function &DoubleSymbolTemplate >\n    () => {\n        return \'\';\n    }\n  DoubleSymbolArgsTemplate: !!js/function &DoubleSymbolArgsTemplate >\n    (lhs, arg, type) => {\n        arg = arg === undefined ? 0 : arg;\n\n        if (type === \'_hex\') {\n          return `Convert.ToDouble(${arg})`;\n        }\n        if (type === \'_string\') {\n          return `Convert.ToDouble(${arg})`;\n        }\n\n        if (type === \'_decimal\') {\n          return arg;\n        }\n\n        return `${Math.round(arg).toFixed(1)}`;\n    }\n  Int32SymbolTemplate: !!js/function &Int32SymbolTemplate >\n    () => {\n        return \'\';\n    }\n  Int32SymbolArgsTemplate: !!js/function &Int32SymbolArgsTemplate >\n    (lhs, arg, type) => {\n        arg = arg === undefined ? 0 : arg;\n\n        if (type === \'_hex\' || type === \'_decimal\' || type === \'_string\') {\n          return `Convert.ToInt32(${arg})`;\n        }\n\n        return arg;\n    }\n  LongSymbolTemplate: !!js/function &LongSymbolTemplate >\n    () => {\n        return \'\';\n    }\n  LongSymbolArgsTemplate: !!js/function &LongSymbolArgsTemplate >\n    (lhs, arg) => {\n        if (!arg || arg.length === 0) {\n            arg = \'0\';\n        }\n        if (arg.indexOf(\'\\\'\') === 0 || arg.indexOf(\'"\') === 0) {\n          return `Convert.ToInt64(${arg})`;\n        }\n        return `${arg}L`;\n    }\n  LongSymbolMaxTemplate: !!js/function &LongSymbolMaxTemplate >\n    () => {\n        return \'Int64.MaxValue\';\n    }\n  LongSymbolMaxArgsTemplate: &LongSymbolMaxArgsTemplate null\n  LongSymbolMinTemplate: !!js/function &LongSymbolMinTemplate >\n    () => {\n        return \'Int64.MinValue\';\n    }\n  LongSymbolMinArgsTemplate: &LongSymbolMinArgsTemplate null\n  LongSymbolZeroTemplate: !!js/function &LongSymbolZeroTemplate >\n    (lhs) => {\n        return \'0L\';\n    }\n  LongSymbolZeroArgsTemplate: &LongSymbolZeroArgsTemplate null\n  LongSymbolOneTemplate: !!js/function &LongSymbolOneTemplate >\n    (lhs) => {\n        return \'1L\';\n    }\n  LongSymbolOneArgsTemplate: &LongSymbolOneArgsTemplate null\n  LongSymbolNegOneTemplate: !!js/function &LongSymbolNegOneTemplate >\n    (lhs) => {\n        return \'-1L\';\n    }\n  LongSymbolNegOneArgsTemplate: &LongSymbolNegOneArgsTemplate null\n  LongSymbolFromBitsTemplate:\n    !!js/function &LongSymbolFromBitsTemplate > # Also has process method\n    () => {\n        return \'\';\n    }\n  LongSymbolFromBitsArgsTemplate: &LongSymbolFromBitsArgsTemplate null\n  LongSymbolFromIntTemplate: !!js/function &LongSymbolFromIntTemplate >\n    () => {\n        return \'\';\n    }\n  LongSymbolFromIntArgsTemplate: !!js/function &LongSymbolFromIntArgsTemplate >\n    (lhs, arg) => {\n        return `${arg}L`;\n    }\n  LongSymbolFromNumberTemplate: &LongSymbolFromNumberTemplate null\n  LongSymbolFromNumberArgsTemplate: &LongSymbolFromNumberArgsTemplate null\n  LongSymbolFromStringTemplate: !!js/function &LongSymbolFromStringTemplate >\n    () => {\n        return \'Convert.ToInt64\';\n    }\n  LongSymbolFromStringArgsTemplate:\n    !!js/function &LongSymbolFromStringArgsTemplate >\n    (lhs, arg1, arg2) => {\n      if (arg2) {\n        return `(${arg1}, ${arg2})`\n      }\n      return `(${arg1}, 10)`\n    }\n  MinKeySymbolTemplate: !!js/function &MinKeySymbolTemplate >\n    () => {\n        return \'BsonMinKey\';\n    }\n  MinKeySymbolArgsTemplate: !!js/function &MinKeySymbolArgsTemplate >\n    () => {\n        return \'.Value\';\n    }\n  MaxKeySymbolTemplate: !!js/function &MaxKeySymbolTemplate >\n    () => {\n        return \'BsonMaxKey\';\n    }\n  MaxKeySymbolArgsTemplate: !!js/function &MaxKeySymbolArgsTemplate >\n    () => {\n        return \'.Value\';\n    }\n  TimestampSymbolTemplate: !!js/function &TimestampSymbolTemplate >\n    () => {\n        return \'BsonTimestamp\';\n    }\n  TimestampSymbolArgsTemplate: !!js/function &TimestampSymbolArgsTemplate >\n    (lhs, arg1, arg2) => {\n        if (typeof arg1 === \'undefined\') {\n            return \'(0, 0)\'\n        }\n        return `(${arg1}, ${arg2})`;\n    }\n  SymbolSymbolTemplate: !!js/function &SymbolSymbolTemplate >\n    () => {\n        return \'\';\n    }\n  SymbolSymbolArgsTemplate: !!js/function &SymbolSymbolArgsTemplate >\n    (_, arg) => {\n        return arg; // no parens because generates as a string\n    }\n  BSONRegExpSymbolTemplate: !!js/function &BSONRegExpSymbolTemplate >\n    () => {\n        return \'BsonRegularExpression\';\n    }\n  BSONRegExpSymbolArgsTemplate: !!js/function &BSONRegExpSymbolArgsTemplate >\n    (lhs, pattern, flags) => {\n        const doubleStringify = (str) => {\n            let newStr = str;\n            if (\n              (str.charAt(0) === \'\\\'\' && str.charAt(str.length - 1) === \'\\\'\') ||\n              (str.charAt(0) === \'"\' && str.charAt(str.length - 1) === \'"\')) {\n                newStr = str.substr(1, str.length - 2);\n            }\n            return `"${newStr.replace(/\\\\([\\s\\S])|(")/g, \'\\\\$1$2\')}"`;\n        }\n        return `(${doubleStringify(pattern)}${flags ? \', \' + doubleStringify(flags) : \'\'})`;\n    }\n  Decimal128SymbolTemplate: !!js/function &Decimal128SymbolTemplate >\n    () => {\n        return \'Decimal128\';\n    }\n  Decimal128SymbolArgsTemplate: !!js/function &Decimal128SymbolArgsTemplate >\n    (_, str) => { // just stringify\n        let newStr = str;\n        if (\n          (str.charAt(0) === \'\\\'\' && str.charAt(str.length - 1) === \'\\\'\') ||\n          (str.charAt(0) === \'"\' && str.charAt(str.length - 1) === \'"\')) {\n            newStr = str.substr(1, str.length - 2);\n        }\n        return `.Parse("${newStr.replace(/\\\\([\\s\\S])|(")/g, \'\\\\$1$2\')}")`;\n    }\n  Decimal128SymbolFromStringTemplate:\n    !!js/function &Decimal128SymbolFromStringTemplate >\n    (lhs) => {\n        return `${lhs}.Parse`;\n    }\n  Decimal128SymbolFromStringArgsTemplate:\n    !!js/function &Decimal128SymbolFromStringArgsTemplate >\n    (lhs, arg) => {\n        return `(${arg})`;\n    }\n  Decimal128ToStringTemplate: !!js/function &Decimal128ToStringTemplate >\n    (lhs) => {\n        return `${lhs}.ToString`;\n    }\n  Decimal128ToStringArgsTemplate: &Decimal128ToStringArgsTemplate null\n  # BSON Util Templates\n  ObjectIdCreateFromHexStringTemplate:\n    !!js/function &ObjectIdCreateFromHexStringTemplate >\n    (lhs) => {\n        return `new ${lhs}`;\n    }\n  ObjectIdCreateFromHexStringArgsTemplate: &ObjectIdCreateFromHexStringArgsTemplate null\n  ObjectIdCreateFromTimeTemplate:\n    !!js/function &ObjectIdCreateFromTimeTemplate >\n    () => {\n        return `new ObjectId.GenerateNewId`;\n    }\n  ObjectIdCreateFromTimeArgsTemplate:\n    !!js/function &ObjectIdCreateFromTimeArgsTemplate >\n    (lhs, arg, isNumber) => {\n        if (isNumber) {\n          return `(Convert.ToInt32(${arg}))`;\n        }\n        return `(${arg})`;\n    }\n  ObjectIdIsValidTemplate: !!js/function &ObjectIdIsValidTemplate >\n    (lhs) => {\n        return `new ${lhs}`;\n    }\n  ObjectIdIsValidArgsTemplate: &ObjectIdIsValidArgsTemplate null\n  # JS Symbol Templates\n  NumberSymbolTemplate: !!js/function &NumberSymbolTemplate >\n    () => {\n        return \'\';\n    }\n  NumberSymbolArgsTemplate: !!js/function &NumberSymbolArgsTemplate >\n    (lhs, arg, type) => {\n        arg = arg === undefined ? 0 : arg;\n\n        if (type === \'_string\') {\n          if (arg.indexOf(\'.\') !== -1) {\n            return `float.Parse(${arg})`\n          }\n          return `int.Parse(${arg})`;\n        }\n\n        if (arg.indexOf(\'.\') !== -1) {\n          return `(float) ${arg}`\n        }\n        return `(int) ${arg}`;\n    }\n  DateSymbolTemplate: !!js/function &DateSymbolTemplate >\n    () => {\n        return \'DateTime\';\n    }\n  DateSymbolArgsTemplate: !!js/function &DateSymbolArgsTemplate >\n    (lhs, date, isString) => {\n        let toStr = isString? \'.ToString("ddd MMM dd yyyy HH\\\':\\\'mm\\\':\\\'ss UTC")\' : \'\';\n\n        if (date === null) {\n            return `${lhs}.Now${toStr}`;\n        }\n\n        const dateStr = [\n            date.getUTCFullYear(),\n            date.getUTCMonth() + 1,\n            date.getUTCDate(),\n            date.getUTCHours(),\n            date.getUTCMinutes(),\n            date.getUTCSeconds()\n        ].join(\', \');\n\n        return `new ${lhs}(${dateStr})${toStr}`;\n    }\n  DateSymbolNowTemplate: !!js/function &DateSymbolNowTemplate >\n    () => {\n        return \'DateTime.Now\';\n    }\n  DateSymbolNowArgsTemplate: !!js/function &DateSymbolNowArgsTemplate >\n    () => {\n        return \'\';\n    }\n  RegExpSymbolTemplate:\n    !!js/function &RegExpSymbolTemplate > # Also has process method\n    () => {\n        return \'Regex\';\n    }\n  RegExpSymbolArgsTemplate: &RegExpSymbolArgsTemplate null\n  ImportTemplate: !!js/function &ImportTemplate >\n    (args) => {\n        const universal = [\'using MongoDB.Bson;\', \'using MongoDB.Driver;\'];\n        const all = universal.concat(Object.values(args));\n        return all.join(\'\\n\');\n    }\n  DriverImportTemplate: &DriverImportTemplate null\n  0ImportTemplate: &0ImportTemplate null\n  1ImportTemplate: &1ImportTemplate null\n  2ImportTemplate: &2ImportTemplate null\n  3ImportTemplate: &3ImportTemplate null\n  4ImportTemplate: &4ImportTemplate null\n  5ImportTemplate: &5ImportTemplate null\n  6ImportTemplate: &6ImportTemplate null\n  7ImportTemplate: &7ImportTemplate null\n  8ImportTemplate: !!js/function &8ImportTemplate >\n    () => {\n        return \'using System.Text.RegularExpressions;\';\n    }\n  9ImportTemplate: &9ImportTemplate null\n  10ImportTemplate: &10ImportTemplate null\n  11ImportTemplate: &11ImportTemplate null\n  12ImportTemplate: &12ImportTemplate null\n  100ImportTemplate: &100ImportTemplate null\n  101ImportTemplate: &101ImportTemplate null\n  102ImportTemplate: &102ImportTemplate null\n  103ImportTemplate: &103ImportTemplate null\n  104ImportTemplate: &104ImportTemplate null\n  105ImportTemplate: &105ImportTemplate null\n  106ImportTemplate: &106ImportTemplate null\n  107ImportTemplate: &107ImportTemplate null\n  108ImportTemplate: &108ImportTemplate null\n  109ImportTemplate: &109ImportTemplate null\n  110ImportTemplate: &110ImportTemplate null\n  111ImportTemplate: &111ImportTemplate null\n  112ImportTemplate: &112ImportTemplate null\n  113ImportTemplate: &113ImportTemplate null\n  114ImportTemplate: &114ImportTemplate null\n  200ImportTemplate: !!js/function &200ImportTemplate >\n    () => {\n        return \'using System;\';\n    }\n  201ImportTemplate: &201ImportTemplate null\n  300ImportTemplate: &300ImportTemplate null\n  301ImportTemplate: &301ImportTemplate null\n  302ImportTemplate: &302ImportTemplate null\n  303ImportTemplate: &303ImportTemplate null\n  304ImportTemplate: &304ImportTemplate null\n  305ImportTemplate: &305ImportTemplate null\n  306ImportTemplate: &306ImportTemplate null\n# Universal types\n# Everything inherits from StringType because we haven\'t implemented any of them.\nBasicTypes:\n    # Universal basic types\n    _bool: &BoolType\n        <<: *__type\n        id: "_bool"\n        code: 0\n        template: *BoolTypeTemplate\n    _integer: &IntegerType\n        <<: *__type\n        id: "_integer"\n        code: 1\n        template: *IntegerTypeTemplate\n    _long: &LongBasicType\n        <<: *__type\n        id: "_long"\n        code: 2\n        template: *LongBasicTypeTemplate\n    _decimal: &DecimalType\n        <<: *__type\n        id: "_decimal"\n        code: 3\n        template: *DecimalTypeTemplate\n    _hex: &HexType\n        <<: *__type\n        id: "_hex"\n        code: 4\n        template: *HexTypeTemplate\n    _octal: &OctalType\n        <<: *__type\n        id: "_octal"\n        code: 5\n        template: *OctalTypeTemplate\n    _numeric: &NumericType\n        <<: *__type\n        id: "_numeric"\n        code: 6\n        template: *NumericTypeTemplate\n    _string: &StringType\n        <<: *__type\n        id: "_string"\n        code: 7\n        template: *StringTypeTemplate\n    _regex: &RegexType\n        <<: *__type\n        id: "_regex"\n        code: 8\n        template: *RegexTypeTemplate\n    _array: &ArrayType\n        <<: *__type\n        id: "_array"\n        code: 9\n        template: *ArrayTypeTemplate\n        argsTemplate: *ArrayTypeArgsTemplate\n    _object: &ObjectType\n        <<: *__type\n        id: "_object"\n        code: 10\n        template: *ObjectTypeTemplate\n        argsTemplate: *ObjectTypeArgsTemplate\n    _null: &NullType\n        <<: *__type\n        id: "_null"\n        code: 11\n        template: *NullTypeTemplate\n    _undefined: &UndefinedType\n        <<: *__type\n        id: "_undefined"\n        code: 12\n        template: *UndefinedTypeTemplate\n\nSyntax:\n    equality:\n        template: *EqualitySyntaxTemplate\n    in:\n        template: *InSyntaxTemplate\n    and:\n        template: *AndSyntaxTemplate\n    or:\n        template: *OrSyntaxTemplate\n    not:\n        template: *NotSyntaxTemplate\n    unary:\n        template: *UnarySyntaxTemplate\n    binary:\n        template: *BinarySyntaxTemplate\n    parens:\n        template: *ParensSyntaxTemplate\n    eos:\n        template: *EosSyntaxTemplate\n    eof:\n        template: *EofSyntaxTemplate\n    # The new template takes in expr, and an optional skip argument and optional\n    # id argument. The skip argument is a boolean that if true then doesn\'t add\n    # new. The code argument is the symbol code being called. The template will check\n    # if it is an exception, i.e. a type that is a constructor but may not use new.\n    new:\n        template: *NewSyntaxTemplate\n    # The regex flags that change symbols between languages can be defined here.\n    # Flags that aren\'t defined can be left blank and will be ignored.\n    regexFlags: *RegexFlags\n    bsonRegexFlags: *BSONRegexFlags\n    driver: *DriverTemplate\nImports:\n    import:\n        template: *ImportTemplate\n    driver:\n        template: *DriverImportTemplate\n    0:\n        template: *0ImportTemplate\n    1:\n        template: *1ImportTemplate\n    2:\n        template: *2ImportTemplate\n    3:\n        template: *3ImportTemplate\n    4:\n        template: *4ImportTemplate\n    5:\n        template: *5ImportTemplate\n    6:\n        template: *6ImportTemplate\n    7:\n        template: *7ImportTemplate\n    8:\n        template: *8ImportTemplate\n    9:\n        template: *9ImportTemplate\n    10:\n        template: *10ImportTemplate\n    11:\n        template: *11ImportTemplate\n    12:\n        template: *12ImportTemplate\n    100:\n        template: *100ImportTemplate\n    101:\n        template: *101ImportTemplate\n    102:\n        template: *102ImportTemplate\n    103:\n        template: *103ImportTemplate\n    104:\n        template: *104ImportTemplate\n    105:\n        template: *105ImportTemplate\n    106:\n        template: *106ImportTemplate\n    107:\n        template: *107ImportTemplate\n    108:\n        template: *108ImportTemplate\n    109:\n        template: *109ImportTemplate\n    110:\n        template: *110ImportTemplate\n    111:\n        template: *111ImportTemplate\n    112:\n        template: *112ImportTemplate\n    113:\n        template: *113ImportTemplate\n    114:\n        template: *114ImportTemplate\n    200:\n        template: *200ImportTemplate\n    201:\n        template: *201ImportTemplate\n    300:\n        template: *300ImportTemplate\n    301:\n        template: *301ImportTemplate\n    302:\n        template: *302ImportTemplate\n    303:\n        template: *303ImportTemplate\n    304:\n        template: *304ImportTemplate\n    305:\n        template: *305ImportTemplate\n    306:\n        template: *306ImportTemplate\nBsonTypes:\n    Code: &CodeType\n        <<: *__type\n        id: "Code"\n        code: 100\n        type: *ObjectType\n        attr:\n            code:\n                callable: *var\n                args: null\n                attr: null\n                id: "code"\n                type: *StringType\n                template: *CodeCodeTemplate\n                argsTemplate: *CodeCodeArgsTemplate\n            scope:\n                callable: *var\n                args: null\n                attr: null\n                id: "scope"\n                type: *StringType\n                template: *CodeScopeTemplate\n                argsTemplate: *CodeScopeArgsTemplate\n    ObjectId: &ObjectIdType\n        <<: *__type\n        id: "ObjectId"\n        code: 101\n        type: *ObjectType\n        attr:\n            toString:\n                <<: *__func\n                id: "toString"\n                type: *StringType\n                template: *ObjectIdToStringTemplate\n                argsTemplate: *ObjectIdToStringArgsTemplate\n            equals:\n                <<: *__func\n                id: "equals"\n                args:\n                    - [ "ObjectId" ]\n                type: *BoolType\n                template: *ObjectIdEqualsTemplate\n                argsTemplate: *ObjectIdEqualsArgsTemplate\n            getTimestamp:\n                <<: *__func\n                id: "getTimestamp"\n                type: *IntegerType\n                template: *ObjectIdGetTimestampTemplate\n                argsTemplate: *ObjectIdGetTimestampArgsTemplate\n    BinData: &BinaryType\n        <<: *__type\n        id: "BinData"\n        code: 102\n        type: *ObjectType\n        attr:\n            toString:\n                <<: *__func\n                id: "toString"\n                type: *StringType\n                template: *BinaryToStringTemplate\n                argsTemplate: *BinaryToStringArgsTemplate\n            base64:\n                <<: *__func\n                id: "base64"\n                type: *StringType\n                template: *BinaryValueTemplate\n                argsTemplate: *BinaryValueArgsTemplate\n            length:\n                <<: *__func\n                id: "length"\n                type: *IntegerType\n                template: *BinaryLengthTemplate\n                argsTemplate: *BinaryLengthArgsTemplate\n            subtype:\n                <<: *__func\n                id: "subtype"\n                type: *IntegerType\n                template: *BinarySubtypeTemplate\n                argsTemplate: *BinarySubtypeArgsTemplate\n    DBRef: &DBRefType\n        <<: *__type\n        id: "DBRef"\n        code: 103\n        type: *ObjectType\n        attr:\n            getDb:\n                <<: *__func\n                id: "getDb"\n                type: *StringType\n                template: *DBRefGetDBTemplate\n                argsTemplate: *DBRefGetDBArgsTemplate\n            $db:\n                callable: *var\n                args: null\n                attr: null\n                id: "$db"\n                type: *StringType\n                template: *DBRefGetDBTemplate\n                argsTemplate: *DBRefGetDBArgsTemplate\n            getCollection:\n                <<: *__func\n                id: "getCollection"\n                type: *StringType\n                template: *DBRefGetCollectionTemplate\n                argsTemplate: *DBRefGetCollectionArgsTemplate\n            getRef:\n                <<: *__func\n                id: "getRef"\n                type: *StringType\n                template: *DBRefGetCollectionTemplate\n                argsTemplate: *DBRefGetCollectionArgsTemplate\n            $ref:\n                callable: *var\n                args: null\n                attr: null\n                id: "$ref"\n                type: *StringType\n                template: *DBRefGetCollectionTemplate\n                argsTemplate: *DBRefGetCollectionArgsTemplate\n            getId:\n                <<: *__func\n                id: "getId"\n                type: *StringType\n                template: *DBRefGetIdTemplate\n                argsTemplate: *DBRefGetIdArgsTemplate\n            $id:\n                callable: *var\n                args: null\n                attr: null\n                id: "$id"\n                type: *StringType\n                template: *DBRefGetIdTemplate\n                argsTemplate: *DBRefGetIdArgsTemplate\n    NumberInt: &Int32Type\n        <<: *__type\n        id: "NumberInt"\n        code: 105\n        type: *ObjectType\n        attr: {}\n    NumberLong: &LongType\n        <<: *__type\n        id: "NumberLong"\n        code: 106\n        type: *ObjectType\n        attr:\n            toString:\n                <<: *__func\n                id: "LongtoString" # Needs process method\n                args:\n                    - [ *IntegerType, null ]\n                type: *StringType\n                template: *LongToStringTemplate\n                argsTemplate: *LongToStringArgsTemplate\n            equals:\n                <<: *__func\n                id: "equals"\n                args:\n                    - [ "Long" ]\n                type: *BoolType\n                template: *LongEqualsTemplate\n                argsTemplate: *LongEqualsArgsTemplate\n            toInt:\n                <<: *__func\n                id: "toInt"\n                type: *IntegerType\n                template: *LongToIntTemplate\n                argsTemplate: *LongToIntArgsTemplate\n            toNumber:\n                <<: *__func\n                id: "toNumber"\n                type: *DecimalType\n                template: *LongToNumberTemplate\n                argsTemplate: *LongToNumberArgsTemplate\n            compare:\n                <<: *__func\n                id: "compare"\n                args:\n                    - [ "Long" ]\n                type: *StringType\n                template: *LongCompareTemplate\n                argsTemplate: *LongCompareArgsTemplate\n            isOdd:\n                <<: *__func\n                id: "isOdd"\n                type: *BoolType\n                template: *LongIsOddTemplate\n                argsTemplate: *LongIsOddArgsTemplate\n            isZero:\n                <<: *__func\n                id: "isZero"\n                type: *BoolType\n                template: *LongIsZeroTemplate\n                argsTemplate: *LongIsZeroArgsTemplate\n            isNegative:\n                <<: *__func\n                id: "isNegative"\n                type: *BoolType\n                template: *LongIsNegativeTemplate\n                argsTemplate: *LongIsNegativeArgsTemplate\n            negate:\n                <<: *__func\n                id: "negate"\n                type: "Long"\n                template: *LongNegateTemplate\n                argsTemplate: *LongNegateArgsTemplate\n            not:\n                <<: *__func\n                id: "not"\n                type: "Long"\n                template: *LongNotTemplate\n                argsTemplate: *LongNotArgsTemplate\n            notEquals:\n                <<: *__func\n                id: "notEquals"\n                args:\n                    - [ "Long" ]\n                type: *BoolType\n                template: *LongNotEqualsTemplate\n                argsTemplate: *LongNotEqualsArgsTemplate\n            greaterThan:\n                <<: *__func\n                id: "greaterThan"\n                args:\n                    - [ "Long" ]\n                type: *BoolType\n                template: *LongGreaterThanTemplate\n                argsTemplate: *LongGreaterThanArgsTemplate\n            greaterThanOrEqual:\n                <<: *__func\n                id: "greaterThanOrEqual"\n                args:\n                    - [ "Long" ]\n                type: *BoolType\n                template: *LongGreaterThanOrEqualTemplate\n                argsTemplate: *LongGreaterThanOrEqualArgsTemplate\n            lessThan:\n                <<: *__func\n                id: "lessThan"\n                args:\n                    - [ "Long" ]\n                type: *BoolType\n                template: *LongLessThanTemplate\n                argsTemplate: *LongLessThanArgsTemplate\n            lessThanOrEqual:\n                <<: *__func\n                id: "lessThanOrEqual"\n                args:\n                    - [ "Long" ]\n                type: *BoolType\n                template: *LongLessThanOrEqualTemplate\n                argsTemplate: *LongLessThanOrEqualArgsTemplate\n            add:\n                <<: *__func\n                id: "add"\n                args:\n                    - [ "Long" ]\n                type: "Long"\n                template: *LongAddTemplate\n                argsTemplate: *LongAddArgsTemplate\n            subtract:\n                <<: *__func\n                id: "subtract"\n                args:\n                    - [ "Long" ]\n                type: "Long"\n                template: *LongSubtractTemplate\n                argsTemplate: *LongSubtractArgsTemplate\n            multiply:\n                <<: *__func\n                id: "multiply"\n                args:\n                    - [ "Long" ]\n                type: "Long"\n                template: *LongMultiplyTemplate\n                argsTemplate: *LongMultiplyArgsTemplate\n            div:\n                <<: *__func\n                id: "div"\n                args:\n                    - [ "Long" ]\n                type: "Long"\n                template: *LongDivTemplate\n                argsTemplate: *LongDivArgsTemplate\n            modulo:\n                <<: *__func\n                id: "modulo"\n                args:\n                    - [ "Long" ]\n                type: "Long"\n                template: *LongModuloTemplate\n                argsTemplate: *LongModuloArgsTemplate\n            and:\n                <<: *__func\n                id: "and"\n                args:\n                    - [ "Long" ]\n                type: "Long"\n                template: *LongAndTemplate\n                argsTemplate: *LongAndArgsTemplate\n            or:\n                <<: *__func\n                id: "or"\n                args:\n                    - [ "Long" ]\n                type: "Long"\n                template: *LongOrTemplate\n                argsTemplate: *LongOrArgsTemplate\n            xor:\n                <<: *__func\n                id: "xor"\n                args:\n                    - [ "Long" ]\n                type: "Long"\n                template: *LongXorTemplate\n                argsTemplate: *LongXorArgsTemplate\n            shiftLeft:\n                <<: *__func\n                id: "shiftLeft"\n                args:\n                    - [ *IntegerType ]\n                type: "Long"\n                template: *LongShiftLeftTemplate\n                argsTemplate: *LongShiftLeftArgsTemplate\n            shiftRight:\n                <<: *__func\n                id: "shiftRight"\n                args:\n                    - [ *IntegerType ]\n                type: "Long"\n                template: *LongShiftRightTemplate\n                argsTemplate: *LongShiftRightArgsTemplate\n    MinKeyType: &MinKeyType\n        <<: *__type\n        id: "MinKey"\n        code: 107\n        type: *ObjectType\n    MaxKeyType: &MaxKeyType\n        <<: *__type\n        id: "MaxKey"\n        code: 108\n        type: *ObjectType\n    Timestamp: &TimestampType\n        <<: *__type\n        id: "Timestamp"\n        code: 110\n        type: *ObjectType\n        attr:\n            toString:\n                <<: *__func\n                id: "toString"\n                type: *StringType\n                template: *TimestampToStringTemplate\n                argsTemplate: *TimestampToStringArgsTemplate\n            equals:\n                <<: *__func\n                id: "equals"\n                args:\n                    - [ "Timestamp" ]\n                type: *BoolType\n                template: *TimestampEqualsTemplate\n                argsTemplate: *TimestampEqualsArgsTemplate\n            getLowBits:\n                <<: *__func\n                id: "getLowBits"\n                type: *IntegerType\n                template: *TimestampGetLowBitsTemplate\n                argsTemplate: *TimestampGetLowBitsArgsTemplate\n            getHighBits:\n                <<: *__func\n                id: "getHighBits"\n                type: *IntegerType\n                template: *TimestampGetHighBitsTemplate\n                argsTemplate: *TimestampGetHighBitsArgsTemplate\n            compare:\n                <<: *__func\n                id: "compare"\n                args:\n                    - [ "Timestamp" ]\n                type: *StringType\n                template: *TimestampCompareTemplate\n                argsTemplate: *TimestampCompareArgsTemplate\n            notEquals:\n                <<: *__func\n                id: "notEquals"\n                args:\n                    - [ "Timestamp" ]\n                type: *BoolType\n                template: *TimestampNotEqualsTemplate\n                argsTemplate: *TimestampNotEqualsArgsTemplate\n            greaterThan:\n                <<: *__func\n                id: "greaterThan"\n                args:\n                    - [ "Timestamp" ]\n                type: *BoolType\n                template: *TimestampGreaterThanTemplate\n                argsTemplate: *TimestampGreaterThanArgsTemplate\n            greaterThanOrEqual:\n                <<: *__func\n                id: "greaterThanOrEqual"\n                args:\n                    - [ "Timestamp" ]\n                type: *BoolType\n                template: *TimestampGreaterThanOrEqualTemplate\n                argsTemplate: *TimestampGreaterThanOrEqualArgsTemplate\n            lessThan:\n                <<: *__func\n                id: "lessThan"\n                args:\n                    - [ "Timestamp" ]\n                type: *BoolType\n                template: *TimestampLessThanTemplate\n                argsTemplate: *TimestampLessThanArgsTemplate\n            lessThanOrEqual:\n                <<: *__func\n                id: "lessThanOrEqual"\n                args:\n                    - [ "Timestamp" ]\n                type: *BoolType\n                template: *TimestampLessThanOrEqualTemplate\n                argsTemplate: *TimestampLessThanOrEqualArgsTemplate\n    BSONSymbol: &SymbolType\n        <<: *__type\n        id: "BSONSymbol"\n        code: 111\n        type: *ObjectType\n        attr:\n            valueOf:\n                <<: *__func\n                id: "valueOf"\n                type: *StringType\n                template: *SymbolValueOfTemplate\n                argsTemplate: *SymbolValueOfArgsTemplate\n            toString:\n                <<: *__func\n                id: "toString"\n                type: *StringType\n                template: *SymbolToStringTemplate\n                argsTemplate: *SymbolToStringArgsTemplate\n            inspect:\n                <<: *__func\n                id: "inspect"\n                type: *StringType\n                template: *SymbolInspectTemplate\n                argsTemplate: *SymbolInspectArgsTemplate\n    Double: &DoubleType\n        <<: *__type\n        id: "Double"\n        code: 104\n        type: *ObjectType\n        attr: {}\n    Decimal128: &Decimal128Type\n        <<: *__type\n        id: "Decimal128"\n        code: 112\n        type: *ObjectType\n        attr:\n            toString:\n                <<: *__func\n                id: "toString"\n                type: *StringType\n                template: *Decimal128ToStringTemplate\n                argsTemplate: *Decimal128ToStringArgsTemplate\n    NumberDecimal: &NumberDecimalType\n        <<: *__type\n        id: "NumberDecimal"\n        code: 112\n        type: *ObjectType\n        attr:\n            toString:\n                <<: *__func\n                id: "toString"\n                type: *StringType\n                template: *Decimal128ToStringTemplate\n                argsTemplate: *Decimal128ToStringArgsTemplate\n\n\n    SUBTYPE_DEFAULT:\n        id: "SUBTYPE_DEFAULT"\n        callable: *var\n        args: null\n        code: 113\n        type: *IntegerType\n        template: *BinarySymbolSubtypeDefaultTemplate\n    SUBTYPE_FUNCTION:\n        id: "SUBTYPE_FUNCTION"\n        callable: *var\n        args: null\n        code: 113\n        type: *IntegerType\n        template: *BinarySymbolSubtypeFunctionTemplate\n    SUBTYPE_BYTE_ARRAY:\n        id: "SUBTYPE_BYTE_ARRAY"\n        callable: *var\n        args: null\n        code: 113\n        type: *IntegerType\n        template: *BinarySymbolSubtypeByteArrayTemplate\n    SUBTYPE_UUID_OLD:\n        id: "SUBTYPE_UUID_OLD"\n        callable: *var\n        args: null\n        code: 113\n        type: *IntegerType\n        template: *BinarySymbolSubtypeUuidOldTemplate\n    SUBTYPE_UUID:\n        id: "SUBTYPE_UUID"\n        callable: *var\n        args: null\n        code: 113\n        type: *IntegerType\n        template: *BinarySymbolSubtypeUuidTemplate\n    SUBTYPE_MD5:\n        id: "SUBTYPE_MD5"\n        callable: *var\n        args: null\n        code: 113\n        type: *IntegerType\n        template: *BinarySymbolSubtypeMd5Template\n    SUBTYPE_USER_DEFINED:\n        id: "SUBTYPE_USER_DEFINED"\n        callable: *var\n        args: null\n        code: 113\n        type: *IntegerType\n        template: *BinarySymbolSubtypeUserDefinedTemplate\n    BSONRegExpType: &BSONRegExpType\n        <<: *__type\n        id: "BSONRegExp"\n        code: 109\n        type: *ObjectType\nNativeTypes:\n    Date: &DateType\n        <<: *__type\n        id: "Date"\n        code: 200\n        type: *ObjectType\n        attr: {} # TODO: no built-in date methods added yet\n    RegExp: &RegExpType\n        <<: *__type\n        id: "RegExp"\n        code: 8\n        type: *ObjectType\n        attr: {}\n\n\nBsonSymbols:\n    Code: &CodeSymbol\n        id: "Code"\n        code: 100\n        callable: *constructor\n        args:\n            - [ *StringType, null ]\n            - [ *ObjectType, null ]\n        type: *CodeType\n        attr: {}\n        template: *CodeSymbolTemplate\n        argsTemplate: *CodeSymbolArgsTemplate\n    ObjectId: &ObjectIdSymbol\n        id: "ObjectId"\n        code: 101\n        callable: *constructor\n        args:\n            - [ *StringType, *NumericType, null ]\n        type: *ObjectIdType\n        attr:\n            createFromHexString:\n                <<: *__func\n                id: "createFromHexString"\n                args:\n                    - [ *StringType ]\n                type: *ObjectIdType\n                template: *ObjectIdCreateFromHexStringTemplate\n                argsTemplate: *ObjectIdCreateFromHexStringArgsTemplate\n            createFromTime:\n                <<: *__func\n                id: "ObjectIdCreateFromTime"\n                args:\n                    - [ *NumericType, *DateType ]\n                type: *ObjectIdType\n                template: *ObjectIdCreateFromTimeTemplate\n                argsTemplate: *ObjectIdCreateFromTimeArgsTemplate\n            isValid:\n                <<: *__func\n                id: "isValid"\n                args:\n                    - [ *StringType ]\n                type: *BoolType\n                template: *ObjectIdIsValidTemplate\n                argsTemplate: *ObjectIdIsValidArgsTemplate\n        template: *ObjectIdSymbolTemplate\n        argsTemplate: *ObjectIdSymbolArgsTemplate\n    BinData: &BinarySymbol\n        id: "BinData"\n        code: 102\n        callable: *constructor\n        args:\n            - [ *IntegerType ]\n            - [ *StringType ]\n        type: *BinaryType\n        attr: {}\n        template: *BinarySymbolTemplate\n        argsTemplate: *BinarySymbolArgsTemplate\n    DBRef:\n        id: "DBRef"\n        code: 103\n        callable: *constructor\n        args:\n            - [ *StringType ]\n            - [ *ObjectIdType ]\n            - [ *StringType, null ]\n        type: *DBRefType\n        attr: {}\n        template: *DBRefSymbolTemplate\n        argsTemplate: *DBRefSymbolArgsTemplate\n    NumberInt:\n        id: "Int32"\n        code: 105\n        callable: *constructor\n        args:\n            - [ *NumericType, *StringType, null ]\n        type: *Int32Type\n        attr: {}\n        template: *Int32SymbolTemplate\n        argsTemplate: *Int32SymbolArgsTemplate\n    NumberLong:\n        id: "NumberLong"\n        code: 106\n        callable: *constructor\n        args:\n            - [ *IntegerType, *StringType, null ]\n        type: *LongType\n        attr: {}\n        template: *LongSymbolTemplate\n        argsTemplate: *LongSymbolArgsTemplate\n    MinKey:\n        id: "MinKey"\n        code: 107\n        callable: *constructor\n        args: []\n        type: *MinKeyType\n        attr: {}\n        template: *MinKeySymbolTemplate\n        argsTemplate: *MinKeySymbolArgsTemplate\n    MaxKey:\n        id: "MaxKey"\n        code: 108\n        callable: *constructor\n        args: []\n        type: *MaxKeyType\n        attr: {}\n        template: *MaxKeySymbolTemplate\n        argsTemplate: *MaxKeySymbolArgsTemplate\n    Timestamp:\n        id: "Timestamp"\n        code: 110\n        callable: *constructor\n        args:\n            - [ *IntegerType, null ]\n            - [ *IntegerType, null ]\n        type: *TimestampType\n        attr: {}\n        template: *TimestampSymbolTemplate\n        argsTemplate: *TimestampSymbolArgsTemplate\n    Symbol:\n        id: "Symbol"\n        code: 111\n        callable: *constructor\n        args:\n            - [ *StringType ]\n        type: *SymbolType\n        attr: {}\n        template: *SymbolSymbolTemplate\n        argsTemplate: *SymbolSymbolArgsTemplate\n    NumberDecimal:\n        id: "NumberDecimal"\n        code: 112\n        callable: *constructor\n        args:\n            - [ *StringType, *NumericType, null ]\n        type: *Decimal128Type\n        attr: {}\n        template: *Decimal128SymbolTemplate\n        argsTemplate: *Decimal128SymbolArgsTemplate\n    BSONRegExp:\n        id: "BSONRegExp"\n        code: 109\n        callable: *constructor\n        args:\n            - [ *StringType ]\n            - [ *StringType, null ]\n        type: *BSONRegExpType\n        attr: {}\n        template: *BSONRegExpSymbolTemplate\n        argsTemplate: *BSONRegExpSymbolArgsTemplate\n    BSONSymbol:\n        id: "BSONSymbol"\n        code: 111\n        callable: *constructor\n        args:\n            - [ *StringType ]\n        type: *SymbolType\n        attr: {}\n        template: *SymbolSymbolTemplate\n        argsTemplate: *SymbolSymbolArgsTemplate\n    Decimal128:\n        id: "Decimal128"\n        code: 112\n        callable: *constructor\n        args:\n            - [ *ObjectType ]\n        type: *Decimal128Type\n        attr:\n            fromString:\n                id: "fromString"\n                callable: *func\n                args:\n                    - [ *StringType ]\n                type: *Decimal128Type\n                attr: {}\n                template: *Decimal128SymbolFromStringTemplate\n                argsTemplate: *Decimal128SymbolFromStringArgsTemplate\n        template: *Decimal128SymbolTemplate\n        argsTemplate: *Decimal128SymbolArgsTemplate\n    Double:\n        id: "Double"\n        code: 104\n        callable: *constructor\n        args:\n            - [ *NumericType, *StringType ]\n        type: *DoubleType\n        attr: {}\n        template: *DoubleSymbolTemplate\n        argsTemplate: *DoubleSymbolArgsTemplate\n    Int32:\n        id: "Int32"\n        code: 105\n        callable: *constructor\n        args:\n            - [ *NumericType, *StringType ]\n        type: *Int32Type\n        attr: {}\n        template: *Int32SymbolTemplate\n        argsTemplate: *Int32SymbolArgsTemplate\n    Long:\n        id: "Long"\n        code: 106\n        callable: *constructor\n        args:\n            - [ *IntegerType ]\n            - [ *IntegerType ]\n        type: *LongType\n        attr:\n            MAX_VALUE:\n                id: "MAX_VALUE"\n                callable: *var\n                args: null\n                type: *LongType\n                attr: {}\n                template: *LongSymbolMaxTemplate\n                argsTemplate: *LongSymbolMaxArgsTemplate\n            MIN_VALUE:\n                id: "MIN_VALUE"\n                callable: *var\n                args: null\n                type: *LongType\n                attr: {}\n                template: *LongSymbolMinTemplate\n                argsTemplate: *LongSymbolMinArgsTemplate\n            ZERO:\n                id: "ZERO"\n                callable: *var\n                args: null\n                type: *LongType\n                attr: {}\n                template: *LongSymbolZeroTemplate\n                argsTemplate: *LongSymbolZeroArgsTemplate\n            ONE:\n                id: "ONE"\n                callable: *var\n                args: null\n                type: *LongType\n                attr: {}\n                template: *LongSymbolOneTemplate\n                argsTemplate: *LongSymbolOneArgsTemplate\n            NEG_ONE:\n                id: "NEG_ONE"\n                callable: *var\n                args: null\n                type: *LongType\n                attr: {}\n                template: *LongSymbolNegOneTemplate\n                argsTemplate: *LongSymbolNegOneArgsTemplate\n            fromBits:\n                id: "LongfromBits" # Needs process method\n                callable: *func\n                args:\n                    - [ *IntegerType ]\n                    - [ *IntegerType ]\n                type: *LongType\n                attr: {}\n                template: *LongSymbolFromBitsTemplate\n                argsTemplate: *LongSymbolFromBitsArgsTemplate\n            fromInt:\n                id: "fromInt"\n                callable: *func\n                args:\n                    - [ *IntegerType ]\n                type: *LongType\n                attr: {}\n                template: *LongSymbolFromIntTemplate\n                argsTemplate: *LongSymbolFromIntArgsTemplate\n            fromNumber:\n                id: "fromNumber"\n                callable: *func\n                args:\n                    - [ *NumericType ]\n                type: *LongType\n                attr: {}\n                template: *LongSymbolFromNumberTemplate\n                argsTemplate: *LongSymbolFromNumberArgsTemplate\n            fromString:\n                id: "fromString"\n                callable: *func\n                args:\n                    - [ *StringType ]\n                    - [ *IntegerType, null ]\n                type: *LongType\n                attr: {}\n                template: *LongSymbolFromStringTemplate\n                argsTemplate: *LongSymbolFromStringArgsTemplate\n        template: *LongSymbolTemplate\n        argsTemplate: *LongSymbolArgsTemplate\n\nNativeSymbols:\n    Number:\n        id: "Number"\n        code: 2\n        callable: *constructor\n        args:\n            - [ *IntegerType, *StringType, null ]\n        type: *NumericType\n        attr: {} # TODO: no built-in number funcs added yet\n        template: *NumberSymbolTemplate\n        argsTemplate: *NumberSymbolArgsTemplate\n    Date: # Needs emit method\n        id: "Date"\n        code: 200\n        callable: *constructor\n        args:\n            - [ *StringType, *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n        type: *DateType\n        attr: # TODO: add more date funcs?\n            now:\n                id: "now"\n                code: 200.1\n                callable: *func\n                args: []\n                type: *DateType\n                attr: {}\n                template: *DateSymbolNowTemplate\n                argsTemplate: *DateSymbolNowArgsTemplate\n        template: *DateSymbolTemplate\n        argsTemplate: *DateSymbolArgsTemplate\n    ISODate: # Needs emit method\n        id: "ISODate"\n        code: 200\n        callable: *constructor\n        args:\n            - [ *StringType, null ]\n        type: *DateType\n        attr:\n            now:\n                id: "now"\n                callable: *constructor\n                args: []\n                type: *DateType\n                attr: {}\n                template: *DateSymbolNowTemplate\n                argsTemplate: *DateSymbolNowArgsTemplate\n        template: *DateSymbolTemplate\n        argsTemplate: *DateSymbolArgsTemplate\n    RegExp: # Needs process method\n        id: "RegExp"\n        code: 8\n        callable: *constructor\n        args:\n            - [ *StringType, *RegexType ]\n            - [ *StringType, null ]\n        type: *RegExpType\n        attr: {} # TODO: no built-in regex funcs added yet\n        template: *RegExpSymbolTemplate\n        argsTemplate: *RegExpSymbolArgsTemplate\n\n';
