module.exports="SymbolTypes:\n    VAR: &var 0\n    CONSTRUCTOR: &constructor 1\n    FUNC: &func 2\n# Internal patterns to save typing\n__type: &__type\n    id: null\n    callable: *var\n    args: null\n    type: null\n    attr: {}\n    template: null\n    argsTemplate: null\n__func: &__func\n    callable: *func\n    args: []\n    attr: {}\n    template: null\n    argsTemplate: null\n\n#############################################\n#             Sample Templates              #\n#                                           #\n# The expected arguments are commented next #\n# to the template itself. Currently all are #\n# set to null, but to define a function     #\n# replace 'null' with '!!js/function > \\n   #\n# and a function defined below.             #\n#                                           #\n# See the other template files for examples #\n#                                           #\n#               Good to know:               #\n# lhs is left-hand-side of the expression   #\n# rhs is right-hand-side of the expression  #\n# All args are strings unless noted         #\n#    - arg? is boolean                      #\n#    - arg# is number                       #\n#                                           #\n#############################################\nTemplates:\n    ########\n    # Misc #\n    ########\n\n    # Filter out regex flags that have translations or are unsupported.\n    RegexFlags: &RegexFlags\n        i: 'i'\n        m: 'm'\n        u: 'u'\n        y: 'y'\n        g: 'g'\n    BSONRegexFlags: &BSONRegexFlags\n        i: 'i'\n        m: 'm'\n        x: 'x'\n        s: 's'\n        l: 'l'\n        u: 'u'\n\n    #############################################\n    #                  Syntax                   #\n    #                                           #\n    # Templates for language syntax expressions #\n    #                                           #\n    #############################################\n\n    DriverTemplate: &DriverTemplate !!js/function >\n      (spec) => {\n        console.log(\"SPEC: \" + JSON.stringify(spec));\n\n        const comment = '// Requires the MongoSwift package\\n// https://github.com/mongodb/mongo-swift-driver';\n\n        const options = spec.options;\n        const filter = spec.filter || '[:]';\n        delete spec.options;\n        delete spec.filter;\n\n        const connect = [\n          'let elg = MultiThreadedEventLoopGroup(numberOfThreads: 4)',\n          `let client = try MongoClient(`,\n          `    \"${options.uri}\",`,\n          \"    using: elg\",\n          \")\",\n          'defer {',\n          '    try? client.syncClose()',\n          '    cleanupMongoSwift()',\n          '    try? elg.syncShutdownGracefully()',\n          '}',\n        ].join('\\n');\n\n        const coll = `let coll = client.db(\"${options.database}\").collection(\"${options.collection}\")`;\n\n        if ('aggregation' in spec) {\n          let agg = spec.aggregation;\n          if (agg.charAt(0) != '[') {\n            agg = `[${agg}]`;\n          }\n\n          return [\n            `${comment}\\n`,\n            connect,\n            coll,\n            `let cursor = try await coll.aggregate(${agg})`\n          ].join('\\n')\n        }\n\n        const findOpts = [];\n        for (let optName in spec) {\n          let optValue = spec[optName];\n          switch(optName) {\n          case 'project':\n            optName = 'projection';\n            break;\n          }\n          findOpts.push([optName, optValue])\n        }\n\n        findOpts.sort()\n\n        const optsDecl = 'let options = FindOptions(';\n        let optPairs = [];\n        let optPairsDecls = [];\n        \n        for (const kvp of findOpts) {\n          if (kvp[1].indexOf(\"\\n\") != -1) {\n              optPairsDecls.push(`let ${kvp[0]} = ${kvp[1]}`);\n              optPairs.push(`    ${kvp[0]}: ${kvp[0]}`)\n          } else {\n              optPairs.push(`    ${kvp[0]}: ${kvp[1]}`)\n          }\n        }\n\n        let optionsLet = '';\n        let cursorLet = 'let cursor = try await coll.find(filter)';\n\n        if (optPairs.length > 0) {\n          optionsLet = [\n            optPairsDecls.join('\\n'),\n            optsDecl,\n            optPairs.join(',\\n'),\n            ')'\n          ].join('\\n');\n          cursorLet = 'let cursor = try await coll.find(filter, options: options)';\n        }\n\n        return [\n          comment,\n          '',\n          connect,\n          '',\n          coll,\n          optionsLet,\n          `let filter = ${filter}`,\n          cursorLet\n        ].join('\\n');\n      }\n\n    EqualitySyntaxTemplate: &EqualitySyntaxTemplate !!js/function >\n        (lhs, op, rhs) => {\n            if (op.includes('!') || op.includes('not')) {\n                return `${lhs} != ${rhs}`;\n            }\n            else if (op === '==' || op === '===' || op === 'is') {\n                return `${lhs} == ${rhs}`;\n            }\n            return `${lhs} ${op} ${rhs}`;\n        }\n    InSyntaxTemplate: &InSyntaxTemplate !!js/function >\n        (lhs, op, rhs) => {\n            let prefix = '';\n            if (op.includes('!') || op.includes('not')) {\n                prefix = '!';\n            }\n            return `${prefix}${rhs}.contains(&${lhs})`\n        }\n    AndSyntaxTemplate: &AndSyntaxTemplate !!js/function >\n        (args) => {\n            return args.join(' && ');\n        }\n    OrSyntaxTemplate: &OrSyntaxTemplate !!js/function >\n        (args) => {\n            return args.join(' || ');\n        }\n    NotSyntaxTemplate: &NotSyntaxTemplate !!js/function >\n        (arg) => {\n            return `!${arg}`;\n        }\n    UnarySyntaxTemplate: &UnarySyntaxTemplate !!js/function >\n        (op, val) => {\n            return `${op}${val}`;\n        }\n    BinarySyntaxTemplate: &BinarySyntaxTemplate !!js/function >\n        (args) => {\n            return args.reduce((s, op, i, arr) => {\n                if (i % 2 === 0) {\n                    return s;\n                }\n                const rhs = arr[i + 1];\n                switch(op) {\n                    case '//':\n                        return `${s} / ${rhs}`\n                    case '**':\n                        return `pow(${s}, ${rhs})`\n                    default:\n                        return `${s} ${op} ${rhs}`;\n                }\n            }, args[0]);\n        }\n    ParensSyntaxTemplate: &ParensSyntaxTemplate null\n    EosTemplate: &EosSyntaxTemplate null # No args. End-of-line\n    EofTemplate: &EofSyntaxTemplate null # No args. End-of-file\n    FloorDivTemplate: &FloorDivSyntaxTemplate null # Args: lhs, rhs\n    PowerTemplate: &PowerSyntaxTemplate null # Args: lhs, rhs\n    NewTemplate: &NewSyntaxTemplate null # Args: expression, skip?, code# [to check if meant to be skipped]\n\n    #############################################\n    #               Literal Types               #\n    #                                           #\n    # Templates for literal type instance. Most #\n    # get passed the literal itself as an arg.  #\n    #                                           #\n    #############################################\n    StringTypeTemplate: &StringTypeTemplate !!js/function >\n        (str) => {\n            let newStr = str;\n            if (str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'') {\n                newStr = '\"' + str.substr(1, str.length - 2) + '\"';\n            }\n            return newStr;\n        }\n    RegexTypeTemplate: &RegexTypeTemplate !!js/function >\n        (pattern, flags) => {\n            // Double-quote stringify\n            let newPat = pattern;\n            if (\n                (pattern.charAt(0) === '\\'' && pattern.charAt(pattern.length - 1) === '\\'') ||\n                (pattern.charAt(0) === '\"' && pattern.charAt(pattern.length - 1) === '\"')) {\n                    newPat = pattern.substr(1, pattern.length - 2);\n            }\n            return `BSONRegularExpression(pattern: \"${newPat.replace(/\\\\([\\s\\S])|(\")/g, '\\\\$1$2')}\", options: \"${flags}\")`\n        }\n    BoolTypeTemplate: &BoolTypeTemplate !!js/function >\n        (literal) => {\n            return literal.toLowerCase();\n        }\n    IntegerTypeTemplate: &IntegerTypeTemplate null # args: literal, argType (i.e. '_string', '_decimal' etc)\n    DecimalTypeTemplate: &DecimalTypeTemplate null # args: literal, argType\n    LongBasicTypeTemplate: &LongBasicTypeTemplate null # args: literal, argType\n    HexTypeTemplate: &HexTypeTemplate !!js/function >\n        (literal, type) => {\n            if (literal.charAt(1) === 'X') {\n                return literal.charAt(0) + 'x' + literal.substring(2);\n            }\n            return literal;\n        }\n    OctalTypeTemplate: &OctalTypeTemplate !!js/function >\n        (literal, type) => {\n            switch(literal.charAt(1)) {\n                case 'o':\n                    return literal;\n                case 'O':\n                case '0':\n                    return literal.charAt(0) + 'o' + literal.substring(2);\n                default:\n                    return literal.charAt(0) + 'o' + literal.substring(1);\n            }\n        }\n    NumericTypeTemplate: &NumericTypeTemplate null # args: literal, argType\n    ArrayTypeTemplate: &ArrayTypeTemplate !!js/function >\n        (literal, depth) => {\n            if (literal === '') {\n                return '[]'\n            }\n            return `[${literal}]`;\n        }\n    ArrayTypeArgsTemplate: &ArrayTypeArgsTemplate !!js/function >\n        (element, depth, isLast) => {\n            depth++;\n            const indent = '\\n' + '    '.repeat(depth);\n            const closingIndent = isLast ? '\\n' + '    '.repeat(depth - 1) : ',';\n            return `${indent}${element}${closingIndent}`;\n        }  \n    NullTypeTemplate: &NullTypeTemplate !!js/function >\n        () => 'BSON.null'\n    UndefinedTypeTemplate: &UndefinedTypeTemplate !!js/function >\n        () => 'BSON.null'\n    ObjectTypeTemplate: &ObjectTypeTemplate !!js/function >\n        (literal) => {\n            if (literal === '') {\n                return '[:]';\n            }\n            return `[${literal}]`;\n        }\n    ObjectTypeArgsTemplate: &ObjectTypeArgsTemplate !!js/function >\n        (args, depth) => {\n            if (args.length === 0) {\n                return '';\n            }\n\n            depth++;\n            const indent = '\\n' + '    '.repeat(depth);\n            const closingIndent = '\\n' + '    '.repeat(depth - 1);\n\n            const doubleStringify = (str) => {\n                let newStr = str;\n                if (\n                  (str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'') ||\n                  (str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"')) {\n                    newStr = str.substr(1, str.length - 2);\n                }\n                return `\"${newStr.replace(/\\\\([\\s\\S])|(\")/g, '\\\\$1$2')}\"`;\n            }\n\n            const pairs = args.map((pair) => {\n                return `${indent}${doubleStringify(pair[0])}: ${pair[1]}`;\n            }).join(',');\n\n            return `${pairs}${closingIndent}`;\n        }\n\n    #############################################\n    #               Symbols                     #\n    #                                           #\n    # Templates for symbols, can be either      #\n    # functions or variables.                   #\n    #                                           #\n    # The *SymbolTemplates return names and     #\n    # usually don't take any arguments. The     #\n    # *SymbolArgsTemplates are invoked for func #\n    # calls. The first argument is always the   #\n    # lhs, i.e. the symbol returned from the    #\n    # corresponding SymbolTemplate. The rest of #\n    # the arguments are the processed arguments #\n    # passed to the original function.          #\n    #                                           #\n    #############################################\n    CodeSymbolTemplate: &CodeSymbolTemplate !!js/function >\n        () => ''\n    CodeSymbolArgsTemplate: &CodeSymbolArgsTemplate !!js/function >\n        (lhs, code, scope) => {\n            // Double quote stringify\n            let newStr = code === undefined ? '' : code;\n            const str = newStr;\n            if (\n                (str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'') ||\n                (str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"')) {\n                newStr = str.substr(1, str.length - 2);\n            }\n            code = `\"${newStr.replace(/\\\\([\\s\\S])|(\")/g, '\\\\$1$2')}\"`;\n            if (scope === undefined) {\n                return `BSONCode(code: ${code})`;\n            } else {\n                return `BSONCodeWithScope(code: ${code}, scope: ${scope})`;\n            }\n        }\n    ObjectIdSymbolTemplate: &ObjectIdSymbolTemplate !!js/function >\n        () => ''\n    ObjectIdSymbolArgsTemplate: &ObjectIdSymbolArgsTemplate !!js/function >\n        (lhs, arg) => {\n            if (arg === undefined || arg === '') {\n                return 'BSON.objectID()';\n            }\n            // Double quote stringify\n            let newArg = arg;\n            if (\n                (arg.charAt(0) === '\\'' && arg.charAt(arg.length - 1) === '\\'') ||\n                (arg.charAt(0) === '\"' && arg.charAt(arg.length - 1) === '\"')) {\n                newArg = arg.substr(1, arg.length - 2);\n            }\n            newArg = `\"${newArg.replace(/\\\\([\\s\\S])|(\")/g, '\\\\$1$2')}\"`;\n            return `try BSON.objectID(BSONObjectId(${newArg}))`;\n        }\n    BinarySymbolTemplate: &BinarySymbolTemplate !!js/function >\n        () => 'BSONBinary'\n    BinarySymbolArgsTemplate: &BinarySymbolArgsTemplate !!js/function >\n        (_, bytes, type) => {\n            // Double quote stringify\n            let newBytes = bytes;\n            if (\n                (bytes.charAt(0) === '\\'' && bytes.charAt(bytes.length - 1) === '\\'') ||\n                (bytes.charAt(0) === '\"' && bytes.charAt(bytes.length - 1) === '\"')) {\n                newBytes = bytes.substr(1, bytes.length - 2);\n            }\n            newBytes = `\"${newBytes.replace(/\\\\([\\s\\S])|(\")/g, '\\\\$1$2')}\"`;\n            if (type === null) {\n                type = '.generic';\n            }\n            return `(bytes: ${bytes}, subtype: ${type})`\n        }\n    BinarySymbolSubtypeDefaultTemplate: &BinarySymbolSubtypeDefaultTemplate !!js/function >\n        () => 'BSONBinary.Subtype.generic'\n    BinarySymbolSubtypeFunctionTemplate: &BinarySymbolSubtypeFunctionTemplate !!js/function >\n        () => 'BSONBinary.Subtype.function'\n    BinarySymbolSubtypeByteArrayTemplate: &BinarySymbolSubtypeByteArrayTemplate !!js/function >\n        () => 'BSONBinary.Subtype.binaryOld'\n    BinarySymbolSubtypeUuidOldTemplate: &BinarySymbolSubtypeUuidOldTemplate !!js/function >\n        () => 'BSONBinary.Subtype.uuidOld'\n    BinarySymbolSubtypeUuidTemplate: &BinarySymbolSubtypeUuidTemplate !!js/function >\n        () => 'BSONBinary.Subtype.uuid'\n    BinarySymbolSubtypeMd5Template: &BinarySymbolSubtypeMd5Template !!js/function >\n        () => 'BSONBinary.Subtype.md5'\n    BinarySymbolSubtypeUserDefinedTemplate: &BinarySymbolSubtypeUserDefinedTemplate !!js/function >\n        (arg) => `BSONBinary.Subtype.UserDefined(${arg})`\n    DBRefSymbolTemplate: &DBRefSymbolTemplate null # No args\n    DBRefSymbolArgsTemplate: &DBRefSymbolArgsTemplate null # Args: lhs, coll, id, db\n    DoubleSymbolTemplate: &DoubleSymbolTemplate !!js/function >\n        () => 'Double'\n    DoubleSymbolArgsTemplate: &DoubleSymbolArgsTemplate !!js/function >\n        (lhs, arg, type) => {\n            arg = arg === undefined ? \"(0.0)\" : arg;\n            return arg;\n        }\n    Int32SymbolTemplate: &Int32SymbolTemplate !!js/function >\n        () => 'Int32'\n    Int32SymbolArgsTemplate: &Int32SymbolArgsTemplate !!js/function >\n        (lhs, arg, type) => {\n            if (!arg) {\n                return '()';\n            }\n            let suffix = '';\n            if (type === '_string') {\n                suffix = '!';\n            }\n            return `(${arg})${suffix}`;\n        }\n    LongSymbolTemplate: &LongSymbolTemplate !!js/function >\n        () => 'BSON.int64'\n    LongSymbolArgsTemplate: &LongSymbolArgsTemplate !!js/function >\n        (lhs, arg, type) => {\n            if (!arg) {\n                return '()';\n            }\n            let suffix = '';\n            let prefix = '';\n            if (type === '_string') {\n                prefix = 'Int64(';\n                suffix = ')!';\n            }\n            return `(${prefix}${arg}${suffix})`;\n        }\n    RegExpSymbolTemplate: &RegExpSymbolTemplate null\n    RegExpSymbolArgsTemplate: &RegExpSymbolArgsTemplate null\n    SymbolSymbolTemplate: &SymbolSymbolTemplate null\n    SymbolSymbolArgsTemplate: &SymbolSymbolArgsTemplate null\n    BSONRegExpSymbolTemplate: &BSONRegExpSymbolTemplate !!js/function >\n        () => 'BSONRegularExpression'\n    BSONRegExpSymbolArgsTemplate: &BSONRegExpSymbolArgsTemplate !!js/function >\n        (_, pattern, flags) => {\n            if (flags === null || flags === undefined) {\n                flags = '';\n            }\n            if (\n                (flags.charAt(0) === '\\'' && flags.charAt(flags.length - 1) === '\\'') ||\n                (flags.charAt(0) === '\"' && flags.charAt(flags.length - 1) === '\"')) {\n                    flags = flags.substr(1, flags.length - 2);\n            }\n            // Double-quote stringify\n            let newPat = pattern;\n            if (\n                (pattern.charAt(0) === '\\'' && pattern.charAt(pattern.length - 1) === '\\'') ||\n                (pattern.charAt(0) === '\"' && pattern.charAt(pattern.length - 1) === '\"')) {\n                    newPat = pattern.substr(1, pattern.length - 2);\n            }\n            return `(pattern: \"${newPat.replace(/\\\\([\\s\\S])|(\")/g, '\\\\$1$2')}\", options: \"${flags}\")`;\n        }\n    Decimal128SymbolTemplate: &Decimal128SymbolTemplate !!js/function >\n        () => ''\n    Decimal128SymbolArgsTemplate: &Decimal128SymbolArgsTemplate !!js/function >\n        (lhs, arg) => {\n            if (!arg) {\n                return `try BSONDecimal128(\"0\")`\n            }\n            return `try BSONDecimal128(\"${arg}\")`\n        }\n    MinKeySymbolTemplate: &MinKeySymbolTemplate !!js/function >\n        () => 'BSONMinKey'\n    MinKeySymbolArgsTemplate: &MinKeySymbolArgsTemplate !!js/function >\n        () => '()'\n    MaxKeySymbolTemplate: &MaxKeySymbolTemplate !!js/function >\n        () => 'BSONMaxKey'\n    MaxKeySymbolArgsTemplate: &MaxKeySymbolArgsTemplate !!js/function >\n        () => '()'\n    TimestampSymbolTemplate: &TimestampSymbolTemplate !!js/function >\n        () => 'BSONTimestamp'\n    TimestampSymbolArgsTemplate: &TimestampSymbolArgsTemplate !!js/function >\n        (lhs, low, high) => {\n            if (low === undefined) {\n                low = 0;\n                high = 0;\n            }\n            return `(timestamp: ${low}, inc: ${high})`\n        }\n    # non bson-specific\n    NumberSymbolTemplate: &NumberSymbolTemplate !!js/function >\n        () => ''\n    NumberSymbolArgsTemplate: &NumberSymbolArgsTemplate !!js/function >\n        (lhs, arg, type) => {\n            arg = arg === undefined ? \"0.0\" : arg;\n\n            switch(type) {\n                case '_string':\n                  return `Double(${arg})!`;\n                case '_integer':\n                case '_long':\n                  return `${arg}.0`;\n                default:\n                    return arg;\n            }\n        }\n    DateSymbolTemplate: &DateSymbolTemplate !!js/function >\n        () => 'Date'\n    DateSymbolArgsTemplate: &DateSymbolArgsTemplate !!js/function >\n        (lhs, date, isString) => {\n          let d = \"Date()\";\n          if (date) {\n            dParts = [\n                \"    calendar: Calendar(identifier: .gregorian)\",\n                '    timeZone: TimeZone(identifier: \"UTC\")!',\n                `    year: ${date.getUTCFullYear()}`,\n                `    month: ${date.getUTCMonth() + 1}`,\n                `    day: ${date.getUTCDate()}`,\n                `    hour: ${date.getUTCHours()}`,\n                `    minute: ${date.getUTCMinutes()}`,\n                `    second: ${date.getUTCSeconds()}`\n            ].join(',\\n')\n            d = `DateComponents(\\n${dParts}\\n).date!`\n          }\n          if (isString) {\n            d = `String(describing: ${d})`\n          }\n          return d;\n        }\n\n    #############################################\n    #         Object Attributes/Methods         #\n    #                                           #\n    # These're variables or functions called on #\n    # instantiated objects. For example,        #\n    # ObjectId().isValid() or Timestamp().t     #\n    #                                           #\n    # They follow the same pattern with the\n    # *Template/*ArgsTemplates: usually no args #\n    # to the Template and lhs plus any original #\n    # arguments to the ArgsTemplate.            #\n    #                                           #\n    #############################################\n    CodeCodeTemplate: &CodeCodeTemplate !!js/function >\n        (lhs) => `${lhs}.code`\n    CodeCodeArgsTemplate: &CodeCodeArgsTemplate null\n    CodeScopeTemplate: &CodeScopeTemplate !!js/function >\n        (lhs) => `${lhs}.scope`\n    CodeScopeArgsTemplate: &CodeScopeArgsTemplate null\n    ObjectIdToStringTemplate: &ObjectIdToStringTemplate !!js/function >\n        (lhs) => `${lhs}.hex`\n    ObjectIdToStringArgsTemplate: &ObjectIdToStringArgsTemplate null\n    ObjectIdEqualsTemplate: &ObjectIdEqualsTemplate !!js/function >\n        (lhs) => `${lhs} == `\n    ObjectIdEqualsArgsTemplate: &ObjectIdEqualsArgsTemplate null\n    ObjectIdGetTimestampTemplate: &ObjectIdGetTimestampTemplate !!js/function >\n        (lhs) => `${lhs}.timestamp`\n    ObjectIdGetTimestampArgsTemplate: &ObjectIdGetTimestampArgsTemplate null\n    ObjectIdIsValidTemplate: &ObjectIdIsValidTemplate null\n    ObjectIdIsValidArgsTemplate: &ObjectIdIsValidArgsTemplate null\n    BinaryValueTemplate: &BinaryValueTemplate !!js/function >\n        (lhs) => `${lhs}.data`\n    BinaryValueArgsTemplate: &BinaryValueArgsTemplate null\n    BinaryLengthTemplate: &BinaryLengthTemplate !!js/function >\n        (lhs) => `${lhs}.data.readableBytes`\n    BinaryLengthArgsTemplate: &BinaryLengthArgsTemplate null\n    BinaryToStringTemplate: &BinaryToStringTemplate null\n    BinaryToStringArgsTemplate: &BinaryToStringArgsTemplate null\n    BinarySubtypeTemplate: &BinarySubtypeTemplate !!js/function >\n        (lhs) => `${lhs}.subtype`\n    BinarySubtypeArgsTemplate: &BinarySubtypeArgsTemplate null\n    DBRefGetDBTemplate: &DBRefGetDBTemplate null\n    DBRefGetCollectionTemplate: &DBRefGetCollectionTemplate null\n    DBRefGetIdTemplate: &DBRefGetIdTemplate null\n    DBRefGetDBArgsTemplate: &DBRefGetDBArgsTemplate null\n    DBRefGetCollectionArgsTemplate: &DBRefGetCollectionArgsTemplate null\n    DBRefGetIdArgsTemplate: &DBRefGetIdArgsTemplate null\n    DBRefToStringTemplate: &DBRefToStringTemplate null\n    DBRefToStringArgsTemplate: &DBRefToStringArgsTemplate null\n    DoubleValueOfTemplate: &DoubleValueOfTemplate null\n    DoubleValueOfArgsTemplate: &DoubleValueOfArgsTemplate null\n    Int32ValueOfTemplate: &Int32ValueOfTemplate null\n    Int32ValueOfArgsTemplate: &Int32ValueOfArgsTemplate null\n    Int32ToStringTemplate: &Int32ToStringTemplate null\n    Int32ToStringArgsTemplate: &Int32ToStringArgsTemplate null\n    LongEqualsTemplate: &LongEqualsTemplate !!js/function >\n        (lhs) => `${lhs} == `\n    LongEqualsArgsTemplate: &LongEqualsArgsTemplate null\n    LongToStringTemplate: &LongToStringTemplate null\n    LongToStringArgsTemplate: &LongToStringArgsTemplate null\n    LongToIntTemplate: &LongToIntTemplate !!js/function >\n        (lhs) => `${lhs} as Int32`\n    LongToIntArgsTemplate: &LongToIntArgsTemplate null\n    LongValueOfTemplate: &LongValueOfTemplate null\n    LongValueOfArgsTemplate: &LongValueOfArgsTemplate null\n    LongToNumberTemplate: &LongToNumberTemplate !!js/function >\n        (lhs) => `${lhs} as Double`\n    LongToNumberArgsTemplate: &LongToNumberArgsTemplate null\n    LongAddTemplate: &LongAddTemplate !!js/function >\n        (lhs) => `${lhs} + `\n    LongAddArgsTemplate: &LongAddArgsTemplate null\n    LongSubtractTemplate: &LongSubtractTemplate !!js/function >\n        (lhs) => `${lhs} - `\n    LongSubtractArgsTemplate: &LongSubtractArgsTemplate null\n    LongMultiplyTemplate: &LongMultiplyTemplate !!js/function >\n        (lhs) => `${lhs} * `\n    LongMultiplyArgsTemplate: &LongMultiplyArgsTemplate null\n    LongDivTemplate: &LongDivTemplate !!js/function >\n        (lhs) => `${lhs} / `\n    LongDivArgsTemplate: &LongDivArgsTemplate null\n    LongModuloTemplate: &LongModuloTemplate !!js/function >\n        (lhs) => `${lhs} % `\n    LongModuloArgsTemplate: &LongModuloArgsTemplate null\n    LongAndTemplate: &LongAndTemplate !!js/function >\n        (lhs) => `${lhs} & `\n    LongAndArgsTemplate: &LongAndArgsTemplate null\n    LongOrTemplate: &LongOrTemplate !!js/function >\n        (lhs) => `${lhs} | `\n    LongOrArgsTemplate: &LongOrArgsTemplate null\n    LongXorTemplate: &LongXorTemplate !!js/function >\n        (lhs) => `${lhs} ^ `\n    LongXorArgsTemplate: &LongXorArgsTemplate null\n    LongShiftLeftTemplate: &LongShiftLeftTemplate !!js/function >\n        (lhs) => `${lhs} << `\n    LongShiftLeftArgsTemplate: &LongShiftLeftArgsTemplate !!js/function >\n        (_, rhs) => rhs\n    LongShiftRightTemplate: &LongShiftRightTemplate !!js/function >\n        (lhs) => `${lhs} >> `\n    LongShiftRightArgsTemplate: &LongShiftRightArgsTemplate !!js/function >\n        (_, rhs) => rhs\n    LongCompareTemplate: &LongCompareTemplate !!js/function >\n        (lhs) => `${lhs} - `\n    LongCompareArgsTemplate: &LongCompareArgsTemplate !!js/function >\n        (_, rhs) => rhs\n    LongIsOddTemplate: &LongIsOddTemplate !!js/function >\n        (arg) => `${arg} % 2 == 1`\n    LongIsOddArgsTemplate: &LongIsOddArgsTemplate !!js/function >\n        () => ''\n    LongIsZeroTemplate: &LongIsZeroTemplate !!js/function >\n        (arg) => `${arg} == 0`\n    LongIsZeroArgsTemplate: &LongIsZeroArgsTemplate !!js/function >\n        () => ''\n    LongIsNegativeTemplate: &LongIsNegativeTemplate !!js/function >\n        (arg) => `${arg} < 0`\n    LongIsNegativeArgsTemplate: &LongIsNegativeArgsTemplate !!js/function >\n        () => ''\n    LongNegateTemplate: &LongNegateTemplate !!js/function >\n        () => '-'\n    LongNegateArgsTemplate: &LongNegateArgsTemplate !!js/function >\n        (arg) => arg\n    LongNotTemplate: &LongNotTemplate !!js/function >\n        () => '~'\n    LongNotArgsTemplate: &LongNotArgsTemplate !!js/function >\n        (arg) => arg\n    LongNotEqualsTemplate: &LongNotEqualsTemplate !!js/function >\n        (lhs) => `${lhs} != `\n    LongNotEqualsArgsTemplate: &LongNotEqualsArgsTemplate !!js/function >\n        (_, rhs) => rhs\n    LongGreaterThanTemplate: &LongGreaterThanTemplate !!js/function >\n        (lhs) => `${lhs} > `\n    LongGreaterThanArgsTemplate: &LongGreaterThanArgsTemplate !!js/function >\n        (_, rhs) => rhs\n    LongGreaterThanOrEqualTemplate: &LongGreaterThanOrEqualTemplate !!js/function >\n        (lhs) => `${lhs} >= `\n    LongGreaterThanOrEqualArgsTemplate: &LongGreaterThanOrEqualArgsTemplate !!js/function >\n        (_, rhs) => rhs\n    LongLessThanTemplate: &LongLessThanTemplate !!js/function >\n        (lhs) => `${lhs} < `\n    LongLessThanArgsTemplate: &LongLessThanArgsTemplate !!js/function >\n        (_, rhs) => rhs\n    LongLessThanOrEqualTemplate: &LongLessThanOrEqualTemplate !!js/function >\n        (lhs) => `${lhs} <= `\n    LongLessThanOrEqualArgsTemplate: &LongLessThanOrEqualArgsTemplate !!js/function >\n        (_, rhs) => rhs\n    LongFloatApproxTemplate: &LongFloatApproxTemplate !!js/function >\n        (arg) => `${arg} as f32`\n    LongTopTemplate: &LongTopTemplate !!js/function >\n        (arg) => `${arg} >> 32`\n    LongBottomTemplate: &LongBottomTemplate !!js/function >\n        (arg) => `${arg} & 0x0000ffff`\n    TimestampToStringTemplate: &TimestampToStringTemplate !!js/function >\n        (arg) => `${arg}.to_string()`\n    TimestampToStringArgsTemplate: &TimestampToStringArgsTemplate !!js/function >\n        () => ''\n    TimestampEqualsTemplate: &TimestampEqualsTemplate !!js/function >\n        (lhs) => `${lhs} == `\n    TimestampEqualsArgsTemplate: &TimestampEqualsArgsTemplate !!js/function >\n        (_, rhs) => rhs\n    TimestampGetLowBitsTemplate: &TimestampGetLowBitsTemplate !!js/function >\n        (arg) => `${arg}.time`\n    TimestampGetLowBitsArgsTemplate: &TimestampGetLowBitsArgsTemplate !!js/function >\n        () => ''\n    TimestampGetHighBitsTemplate: &TimestampGetHighBitsTemplate !!js/function >\n        (arg) => `${arg}.increment`\n    TimestampGetHighBitsArgsTemplate: &TimestampGetHighBitsArgsTemplate !!js/function >\n        () => ''\n    TimestampTTemplate: &TimestampTTemplate !!js/function >\n        (arg) => `${arg}.time`\n    TimestampITemplate: &TimestampITemplate !!js/function >\n        (arg) => `${arg}.increment`\n    TimestampAsDateTemplate: &TimestampAsDateTemplate !!js/function >\n        (arg) => `Date(timeIntervalSince1970: TimeInterval(${arg.timestamp}) / 1000.0))`\n    TimestampAsDateArgsTemplate: &TimestampAsDateArgsTemplate !!js/function >\n        () => ''\n    TimestampCompareTemplate: &TimestampCompareTemplate null\n    TimestampCompareArgsTemplate: &TimestampCompareArgsTemplate null\n    TimestampNotEqualsTemplate: &TimestampNotEqualsTemplate !!js/function >\n        (lhs) => `${lhs} != `\n    TimestampNotEqualsArgsTemplate: &TimestampNotEqualsArgsTemplate !!js/function >\n        (_, rhs) => rhs\n    TimestampGreaterThanTemplate: &TimestampGreaterThanTemplate null\n    TimestampGreaterThanArgsTemplate: &TimestampGreaterThanArgsTemplate null\n    TimestampGreaterThanOrEqualTemplate: &TimestampGreaterThanOrEqualTemplate null\n    TimestampGreaterThanOrEqualArgsTemplate: &TimestampGreaterThanOrEqualArgsTemplate null\n    TimestampLessThanTemplate: &TimestampLessThanTemplate null\n    TimestampLessThanArgsTemplate: &TimestampLessThanArgsTemplate null\n    TimestampLessThanOrEqualTemplate: &TimestampLessThanOrEqualTemplate null\n    TimestampLessThanOrEqualArgsTemplate: &TimestampLessThanOrEqualArgsTemplate null\n    SymbolValueOfTemplate: &SymbolValueOfTemplate null\n    SymbolValueOfArgsTemplate: &SymbolValueOfArgsTemplate null\n    SymbolInspectTemplate: &SymbolInspectTemplate null\n    SymbolInspectArgsTemplate: &SymbolInspectArgsTemplate null\n    SymbolToStringTemplate: &SymbolToStringTemplate null\n    SymbolToStringArgsTemplate: &SymbolToStringArgsTemplate null\n    Decimal128ToStringTemplate: &Decimal128ToStringTemplate !!js/function >\n        (lhs) => `\"\\(${lhs})\"`\n    Decimal128ToStringArgsTemplate: &Decimal128ToStringArgsTemplate null\n    # non bson-specific\n    DateSymbolNowTemplate: &DateSymbolNowTemplate !!js/function >\n        () => 'Date()'\n    DateSymbolNowArgsTemplate: &DateSymbolNowArgsTemplate !!js/function >\n        () => ''\n\n    #############################################\n    #         Symbol Attributes/Methods         #\n    #                                           #\n    # These're variables or functions called on #\n    # symbols. Also called bson-utils.          #\n    #                                           #\n    # They are basically the same thing as      #\n    # object attributes/methods, but need to be #\n    # distinguished since they are separate     #\n    # namespaces that happen to have the same   #\n    # name which is v confusing.                #\n    #                                           #\n    # For example, ObjectId().toString() is an  #\n    # object method, while ObjectId.fromString  #\n    # is a symbol attribute. These are two      #\n    # separate ObjectId related namespaces that #\n    # don't overlap.                            #\n    #                                           #\n    #############################################\n    LongSymbolMaxTemplate: &LongSymbolMaxTemplate !!js/function >\n        () => \"Int64.max\"\n    LongSymbolMaxArgsTemplate: &LongSymbolMaxArgsTemplate null\n    LongSymbolMinTemplate: &LongSymbolMinTemplate !!js/function >\n        () => \"Int64.min\"\n    LongSymbolMinArgsTemplate: &LongSymbolMinArgsTemplate null\n    LongSymbolZeroTemplate: &LongSymbolZeroTemplate !!js/function >\n        () => \"Int64(0)\"\n    LongSymbolZeroArgsTemplate: &LongSymbolZeroArgsTemplate null\n    LongSymbolOneTemplate: &LongSymbolOneTemplate !!js/function >\n        () => \"Int64(1)\"\n    LongSymbolOneArgsTemplate: &LongSymbolOneArgsTemplate null\n    LongSymbolNegOneTemplate: &LongSymbolNegOneTemplate !!js/function >\n        () => \"Int64(-1)\"\n    LongSymbolNegOneArgsTemplate: &LongSymbolNegOneArgsTemplate null\n    LongSymbolFromBitsTemplate: &LongSymbolFromBitsTemplate null \n    LongSymbolFromBitsArgsTemplate: &LongSymbolFromBitsArgsTemplate !!js/function >\n        (_, arg) => {\n            return `Int64(${arg})`;\n        }\n    LongSymbolFromIntTemplate: &LongSymbolFromIntTemplate null\n    LongSymbolFromIntArgsTemplate: &LongSymbolFromIntArgsTemplate null\n    LongSymbolFromNumberTemplate: &LongSymbolFromNumberTemplate null\n    LongSymbolFromNumberArgsTemplate: &LongSymbolFromNumberArgsTemplate null\n    LongSymbolFromStringTemplate: &LongSymbolFromStringTemplate null\n    LongSymbolFromStringArgsTemplate: &LongSymbolFromStringArgsTemplate null\n    Decimal128SymbolFromStringTemplate: &Decimal128SymbolFromStringTemplate null\n    Decimal128SymbolFromStringArgsTemplate: &Decimal128SymbolFromStringArgsTemplate null\n    ObjectIdCreateFromHexStringTemplate: &ObjectIdCreateFromHexStringTemplate null\n    ObjectIdCreateFromHexStringArgsTemplate: &ObjectIdCreateFromHexStringArgsTemplate null\n    ObjectIdCreateFromTimeTemplate: &ObjectIdCreateFromTimeTemplate null\n    ObjectIdCreateFromTimeArgsTemplate: &ObjectIdCreateFromTimeArgsTemplate null\n    # non bson-specific would go here, but there aren't any atm.\n\n    #############################################\n    #                 Imports                   #\n    #                                           #\n    # Each type has a 'code' that is consistent #\n    # between languages. The import templates   #\n    # for each code generate the required       #\n    # statement for each type. No args.         #\n    #                                           #\n    # The ImportTemplate collects everything    #\n    # into one statement.                       #\n    #                                           #\n    #############################################\n    ImportTemplate: &ImportTemplate !!js/function >\n        (args) => {\n            let merged = new Set(Object.values(args));\n            return [...merged].sort().join('\\n');\n        }\n    DriverImportTemplate: &DriverImportTemplate !!js/function >\n        () => \"import MongoSwift\\nimport NIO\"\n    0ImportTemplate: &0ImportTemplate null\n    1ImportTemplate: &1ImportTemplate null\n    2ImportTemplate: &2ImportTemplate null\n    3ImportTemplate: &3ImportTemplate null\n    4ImportTemplate: &4ImportTemplate null\n    5ImportTemplate: &5ImportTemplate null\n    6ImportTemplate: &6ImportTemplate null\n    7ImportTemplate: &7ImportTemplate null\n    8ImportTemplate: &8ImportTemplate null\n    9ImportTemplate: &9ImportTemplate null\n    10ImportTemplate: &10ImportTemplate null\n    11ImportTemplate: &11ImportTemplate null\n    12ImportTemplate: &12ImportTemplate null\n    100ImportTemplate: &100ImportTemplate null\n    101ImportTemplate: &101ImportTemplate null\n    102ImportTemplate: &102ImportTemplate null\n    103ImportTemplate: &103ImportTemplate null\n    104ImportTemplate: &104ImportTemplate null\n    105ImportTemplate: &105ImportTemplate null\n    106ImportTemplate: &106ImportTemplate null\n    107ImportTemplate: &107ImportTemplate null\n    108ImportTemplate: &108ImportTemplate null\n    109ImportTemplate: &109ImportTemplate null\n    110ImportTemplate: &110ImportTemplate null\n    111ImportTemplate: &111ImportTemplate null\n    112ImportTemplate: &112ImportTemplate null\n    113ImportTemplate: &113ImportTemplate null\n    114ImportTemplate: &114ImportTemplate null\n    200ImportTemplate: &200ImportTemplate null\n    201ImportTemplate: &201ImportTemplate null\n    300ImportTemplate: &300ImportTemplate null\n    301ImportTemplate: &301ImportTemplate null\n    302ImportTemplate: &302ImportTemplate null\n    303ImportTemplate: &303ImportTemplate null\n    304ImportTemplate: &304ImportTemplate null\n    305ImportTemplate: &305ImportTemplate null\n    306ImportTemplate: &306ImportTemplate null\n# Universal types\n# Everything inherits from StringType because we haven't implemented any of them.\nBasicTypes:\n    # Universal basic types\n    _bool: &BoolType\n        <<: *__type\n        id: \"_bool\"\n        code: 0\n        template: *BoolTypeTemplate\n    _integer: &IntegerType\n        <<: *__type\n        id: \"_integer\"\n        code: 1\n        template: *IntegerTypeTemplate\n    _long: &LongBasicType\n        <<: *__type\n        id: \"_long\"\n        code: 2\n        template: *LongBasicTypeTemplate\n    _decimal: &DecimalType\n        <<: *__type\n        id: \"_decimal\"\n        code: 3\n        template: *DecimalTypeTemplate\n    _hex: &HexType\n        <<: *__type\n        id: \"_hex\"\n        code: 4\n        template: *HexTypeTemplate\n    _octal: &OctalType\n        <<: *__type\n        id: \"_octal\"\n        code: 5\n        template: *OctalTypeTemplate\n    _numeric: &NumericType\n        <<: *__type\n        id: \"_numeric\"\n        code: 6\n        template: *NumericTypeTemplate\n    _string: &StringType\n        <<: *__type\n        id: \"_string\"\n        code: 7\n        template: *StringTypeTemplate\n    _regex: &RegexType\n        <<: *__type\n        id: \"_regex\"\n        code: 8\n        template: *RegexTypeTemplate\n    _array: &ArrayType\n        <<: *__type\n        id: \"_array\"\n        code: 9\n        template: *ArrayTypeTemplate\n        argsTemplate: *ArrayTypeArgsTemplate\n    _object: &ObjectType\n        <<: *__type\n        id: \"_object\"\n        code: 10\n        template: *ObjectTypeTemplate\n        argsTemplate: *ObjectTypeArgsTemplate\n    _null: &NullType\n        <<: *__type\n        id: \"_null\"\n        code: 11\n        template: *NullTypeTemplate\n    _undefined: &UndefinedType\n        <<: *__type\n        id: \"_undefined\"\n        code: 12\n        template: *UndefinedTypeTemplate\n\nSyntax:\n    equality:\n        template: *EqualitySyntaxTemplate\n    in:\n        template: *InSyntaxTemplate\n    and:\n        template: *AndSyntaxTemplate\n    or:\n        template: *OrSyntaxTemplate\n    not:\n        template: *NotSyntaxTemplate\n    unary:\n        template: *UnarySyntaxTemplate\n    binary:\n        template: *BinarySyntaxTemplate\n    parens:\n        template: *ParensSyntaxTemplate\n    eos:\n        template: *EosSyntaxTemplate\n    eof:\n        template: *EofSyntaxTemplate\n    # The new template takes in expr, and an optional skip argument and optional\n    # id argument. The skip argument is a boolean that if true then doesn't add\n    # new. The code argument is the symbol code being called. The template will check\n    # if it is an exception, i.e. a type that is a constructor but may not use new.\n    new:\n        template: *NewSyntaxTemplate\n    # The regex flags that change symbols between languages can be defined here.\n    # Flags that aren't defined can be left blank and will be ignored.\n    regexFlags: *RegexFlags\n    bsonRegexFlags: *BSONRegexFlags\n    driver: *DriverTemplate\nImports:\n    import:\n        template: *ImportTemplate\n    driver:\n        template: *DriverImportTemplate\n    0:\n        template: *0ImportTemplate\n    1:\n        template: *1ImportTemplate\n    2:\n        template: *2ImportTemplate\n    3:\n        template: *3ImportTemplate\n    4:\n        template: *4ImportTemplate\n    5:\n        template: *5ImportTemplate\n    6:\n        template: *6ImportTemplate\n    7:\n        template: *7ImportTemplate\n    8:\n        template: *8ImportTemplate\n    9:\n        template: *9ImportTemplate\n    10:\n        template: *10ImportTemplate\n    11:\n        template: *11ImportTemplate\n    12:\n        template: *12ImportTemplate\n    100:\n        template: *100ImportTemplate\n    101:\n        template: *101ImportTemplate\n    102:\n        template: *102ImportTemplate\n    103:\n        template: *103ImportTemplate\n    104:\n        template: *104ImportTemplate\n    105:\n        template: *105ImportTemplate\n    106:\n        template: *106ImportTemplate\n    107:\n        template: *107ImportTemplate\n    108:\n        template: *108ImportTemplate\n    109:\n        template: *109ImportTemplate\n    110:\n        template: *110ImportTemplate\n    111:\n        template: *111ImportTemplate\n    112:\n        template: *112ImportTemplate\n    113:\n        template: *113ImportTemplate\n    114:\n        template: *114ImportTemplate\n    200:\n        template: *200ImportTemplate\n    201:\n        template: *201ImportTemplate\n    300:\n        template: *300ImportTemplate\n    301:\n        template: *301ImportTemplate\n    302:\n        template: *302ImportTemplate\n    303:\n        template: *303ImportTemplate\n    304:\n        template: *304ImportTemplate\n    305:\n        template: *305ImportTemplate\n    306:\n        template: *306ImportTemplate\nBsonTypes:\n    Code: &CodeType\n        <<: *__type\n        id: \"Code\"\n        code: 100\n        type: *ObjectType\n        attr:\n            code:\n                callable: *var\n                args: null\n                attr: null\n                id: \"code\"\n                type: *StringType\n                template: *CodeCodeTemplate\n                argsTemplate: *CodeCodeArgsTemplate\n            scope:\n                callable: *var\n                args: null\n                attr: null\n                id: \"scope\"\n                type: *StringType\n                template: *CodeScopeTemplate\n                argsTemplate: *CodeScopeArgsTemplate\n    ObjectId: &ObjectIdType\n        <<: *__type\n        id: \"ObjectId\"\n        code: 101\n        type: *ObjectType\n        attr:\n            toHexString:\n                <<: *__func\n                id: \"toHexString\"\n                type: *StringType\n            toString:\n                <<: *__func\n                type: *StringType\n                template: *ObjectIdToStringTemplate\n                argsTemplate: *ObjectIdToStringArgsTemplate\n            equals:\n                <<: *__func\n                args:\n                    - [ \"ObjectId\" ]\n                type: *BoolType\n                template: *ObjectIdEqualsTemplate\n                argsTemplate: *ObjectIdEqualsArgsTemplate\n            getTimestamp:\n                <<: *__func\n                type: *IntegerType\n                template: *ObjectIdGetTimestampTemplate\n                argsTemplate: *ObjectIdGetTimestampArgsTemplate\n    Binary: &BinaryType\n        <<: *__type\n        id: \"Binary\"\n        code: 102\n        type: *ObjectType\n        attr:\n            value:\n                <<: *__func\n                id: \"value\"\n                type: *StringType\n                template: *BinaryValueTemplate\n                argsTemplate: *BinaryValueArgsTemplate\n            length:\n                <<: *__func\n                id: \"length\"\n                type: *IntegerType\n                template: *BinaryLengthTemplate\n                argsTemplate: *BinaryLengthArgsTemplate\n            toString:\n                <<: *__func\n                id: \"toString\"\n                type: *StringType\n                template: *BinaryToStringTemplate\n                argsTemplate: *BinaryToStringArgsTemplate\n            sub_type:\n                callable: *var\n                args: null\n                attr: null\n                id: \"subtype\"\n                type: *IntegerType\n                template: *BinarySubtypeTemplate\n                argsTemplate: *BinarySubtypeArgsTemplate\n    DBRef: &DBRefType\n        <<: *__type\n        id: \"DBRef\"\n        code: 103\n        type: *ObjectType\n        attr:\n            db:\n                callable: *var\n                args: null\n                attr: null\n                id: \"db\"\n                type: *StringType\n                template: *DBRefGetDBTemplate\n                argsTemplate: *DBRefGetDBArgsTemplate\n            namespace:\n                callable: *var\n                args: null\n                attr: null\n                id: \"namespace\"\n                type: *StringType\n                template: *DBRefGetCollectionTemplate\n                argsTemplate: *DBRefGetCollectionArgsTemplate\n            oid:\n                callable: *var\n                args: null\n                attr: null\n                id: \"oid\"\n                type: *StringType\n                template: *DBRefGetIdTemplate\n                argsTemplate: *DBRefGetIdArgsTemplate\n    Double: &DoubleType\n        <<: *__type\n        id: \"Double\"\n        code: 104\n        type: *ObjectType\n        attr: {}\n    Int32: &Int32Type\n        <<: *__type\n        id: \"Int32\"\n        code: 105\n        type: *ObjectType\n        attr: {}\n    Long: &LongType\n        <<: *__type\n        id: \"Long\"\n        code: 106\n        type: *ObjectType\n        attr:\n            toString:\n                <<: *__func\n                id: \"LongtoString\" # Needs process method\n                args:\n                    - [ *IntegerType, null ]\n                type: *StringType\n                template: *LongToStringTemplate\n                argsTemplate: *LongToStringArgsTemplate\n            equals:\n                <<: *__func\n                id: \"equals\"\n                args:\n                    - [ \"Long\" ]\n                type: *BoolType\n                template: *LongEqualsTemplate\n                argsTemplate: *LongEqualsArgsTemplate\n            toInt:\n                <<: *__func\n                id: \"toInt\"\n                type: *IntegerType\n                template: *LongToIntTemplate\n                argsTemplate: *LongToIntArgsTemplate\n            toNumber:\n                <<: *__func\n                id: \"toNumber\"\n                type: *DecimalType\n                template: *LongToNumberTemplate\n                argsTemplate: *LongToNumberArgsTemplate\n            compare:\n                <<: *__func\n                id: \"compare\"\n                args:\n                    - [ \"Long\" ]\n                type: *StringType\n                template: *LongCompareTemplate\n                argsTemplate: *LongCompareArgsTemplate\n            isOdd:\n                <<: *__func\n                id: \"isOdd\"\n                type: *BoolType\n                template: *LongIsOddTemplate\n                argsTemplate: *LongIsOddArgsTemplate\n            isZero:\n                <<: *__func\n                id: \"isZero\"\n                type: *BoolType\n                template: *LongIsZeroTemplate\n                argsTemplate: *LongIsZeroArgsTemplate\n            isNegative:\n                <<: *__func\n                id: \"isNegative\"\n                type: *BoolType\n                template: *LongIsNegativeTemplate\n                argsTemplate: *LongIsNegativeArgsTemplate\n            negate:\n                <<: *__func\n                id: \"negate\"\n                type: \"Long\"\n                template: *LongNegateTemplate\n                argsTemplate: *LongNegateArgsTemplate\n            not:\n                <<: *__func\n                id: \"not\"\n                type: \"Long\"\n                template: *LongNotTemplate\n                argsTemplate: *LongNotArgsTemplate\n            notEquals:\n                <<: *__func\n                id: \"notEquals\"\n                args:\n                    - [ \"Long\" ]\n                type: *BoolType\n                template: *LongNotEqualsTemplate\n                argsTemplate: *LongNotEqualsArgsTemplate\n            greaterThan:\n                <<: *__func\n                id: \"greaterThan\"\n                args:\n                    - [ \"Long\" ]\n                type: *BoolType\n                template: *LongGreaterThanTemplate\n                argsTemplate: *LongGreaterThanArgsTemplate\n            greaterThanOrEqual:\n                <<: *__func\n                id: \"greaterThanOrEqual\"\n                args:\n                    - [ \"Long\" ]\n                type: *BoolType\n                template: *LongGreaterThanOrEqualTemplate\n                argsTemplate: *LongGreaterThanOrEqualArgsTemplate\n            lessThan:\n                <<: *__func\n                id: \"lessThan\"\n                args:\n                    - [ \"Long\" ]\n                type: *BoolType\n                template: *LongLessThanTemplate\n                argsTemplate: *LongLessThanArgsTemplate\n            lessThanOrEqual:\n                <<: *__func\n                id: \"lessThanOrEqual\"\n                args:\n                    - [ \"Long\" ]\n                type: *BoolType\n                template: *LongLessThanOrEqualTemplate\n                argsTemplate: *LongLessThanOrEqualArgsTemplate\n            add:\n                <<: *__func\n                id: \"add\"\n                args:\n                    - [ \"Long\" ]\n                type: \"Long\"\n                template: *LongAddTemplate\n                argsTemplate: *LongAddArgsTemplate\n            subtract:\n                <<: *__func\n                id: \"subtract\"\n                args:\n                    - [ \"Long\" ]\n                type: \"Long\"\n                template: *LongSubtractTemplate\n                argsTemplate: *LongSubtractArgsTemplate\n            multiply:\n                <<: *__func\n                id: \"multiply\"\n                args:\n                    - [ \"Long\" ]\n                type: \"Long\"\n                template: *LongMultiplyTemplate\n                argsTemplate: *LongMultiplyArgsTemplate\n            div:\n                <<: *__func\n                id: \"div\"\n                args:\n                    - [ \"Long\" ]\n                type: \"Long\"\n                template: *LongDivTemplate\n                argsTemplate: *LongDivArgsTemplate\n            modulo:\n                <<: *__func\n                id: \"modulo\"\n                args:\n                    - [ \"Long\" ]\n                type: \"Long\"\n                template: *LongModuloTemplate\n                argsTemplate: *LongModuloArgsTemplate\n            and:\n                <<: *__func\n                id: \"and\"\n                args:\n                    - [ \"Long\" ]\n                type: \"Long\"\n                template: *LongAndTemplate\n                argsTemplate: *LongAndArgsTemplate\n            or:\n                <<: *__func\n                id: \"or\"\n                args:\n                    - [ \"Long\" ]\n                type: \"Long\"\n                template: *LongOrTemplate\n                argsTemplate: *LongOrArgsTemplate\n            xor:\n                <<: *__func\n                id: \"xor\"\n                args:\n                    - [ \"Long\" ]\n                type: \"Long\"\n                template: *LongXorTemplate\n                argsTemplate: *LongXorArgsTemplate\n            shiftLeft:\n                <<: *__func\n                id: \"shiftLeft\"\n                args:\n                    - [ *IntegerType ]\n                type: \"Long\"\n                template: *LongShiftLeftTemplate\n                argsTemplate: *LongShiftLeftArgsTemplate\n            shiftRight:\n                <<: *__func\n                id: \"shiftRight\"\n                args:\n                    - [ *IntegerType ]\n                type: \"Long\"\n                template: *LongShiftRightTemplate\n                argsTemplate: *LongShiftRightArgsTemplate\n    MinKeyType: &MinKeyType\n        <<: *__type\n        id: \"MinKey\"\n        code: 107\n        type: *ObjectType\n    MaxKeyType: &MaxKeyType\n        <<: *__type\n        id: \"MaxKey\"\n        code: 108\n        type: *ObjectType\n    BSONRegExpType: &BSONRegExpType\n        <<: *__type\n        id: \"BSONRegExp\"\n        code: 109\n        type: *ObjectType #TODO: add pattern + options\n    Timestamp: &TimestampType\n        <<: *__type\n        id: \"Timestamp\"\n        code: 110\n        type: *ObjectType\n        attr:\n            toString:\n                <<: *__func\n                id: \"toString\"\n                type: *StringType\n                template: *TimestampToStringTemplate\n                argsTemplate: *TimestampToStringArgsTemplate\n            equals:\n                <<: *__func\n                id: \"equals\"\n                args:\n                    - [ \"Timestamp\" ]\n                type: *BoolType\n                template: *TimestampEqualsTemplate\n                argsTemplate: *TimestampEqualsArgsTemplate\n            getLowBits:\n                <<: *__func\n                id: \"getLowBits\"\n                type: *IntegerType\n                template: *TimestampGetLowBitsTemplate\n                argsTemplate: *TimestampGetLowBitsArgsTemplate\n            getHighBits:\n                <<: *__func\n                id: \"getHighBits\"\n                type: *IntegerType\n                template: *TimestampGetHighBitsTemplate\n                argsTemplate: *TimestampGetHighBitsArgsTemplate\n            compare:\n                <<: *__func\n                id: \"compare\"\n                args:\n                    - [ \"Timestamp\" ]\n                type: *StringType\n                template: *TimestampCompareTemplate\n                argsTemplate: *TimestampCompareArgsTemplate\n            notEquals:\n                <<: *__func\n                id: \"notEquals\"\n                args:\n                    - [ \"Timestamp\" ]\n                type: *BoolType\n                template: *TimestampNotEqualsTemplate\n                argsTemplate: *TimestampNotEqualsArgsTemplate\n            greaterThan:\n                <<: *__func\n                id: \"greaterThan\"\n                args:\n                    - [ \"Timestamp\" ]\n                type: *BoolType\n                template: *TimestampGreaterThanTemplate\n                argsTemplate: *TimestampGreaterThanArgsTemplate\n            greaterThanOrEqual:\n                <<: *__func\n                id: \"greaterThanOrEqual\"\n                args:\n                    - [ \"Timestamp\" ]\n                type: *BoolType\n                template: *TimestampGreaterThanOrEqualTemplate\n                argsTemplate: *TimestampGreaterThanOrEqualArgsTemplate\n            lessThan:\n                <<: *__func\n                id: \"lessThan\"\n                args:\n                    - [ \"Timestamp\" ]\n                type: *BoolType\n                template: *TimestampLessThanTemplate\n                argsTemplate: *TimestampLessThanArgsTemplate\n            lessThanOrEqual:\n                <<: *__func\n                id: \"lessThanOrEqual\"\n                args:\n                    - [ \"Timestamp\" ]\n                type: *BoolType\n                template: *TimestampLessThanOrEqualTemplate\n                argsTemplate: *TimestampLessThanOrEqualArgsTemplate\n    BSONSymbol: &SymbolType\n        <<: *__type\n        id: \"BSONSymbol\"\n        code: 111\n        type: *ObjectType\n        attr:\n            valueOf:\n                <<: *__func\n                id: \"valueOf\"\n                type: *StringType\n                template: *SymbolValueOfTemplate\n                argsTemplate: *SymbolValueOfArgsTemplate\n            toString:\n                <<: *__func\n                id: \"toString\"\n                type: *StringType\n                template: *SymbolToStringTemplate\n                argsTemplate: *SymbolToStringArgsTemplate\n            inspect:\n                <<: *__func\n                id: \"inspect\"\n                type: *StringType\n                template: *SymbolInspectTemplate\n                argsTemplate: *SymbolInspectArgsTemplate\n    Decimal128: &Decimal128Type\n        <<: *__type\n        id: \"Decimal128\"\n        code: 112\n        type: *ObjectType\n        attr:\n            toString:\n                <<: *__func\n                id: \"toString\"\n                type: *StringType\n                template: *Decimal128ToStringTemplate\n                argsTemplate: *Decimal128ToStringArgsTemplate\nNativeTypes:\n    Date: &DateType\n        <<: *__type\n        id: \"Date\"\n        code: 200\n        type: *ObjectType\n        attr: {} # TODO: no built-in date methods added yet\nBsonSymbols:\n    Code: &CodeSymbol\n        id: \"CodeFromJS\"\n        code: 100\n        callable: *constructor\n        args:\n            - [ *StringType ]\n            - [ *ObjectType, null ]\n        type: *CodeType\n        attr: {}\n        template: *CodeSymbolTemplate\n        argsTemplate: *CodeSymbolArgsTemplate\n    ObjectId: &ObjectIdSymbol\n        id: \"ObjectId\"\n        code: 101\n        callable: *constructor\n        args:\n            - [ *StringType, *NumericType, null ]\n        type: *ObjectIdType\n        attr:\n            createFromHexString:\n                <<: *__func\n                id: \"createFromHexString\"\n                args:\n                    - [ *StringType ]\n                type: *ObjectIdType\n                template: *ObjectIdCreateFromHexStringTemplate\n                argsTemplate: *ObjectIdCreateFromHexStringArgsTemplate\n            createFromTime:\n                <<: *__func\n                id: \"ObjectIdCreateFromTime\"\n                args:\n                    - [ *NumericType ]\n                type: *ObjectIdType\n                template: *ObjectIdCreateFromTimeTemplate\n                argsTemplate: *ObjectIdCreateFromTimeArgsTemplate\n            isValid:\n                <<: *__func\n                id: \"isValid\"\n                args:\n                    - [ *StringType ]\n                type: *BoolType\n                template: *ObjectIdIsValidTemplate\n                argsTemplate: *ObjectIdIsValidArgsTemplate\n        template: *ObjectIdSymbolTemplate\n        argsTemplate: *ObjectIdSymbolArgsTemplate\n    Binary: &BinarySymbol\n        id: \"Binary\"\n        code: 102\n        callable: *constructor\n        args:\n            - [ *StringType, *NumericType, *ObjectType ]\n            - [ *NumericType, null ]\n        type: *BinaryType\n        attr:\n            SUBTYPE_DEFAULT:\n                id: \"SUBTYPE_DEFAULT\"\n                callable: *var\n                args: null\n                type: *IntegerType\n                template: *BinarySymbolSubtypeDefaultTemplate\n            SUBTYPE_FUNCTION:\n                id: \"SUBTYPE_FUNCTION\"\n                callable: *var\n                args: null\n                type: *IntegerType\n                template: *BinarySymbolSubtypeFunctionTemplate\n            SUBTYPE_BYTE_ARRAY:\n                id: \"SUBTYPE_BYTE_ARRAY\"\n                callable: *var\n                args: null\n                type: *IntegerType\n                template: *BinarySymbolSubtypeByteArrayTemplate\n            SUBTYPE_UUID_OLD:\n                id: \"SUBTYPE_UUID_OLD\"\n                callable: *var\n                args: null\n                type: *IntegerType\n                template: *BinarySymbolSubtypeUuidOldTemplate\n            SUBTYPE_UUID:\n                id: \"SUBTYPE_UUID\"\n                callable: *var\n                args: null\n                type: *IntegerType\n                template: *BinarySymbolSubtypeUuidTemplate\n            SUBTYPE_MD5:\n                id: \"SUBTYPE_MD5\"\n                callable: *var\n                args: null\n                type: *IntegerType\n                template: *BinarySymbolSubtypeMd5Template\n            SUBTYPE_USER_DEFINED:\n                id: \"SUBTYPE_USER_DEFINED\"\n                callable: *var\n                args: null\n                type: *IntegerType\n                template: *BinarySymbolSubtypeUserDefinedTemplate\n        template: *BinarySymbolTemplate\n        argsTemplate: *BinarySymbolArgsTemplate\n    DBRef:\n        id: \"DBRef\"\n        code: 103\n        callable: *constructor\n        args:\n            - [ *StringType ]\n            - [ *ObjectIdType ]\n            - [ *StringType, null ]\n        type: *DBRefType\n        attr: {}\n        template: *DBRefSymbolTemplate\n        argsTemplate: *DBRefSymbolArgsTemplate\n    Double:\n        id: \"Double\"\n        code: 104\n        callable: *constructor\n        args:\n            - [ *NumericType, *StringType ]\n        type: *DoubleType\n        attr: {}\n        template: *DoubleSymbolTemplate\n        argsTemplate: *DoubleSymbolArgsTemplate\n    Int32:\n        id: \"Int32\"\n        code: 105\n        callable: *constructor\n        args:\n            - [ *NumericType, *StringType ]\n        type: *Int32Type\n        attr: {}\n        template: *Int32SymbolTemplate\n        argsTemplate: *Int32SymbolArgsTemplate\n    Long:\n        id: \"Long\"\n        code: 106\n        callable: *constructor\n        args:\n            - [ *IntegerType ]\n            - [ *IntegerType ]\n        type: *LongType\n        attr:\n            MAX_VALUE:\n                id: \"MAX_VALUE\"\n                callable: *var\n                args: null\n                type: *LongType\n                attr: {}\n                template: *LongSymbolMaxTemplate\n                argsTemplate: *LongSymbolMaxArgsTemplate\n            MIN_VALUE:\n                id: \"MIN_VALUE\"\n                callable: *var\n                args: null\n                type: *LongType\n                attr: {}\n                template: *LongSymbolMinTemplate\n                argsTemplate: *LongSymbolMinArgsTemplate\n            ZERO:\n                id: \"ZERO\"\n                callable: *var\n                args: null\n                type: *LongType\n                attr: {}\n                template: *LongSymbolZeroTemplate\n                argsTemplate: *LongSymbolZeroArgsTemplate\n            ONE:\n                id: \"ONE\"\n                callable: *var\n                args: null\n                type: *LongType\n                attr: {}\n                template: *LongSymbolOneTemplate\n                argsTemplate: *LongSymbolOneArgsTemplate\n            NEG_ONE:\n                id: \"NEG_ONE\"\n                callable: *var\n                args: null\n                type: *LongType\n                attr: {}\n                template: *LongSymbolNegOneTemplate\n                argsTemplate: *LongSymbolNegOneArgsTemplate\n            fromBits:\n                id: \"LongfromBits\" # Needs process method\n                callable: *func\n                args:\n                    - [ *IntegerType ]\n                    - [ *IntegerType ]\n                type: *LongType\n                attr: {}\n                template: *LongSymbolFromBitsTemplate\n                argsTemplate: *LongSymbolFromBitsArgsTemplate\n            fromInt:\n                id: \"fromInt\"\n                callable: *func\n                args:\n                    - [ *IntegerType ]\n                type: *LongType\n                attr: {}\n                template: *LongSymbolFromIntTemplate\n                argsTemplate: *LongSymbolFromIntArgsTemplate\n            fromNumber:\n                id: \"fromNumber\"\n                callable: *func\n                args:\n                    - [ *NumericType ]\n                type: *LongType\n                attr: {}\n                template: *LongSymbolFromNumberTemplate\n                argsTemplate: *LongSymbolFromNumberArgsTemplate\n            fromString:\n                id: \"fromString\"\n                callable: *func\n                args:\n                    - [ *StringType ]\n                    - [ *IntegerType, null ]\n                type: *LongType\n                attr: {}\n                template: *LongSymbolFromStringTemplate\n                argsTemplate: *LongSymbolFromStringArgsTemplate\n        template: *LongSymbolTemplate\n        argsTemplate: *LongSymbolArgsTemplate\n    MinKey:\n        id: \"MinKey\"\n        code: 107\n        callable: *constructor\n        args: []\n        type: *MinKeyType\n        attr: {}\n        template: *MinKeySymbolTemplate\n        argsTemplate: *MinKeySymbolArgsTemplate\n    MaxKey:\n        id: \"MaxKey\"\n        code: 108\n        callable: *constructor\n        args: []\n        type: *MaxKeyType\n        attr: {}\n        template: *MaxKeySymbolTemplate\n        argsTemplate: *MaxKeySymbolArgsTemplate\n    Timestamp:\n        id: \"Timestamp\"\n        code: 110\n        callable: *constructor\n        args:\n            - [ *IntegerType ]\n            - [ *IntegerType ]\n        type: *TimestampType\n        attr: {} #TODO: add fromInt, fromNumber, fromBits, fromString\n        template: *TimestampSymbolTemplate\n        argsTemplate: *TimestampSymbolArgsTemplate\n    BSONSymbol:\n        id: \"BSONSymbol\"\n        code: 111\n        callable: *constructor\n        args:\n            - [ *StringType ]\n        type: *SymbolType\n        attr: {}\n        template: *SymbolSymbolTemplate\n        argsTemplate: *SymbolSymbolArgsTemplate\n    BSONRegExp:\n        id: \"BSONRegExp\"\n        code: 109\n        callable: *constructor\n        args:\n            - [ *StringType ]\n            - [ *StringType, null ]\n        type: *BSONRegExpType\n        attr: {}\n        template: *BSONRegExpSymbolTemplate\n        argsTemplate: *BSONRegExpSymbolArgsTemplate\n    Decimal128:\n        id: \"Decimal128\"\n        code: 112\n        callable: *constructor\n        args:\n            - [ *ObjectType ]\n        type: *Decimal128Type\n        attr:\n            fromString:\n                id: \"fromString\"\n                callable: *func\n                args:\n                    - [ *StringType ]\n                type: *Decimal128Type\n                attr: {}\n                template: *Decimal128SymbolFromStringTemplate\n                argsTemplate: *Decimal128SymbolFromStringArgsTemplate\n        template: *Decimal128SymbolTemplate\n        argsTemplate: *Decimal128SymbolArgsTemplate\n\nNativeSymbols:\n    Number:\n        id: \"Number\"\n        code: 2\n        callable: *constructor\n        args:\n            - [ *IntegerType, *StringType ]\n        type: *NumericType\n        attr: {} # TODO: no built-in number funcs added yet\n        template: *NumberSymbolTemplate\n        argsTemplate: *NumberSymbolArgsTemplate\n    Date: # Needs process method\n        id: \"Date\"\n        code: 200\n        callable: *constructor\n        args:\n            - [ *StringType, *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n        type: *DateType\n        attr: # TODO: add more date funcs?\n            now:\n                id: \"now\"\n                code: 200.1\n                callable: *func\n                args: []\n                type: *DateType\n                attr: {}\n                template: *DateSymbolNowTemplate\n                argsTemplate: *DateSymbolNowArgsTemplate\n        template: *DateSymbolTemplate\n        argsTemplate: *DateSymbolArgsTemplate\n    RegExp: # Needs process method\n        id: \"RegExp\"\n        code: 8\n        callable: *constructor\n        args:\n            - [ *StringType, *RegexType ]\n            - [ *StringType, null ]\n        type: *RegexType\n        attr: {}\n        template: *RegExpSymbolTemplate\n        argsTemplate: *RegExpSymbolArgsTemplate\n";
