module.exports="SymbolTypes:\n    VAR: &var 0\n    CONSTRUCTOR: &constructor 1\n    FUNC: &func 2\n# Internal patterns to save typing\n__type: &__type\n    id: null\n    callable: *var\n    args: null\n    type: null\n    attr: {}\n    template: null\n    argsTemplate: null\n__func: &__func\n    callable: *func\n    args: []\n    attr: {}\n    template: null\n    argsTemplate: null\n\n#############################################\n#             Sample Templates              #\n#                                           #\n# The expected arguments are commented next #\n# to the template itself. Currently all are #\n# set to null, but to define a function     #\n# replace 'null' with '!!js/function > \\n   #\n# and a function defined below.             #\n#                                           #\n# See the other template files for examples #\n#                                           #\n#               Good to know:               #\n# lhs is left-hand-side of the expression   #\n# rhs is right-hand-side of the expression  #\n# All args are strings unless noted         #\n#    - arg? is boolean                      #\n#    - arg# is number                       #\n#                                           #\n#############################################\nTemplates:\n    ########\n    # Misc #\n    ########\n\n    # Filter out regex flags that have translations or are unsupported.\n    RegexFlags: &RegexFlags\n        i: 'i'\n        m: 'm'\n        u: ''\n        y: ''\n        g: ''\n    BSONRegexFlags: &BSONRegexFlags\n        i: 'i'\n        m: 'm'\n        x: 'x'\n        s: 's'\n        l: ''\n        u: ''\n\n    #############################################\n    #                  Syntax                   #\n    #                                           #\n    # Templates for language syntax expressions #\n    #                                           #\n    #############################################\n\n    DriverTemplate: &DriverTemplate !!js/function >\n        (spec) => {\n            const getKey = k => {\n                let translateKey = {\n                    project: 'projection',\n                }\n                return k in translateKey ? translateKey[k] : k\n            };\n            const options = spec.options;\n            const filter = spec.filter || {};\n            delete spec.options;\n            delete spec.filter;\n\n            comment = []\n                .concat('// Requires the MongoDB PHP Driver')\n                .concat('// https://www.mongodb.com/docs/drivers/php/')\n                .join('\\n')\n            ;\n            const client = `$client = new Client('${options.uri}');`;\n            const collection = `$collection = $client->selectCollection('${options.database}', '${options.collection}');`;\n\n            if ('aggregation' in spec) {\n                // Note: toPHPArray() may not be required here as Compass should always provide an array for spec.aggregation\n                return []\n                    .concat(comment)\n                    .concat('')\n                    .concat(client)\n                    .concat(collection)\n                    .concat(`$cursor = $collection->aggregate(${this.utils.toPHPArray(spec.aggregation)});`)\n                    .join('\\n')\n                ;\n            }\n\n            let args = Object.keys(spec).reduce(\n                (result, k) => {\n                    let val = this.utils.removePHPObject(spec[k]);\n                    const divider = result === '' ? '' : ',\\n';\n                    return `${result}${divider}    '${getKey(k)}' => ${val}`;\n                },\n                ''\n            );\n            args = args ? `, [\\n${args}\\n]` : '';\n\n            return []\n                .concat(comment)\n                .concat('')\n                .concat(client)\n                .concat(collection)\n                .concat(`$cursor = $collection->find(${this.utils.removePHPObject(filter)}${args});`)\n                .join('\\n')\n            ;\n        }\n    EqualitySyntaxTemplate: &EqualitySyntaxTemplate !!js/function >\n        (lhs, op, rhs) => {\n            // Identity comparison\n            if (op.includes('is')) {\n                if (op.includes('not')) {\n                    return `${lhs} !== ${rhs}`;\n                } else {\n                    return `${lhs} === ${rhs}`;\n                }\n            }\n            // Not equal\n            if (op.includes('!') || op.includes('not')) {\n                return `${lhs} != ${rhs}`;\n            }\n            // Equal\n            if (op === '==' || op === '===') {\n                return `${lhs} == ${rhs}`;\n            }\n            // All other cases\n            return `${lhs} ${op} ${rhs}`;\n        }\n    InSyntaxTemplate: &InSyntaxTemplate !!js/function >\n        (lhs, op, rhs) => {\n            // array\n            if (rhs.charAt(0) === '[' && rhs.charAt(rhs.length - 1) === ']') {\n                let not = '';\n                if (op.includes('!') || op.includes('not')) {\n                    not = '! ';\n                }\n                return `${not}\\\\in_array(${lhs}, ${rhs})`;\n            }\n            \n            //object\n            if (rhs.indexOf('(object) ') === 0) {\n                let not = '';\n                if (op.includes('!') || op.includes('not')) {\n                    not = '! ';\n                }\n                return `${not}\\\\property_exists(${rhs}, ${lhs})`;\n            }\n            \n            // string - all other cases\n            let targop = '!==';\n            if (op.includes('!') || op.includes('not')) {\n                targop = '===';\n            }\n            return `\\\\strpos(${rhs}, ${lhs}) ${targop} false`;\n        }\n    AndSyntaxTemplate: &AndSyntaxTemplate !!js/function >\n        (args) => {\n            return args.join(' && ');\n        }\n    OrSyntaxTemplate: &OrSyntaxTemplate !!js/function >\n        (args) => {\n            return args.join(' || ');\n        }\n    NotSyntaxTemplate: &NotSyntaxTemplate !!js/function >\n        (arg) => {\n            return `! ${arg}`;\n        }\n    UnarySyntaxTemplate: &UnarySyntaxTemplate !!js/function >\n        (op, arg) => {\n            switch(op) {\n                case '+':\n                    return `+${arg}`;\n                case '-':\n                    return `-${arg}`;\n                case '~':\n                    return `~${arg}`;\n                default:\n                    throw new Error(`unrecognized operation: ${op}`);\n            }\n        }\n    BinarySyntaxTemplate: &BinarySyntaxTemplate !!js/function >\n        (args) => {\n            return args.reduce((s, op, i, arr) => {\n                if (i % 2 === 0) {\n                    return s;\n                }\n                const rhs = arr[i + 1];\n                switch(op) {\n                    case '+':\n                        return `${s} + ${rhs}`;\n                    case '-':\n                        return `${s} - ${rhs}`;\n                    case '*':\n                        return `${s} * ${rhs}`;\n                    case '/':\n                        return `${s} / ${rhs}`;\n                    case '**':\n                        return `${s} ** ${rhs}`;\n                    case '//':\n                        return `\\\\intdiv(${s}, ${rhs})`;\n                    case '%':\n                        return `${s} % ${rhs}`;\n                    case '>>':\n                        return `${s} >> ${rhs}`;\n                    case '<<':\n                        return `${s} << ${rhs}`;\n                    case '|':\n                        return `${s} | ${rhs}`;\n                    case '&':\n                        return `${s} & ${rhs}`;\n                    case '^':\n                        return `${s} ^ ${rhs}`;\n                    default:\n                        throw new Error(`unrecognized operation: ${op}`);\n                }\n            }, args[0]);\n        }\n    ParensSyntaxTemplate: &ParensSyntaxTemplate null\n    EosTemplate: &EosSyntaxTemplate null # No args. End-of-line\n    EofTemplate: &EofSyntaxTemplate null # No args. End-of-file\n    FloorDivTemplate: &FloorDivSyntaxTemplate null # Args: lhs, rhs\n    PowerTemplate: &PowerSyntaxTemplate null # Args: lhs, rhs\n    NewTemplate: &NewSyntaxTemplate null # Args: expression, skip?, code# [to check if meant to be skipped]\n\n    #############################################\n    #               Literal Types               #\n    #                                           #\n    # Templates for literal type instance. Most #\n    # get passed the literal itself as an arg.  #\n    #                                           #\n    #############################################\n    StringTypeTemplate: &StringTypeTemplate  !!js/function >\n        (str) => {\n            // This is some standalone object context, which is generated to parse \n            // node and doesn't have access to main Generator object. Thus we can't\n            // use utility function call. All ~Template calls use this type of \n            // context. All ~ArgsTemplate have access to utility functions.\n        \n            stringifyWithSingleQuotes = (str) => {\n                if (\n                    (str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'') ||\n                    (str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"')\n                ) {\n                    str = str.substr(1, str.length - 2);\n                }\n                return `'${str.replace(/\\\\([\\s\\S])|(')/g, '\\\\$1$2')}'`;\n            };\n\n            return `${stringifyWithSingleQuotes(str)}`;\n        }\n    RegexTypeTemplate: &RegexTypeTemplate !!js/function >\n        (pattern, flags) => {\n            // This is some standalone object context, which is generated to parse \n            // node and doesn't have access to main Generator object. Thus we can't\n            // use utility function call. All ~Template calls use this type of \n            // context. All ~ArgsTemplate have access to utility functions.\n\n            stringifyWithDoubleQuotes = (str) => {\n                if (\n                    (str.charAt(0) === '\\'' && str.charAt(str.length - 1) === '\\'') ||\n                    (str.charAt(0) === '\"' && str.charAt(str.length - 1) === '\"')\n                ) {\n                    str = str.substr(1, str.length - 2);\n                }\n                return `${str.replace(/\\\\([\\s\\S])|(\")/g, '\\\\$1$2')}`;\n            };\n        \n            pattern = `\"${stringifyWithDoubleQuotes(pattern)}\"`;\n            flags = flags ? `, \"${flags}\"` : '';\n\n            return `new Regex(${pattern}${flags})`;\n        }\n    BoolTypeTemplate: &BoolTypeTemplate !!js/function >\n        (literal) => {\n            return literal.toLowerCase();\n        }\n    IntegerTypeTemplate: &IntegerTypeTemplate null # args: literal, argType (i.e. '_string', '_decimal' etc)\n    DecimalTypeTemplate: &DecimalTypeTemplate null # args: literal, argType\n    LongBasicTypeTemplate: &LongBasicTypeTemplate null # args: literal, argType\n    HexTypeTemplate: &HexTypeTemplate null # args: literal, argType\n    OctalTypeTemplate: &OctalTypeTemplate !!js/function >\n        (literal) => {\n            let offset = 0;\n\n            if (\n                literal.charAt(0) === '0' &&\n                (literal.charAt(1) === '0' || literal.charAt(1) === 'o' || literal.charAt(1) === 'O')\n            ) {\n                offset = 2;\n            } else if (literal.charAt(0) === '0') {\n                offset = 1;\n            }\n\n            literal = `0${literal.substr(offset, literal.length - 1)}`;\n\n            return literal;\n        }\n    NumericTypeTemplate: &NumericTypeTemplate null # args: literal, argType\n    ArrayTypeTemplate: &ArrayTypeTemplate !!js/function >\n        (literal, depth) => {\n            if (literal === '') {\n                return '[]'\n            }\n            return `[${literal}]`;\n        }\n    ArrayTypeArgsTemplate: &ArrayTypeArgsTemplate null # Args: single array element, nestedness, lastElement? (note: not being used atm)\n    NullTypeTemplate: &NullTypeTemplate !!js/function >\n        () => {\n            return 'null';\n        }\n    UndefinedTypeTemplate: &UndefinedTypeTemplate !!js/function >\n        () => {\n            return 'null';\n        }\n    ObjectTypeTemplate: &ObjectTypeTemplate !!js/function >\n        (literal) => {\n            return `${literal}`;\n        }\n    ObjectTypeArgsTemplate: &ObjectTypeArgsTemplate !!js/function >\n        (args, depth) => {\n            let isObjectCastRequired = true;\n        \n            if (args.length === 0) {\n                return `(object) []`;\n            }\n\n            const isExpectedIndex = (actualIndex, expectedIndex) => {\n                return '' + actualIndex === '' + expectedIndex;\n            }\n        \n            let indexTest = 0;\n            let pairs = args.map((arg) => {\n                if (isObjectCastRequired && !isExpectedIndex(arg[0], indexTest)) {\n                    isObjectCastRequired = false;\n                }\n                indexTest++;\n                return `${this.utils.stringifyWithSingleQuotes(arg[0])} => ${arg[1]}`;\n            }).join(', ');\n\n            // Rebuilding pairs for numeric sequential indexes without quotes\n            if (isObjectCastRequired) {\n                pairs = args.map((arg) => {\n                    return `${arg[0]} => ${arg[1]}`;\n                }).join(', ');\n            }\n\n            return `${isObjectCastRequired ? '(object) ' : ''}[${pairs}]`;\n        }\n\n    #############################################\n    #               Symbols                     #\n    #                                           #\n    # Templates for symbols, can be either      #\n    # functions or variables.                   #\n    #                                           #\n    # The *SymbolTemplates return names and     #\n    # usually don't take any arguments. The     #\n    # *SymbolArgsTemplates are invoked for func #\n    # calls. The first argument is always the   #\n    # lhs, i.e. the symbol returned from the    #\n    # corresponding SymbolTemplate. The rest of #\n    # the arguments are the processed arguments #\n    # passed to the original function.          #\n    #                                           #\n    #############################################\n    CodeSymbolTemplate: &CodeSymbolTemplate !!js/function >\n        () => {\n            return 'new Javascript';\n        }\n    CodeSymbolArgsTemplate: &CodeSymbolArgsTemplate !!js/function >\n        (lhs, code, scope) => {\n            return !scope \n                ? `(${this.utils.stringifyWithSingleQuotes(code)})` \n                : `(${this.utils.stringifyWithSingleQuotes(code)}, ${scope})`\n            ;\n        }\n    ObjectIdSymbolTemplate: &ObjectIdSymbolTemplate !!js/function >\n        () => {\n            return 'new ObjectId';\n        }\n    ObjectIdSymbolArgsTemplate: &ObjectIdSymbolArgsTemplate !!js/function >\n        (lhs, id) => {\n            return !id \n                ? `()` \n                : `(${this.utils.stringifyWithSingleQuotes(id)})`\n            ;\n        }\n    BinarySymbolTemplate: &BinarySymbolTemplate  !!js/function >\n        () => {\n            return 'new Binary';\n        }\n    BinarySymbolArgsTemplate: &BinarySymbolArgsTemplate !!js/function >\n        (lhs, bytes, type) => {\n            if (type === null) {\n                type = 'Binary::TYPE_GENERIC';\n            }\n            return `(${this.utils.stringifyWithSingleQuotes(bytes)}, ${type})`;\n        }\n    BinarySymbolSubtypeDefaultTemplate: &BinarySymbolSubtypeDefaultTemplate !!js/function >\n        () => {\n            return 'Binary::TYPE_GENERIC';\n        }\n    BinarySymbolSubtypeFunctionTemplate: &BinarySymbolSubtypeFunctionTemplate !!js/function >\n        () => {\n            return 'Binary::TYPE_FUNCTION';\n        }\n    BinarySymbolSubtypeByteArrayTemplate: &BinarySymbolSubtypeByteArrayTemplate !!js/function >\n        () => {\n            return 'Binary::TYPE_OLD_BINARY';\n        }\n    BinarySymbolSubtypeUuidOldTemplate: &BinarySymbolSubtypeUuidOldTemplate !!js/function >\n        () => {\n            return 'Binary::TYPE_OLD_UUID';\n        }\n    BinarySymbolSubtypeUuidTemplate: &BinarySymbolSubtypeUuidTemplate !!js/function >\n        () => {\n            return 'Binary::TYPE_UUID';\n        }\n    BinarySymbolSubtypeMd5Template: &BinarySymbolSubtypeMd5Template !!js/function >\n        () => {\n            return 'Binary::TYPE_MD5';\n        }\n    BinarySymbolSubtypeUserDefinedTemplate: &BinarySymbolSubtypeUserDefinedTemplate !!js/function >\n        () => {\n            return 'Binary::TYPE_USER_DEFINED';\n        }\n    DBRefSymbolTemplate: &DBRefSymbolTemplate !!js/function >\n        () => {\n            return ''\n        }\n    DBRefSymbolArgsTemplate: &DBRefSymbolArgsTemplate !!js/function >\n        (lhs, coll, id, db) => {\n            let coll_string = `'$ref' => ${this.utils.stringifyWithSingleQuotes(coll)}`;\n            let id_string = `, '$id' => ${id}`;\n            let db_string = db ? `, '$db' => ${this.utils.stringifyWithSingleQuotes(db)}` : `, '$db' => null`;\n            return `[${coll_string}${id_string}${db_string}]`;\n        }\n    DoubleSymbolTemplate: &DoubleSymbolTemplate !!js/function >\n        () => {\n            return '';\n        }\n    DoubleSymbolArgsTemplate: &DoubleSymbolArgsTemplate !!js/function >\n        (lhs, arg, type) => {\n            arg = arg === undefined ? 0 : arg;\n            if (type === '_decimal' || type === '_double') {\n                return arg;\n            }\n            if (type === '_integer' || type === '_long') {\n                return `${arg}.0`;\n            }\n            return `(float) ${arg}`;\n        }\n    Int32SymbolTemplate: &Int32SymbolTemplate !!js/function >\n        () => {\n            return '';\n        }\n    Int32SymbolArgsTemplate: &Int32SymbolArgsTemplate !!js/function >\n        (lhs, arg, type) => {\n            arg = arg === undefined ? 0 : arg;\n            if (type === '_integer' || type === '_long' || type === '_hex' || type === '_octal') {\n                return arg;\n            }\n            return `(int) ${arg}`;\n        }\n    LongSymbolTemplate: &LongSymbolTemplate !!js/function >\n        () => {\n            return ''\n        }\n    LongSymbolArgsTemplate: &LongSymbolArgsTemplate !!js/function >\n        (lhs, arg, type) => {\n            arg = arg === undefined ? 0 : arg;\n            if (type === '_integer' || type === '_long' || type === '_hex' || type === '_octal') {\n                return arg;\n            }\n            return `(int) ${arg}`;\n        }\n    RegExpSymbolTemplate: &RegExpSymbolTemplate !!js/function >\n        () => {\n            return 'new Regex';\n        }\n    RegExpSymbolArgsTemplate: &RegExpSymbolArgsTemplate null # Args: lhs, pattern, flags\n    SymbolSymbolTemplate: &SymbolSymbolTemplate !!js/function >\n        () => {\n            return '';\n        }\n    SymbolSymbolArgsTemplate: &SymbolSymbolArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return arg;\n        }\n    BSONRegExpSymbolTemplate: &BSONRegExpSymbolTemplate !!js/function >\n        () => {\n            return 'new Regex';\n        }\n    BSONRegExpSymbolArgsTemplate: &BSONRegExpSymbolArgsTemplate !!js/function >\n        (lhs, pattern, flags) => {\n            return `(${this.utils.stringifyWithDoubleQuotes(pattern)}${flags ? ', ' + this.utils.stringifyWithDoubleQuotes(flags) : ''})`;\n        }\n    Decimal128SymbolTemplate: &Decimal128SymbolTemplate !!js/function >\n        () => {\n            return 'new Decimal128';\n        }\n    Decimal128SymbolArgsTemplate: &Decimal128SymbolArgsTemplate !!js/function >\n        (lhs, arg) => {\n            arg = arg === undefined ? '0' : arg.toString();\n            return `('${this.utils.removeStringQuotes(arg)}')`;\n        }\n    MinKeySymbolTemplate: &MinKeySymbolTemplate !!js/function >\n        () => {\n            return 'new MinKey';\n        }\n    MinKeySymbolArgsTemplate: &MinKeySymbolArgsTemplate !!js/function >\n        () => {\n            return `()`;\n        }\n    MaxKeySymbolTemplate: &MaxKeySymbolTemplate !!js/function >\n        () => {\n            return 'new MaxKey';\n        }\n    MaxKeySymbolArgsTemplate: &MaxKeySymbolArgsTemplate !!js/function >\n        () => {\n            return `()`;\n        }\n    TimestampSymbolTemplate: &TimestampSymbolTemplate !!js/function >\n        () => {\n            return 'new Timestamp';\n        }\n    TimestampSymbolArgsTemplate: &TimestampSymbolArgsTemplate !!js/function >\n        (lhs, arg1, arg2) => {\n            // PHP orders increment and timestamp args differently (see: PHPC-845)\n            return `(${arg2 === undefined ? 0 : arg2}, ${arg1 === undefined ? 0 : arg1})`;\n        }\n    # non bson-specific\n    NumberSymbolTemplate: &NumberSymbolTemplate !!js/function >\n        () => ''\n    NumberSymbolArgsTemplate: &NumberSymbolArgsTemplate !!js/function >\n        (lhs, arg, type) => {\n            arg = arg === undefined ? 0 : arg;\n\n            switch(type) {\n                case '_string':\n                    if ((arg.indexOf('.') !== -1) && (arg.indexOf('.') !== arg.length - 2)) {\n                        return `(float) ${arg}`\n                    }\n                    return `(int) ${arg}`\n                default:\n                    return `${arg}`\n            }\n        }\n    DateSymbolTemplate: &DateSymbolTemplate !!js/function >\n        () => {\n            return 'UTCDateTime';\n        }\n    DateSymbolArgsTemplate: &DateSymbolArgsTemplate !!js/function >\n        (lhs, date, isString) => {\n            if (date === null) {\n                return `new ${lhs}()`;\n            }\n            return isString \n                ? `(new ${lhs}(${date.getTime()}))->toDateTime()->format(\\\\DateTimeInterface::RFC3339_EXTENDED)`\n                : `new ${lhs}(${date.getTime()})`\n            ;\n        }\n    DateSymbolNowTemplate: &DateSymbolNowTemplate !!js/function >\n        () => {\n            return `new UTCDateTime()`;\n        }\n    DateSymbolNowArgsTemplate: &DateSymbolNowArgsTemplate !!js/function >\n        (args) => {\n            return '';\n        }\n\n    #############################################\n    #         Object Attributes/Methods         #\n    #                                           #\n    # These're variables or functions called on #\n    # instantiated objects. For example,        #\n    # ObjectId().isValid() or Timestamp().t     #\n    #                                           #\n    # They follow the same pattern with the\n    # *Template/*ArgsTemplates: usually no args #\n    # to the Template and lhs plus any original #\n    # arguments to the ArgsTemplate.            #\n    #                                           #\n    #############################################\n    CodeCodeTemplate: &CodeCodeTemplate !!js/function >\n        (lhs) => {\n            return `(${lhs})->getCode()`;\n        }\n    CodeCodeArgsTemplate: &CodeCodeArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    CodeScopeTemplate: &CodeScopeTemplate !!js/function >\n        (lhs) => {\n            return `(${lhs})->getScope()`;\n        }\n    CodeScopeArgsTemplate: &CodeScopeArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    ObjectIdToStringTemplate: &ObjectIdToStringTemplate !!js/function >\n        (lhs) => {\n            return `(string) ${lhs}`;\n        }\n    ObjectIdToStringArgsTemplate: &ObjectIdToStringArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    ObjectIdEqualsTemplate: &ObjectIdEqualsTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} == `;\n        }\n    ObjectIdEqualsArgsTemplate: &ObjectIdEqualsArgsTemplate !!js/function >\n        (arg) => {\n            return `${arg}`;\n        }\n    ObjectIdGetTimestampTemplate: &ObjectIdGetTimestampTemplate !!js/function >\n        (lhs) => {\n            return `(${lhs})->getTimestamp()`;\n        }\n    ObjectIdGetTimestampArgsTemplate: &ObjectIdGetTimestampArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    ObjectIdIsValidTemplate: &ObjectIdIsValidTemplate !!js/function >\n        (lhs) => {\n            return ``;\n        }\n    ObjectIdIsValidArgsTemplate: &ObjectIdIsValidArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return `(\\\\ctype_xdigit(${this.utils.stringifyWithSingleQuotes(arg)}) && \\\\strlen(${this.utils.stringifyWithSingleQuotes(arg)}) == 24)`;\n        }\n    BinaryValueTemplate: &BinaryValueTemplate !!js/function >\n        (lhs) => {\n            return `(${lhs})->getData()`;\n        }\n    BinaryValueArgsTemplate: &BinaryValueArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    BinaryLengthTemplate: &BinaryLengthTemplate !!js/function >\n        (lhs) => {\n            return `\\\\strlen((${lhs})->getData())`;\n        }\n    BinaryLengthArgsTemplate: &BinaryLengthArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    BinaryToStringTemplate: &BinaryToStringTemplate !!js/function >\n        (lhs) => {\n            return `(${lhs})->getData()`;\n        }\n    BinaryToStringArgsTemplate: &BinaryToStringArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    BinarySubtypeTemplate: &BinarySubtypeTemplate !!js/function >\n        (lhs) => {\n            return `(${lhs})->getType()`;\n        }\n    BinarySubtypeArgsTemplate: &BinarySubtypeArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    DBRefGetDBTemplate: &DBRefGetDBTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}['$db']`;\n        }\n    DBRefGetCollectionTemplate: &DBRefGetCollectionTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}['$ref']`;\n        }\n    DBRefGetIdTemplate: &DBRefGetIdTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}['$id']`;\n        }\n    DBRefGetDBArgsTemplate: &DBRefGetDBArgsTemplate !!js/function >\n        (lhs) => {\n            return '';\n        }\n    DBRefGetCollectionArgsTemplate: &DBRefGetCollectionArgsTemplate !!js/function >\n        (lhs) => {\n            return '';\n        }\n    DBRefGetIdArgsTemplate: &DBRefGetIdArgsTemplate !!js/function >\n        (lhs) => {\n            return '';\n        }\n    DBRefToStringTemplate: &DBRefToStringTemplate null\n    DBRefToStringArgsTemplate: &DBRefToStringArgsTemplate null\n    DoubleValueOfTemplate: &DoubleValueOfTemplate null\n    DoubleValueOfArgsTemplate: &DoubleValueOfArgsTemplate null\n    Int32ValueOfTemplate: &Int32ValueOfTemplate null\n    Int32ValueOfArgsTemplate: &Int32ValueOfArgsTemplate null\n    Int32ToStringTemplate: &Int32ToStringTemplate !!js/function >\n        (lhs) => {\n            return `(string) ${lhs}`;\n        }\n    Int32ToStringArgsTemplate: &Int32ToStringArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    LongEqualsTemplate: &LongEqualsTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} ==`;\n        }\n    LongEqualsArgsTemplate: &LongEqualsArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongToStringTemplate: &LongToStringTemplate !!js/function >\n        (lhs) => {\n            return `(string) ${lhs}`;\n        }\n    LongToStringArgsTemplate: &LongToStringArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    LongToIntTemplate: &LongToIntTemplate !!js/function >\n        (lhs) => {\n            return `${lhs}`;\n        }\n    LongToIntArgsTemplate: &LongToIntArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    LongValueOfTemplate: &LongValueOfTemplate null\n    LongValueOfArgsTemplate: &LongValueOfArgsTemplate null\n    LongToNumberTemplate: &LongToNumberTemplate !!js/function >\n        (lhs) => {\n            return `(float) ${lhs}`;\n        }\n    LongToNumberArgsTemplate: &LongToNumberArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    LongAddTemplate: &LongAddTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} +`;\n        }\n    LongAddArgsTemplate: &LongAddArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongSubtractTemplate: &LongSubtractTemplate !!js/function >\n        (arg) => {\n            return `${arg} -`;\n        }\n    LongSubtractArgsTemplate: &LongSubtractArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongMultiplyTemplate: &LongMultiplyTemplate !!js/function >\n        (arg) => {\n            return `${arg} *`;\n        }\n    LongMultiplyArgsTemplate: &LongMultiplyArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongDivTemplate: &LongDivTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} /`;\n        }\n    LongDivArgsTemplate: &LongDivArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongModuloTemplate: &LongModuloTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} %`;\n        }\n    LongModuloArgsTemplate: &LongModuloArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongAndTemplate: &LongAndTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} &`;\n        }\n    LongAndArgsTemplate: &LongAndArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongOrTemplate: &LongOrTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} |`;\n        }\n    LongOrArgsTemplate: &LongOrArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongXorTemplate: &LongXorTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} ^`;\n        }\n    LongXorArgsTemplate: &LongXorArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongShiftLeftTemplate: &LongShiftLeftTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} <<`;\n        }\n    LongShiftLeftArgsTemplate: &LongShiftLeftArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongShiftRightTemplate: &LongShiftRightTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} >>`;\n        }\n    LongShiftRightArgsTemplate: &LongShiftRightArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongCompareTemplate: &LongCompareTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} <=>`;\n        }\n    LongCompareArgsTemplate: &LongCompareArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongIsOddTemplate: &LongIsOddTemplate !!js/function >\n        (lhs) => {\n            return `(${lhs} % 2) === 1`;\n        }\n    LongIsOddArgsTemplate: &LongIsOddArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    LongIsZeroTemplate: &LongIsZeroTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} === 0`;\n        }\n    LongIsZeroArgsTemplate: &LongIsZeroArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    LongIsNegativeTemplate: &LongIsNegativeTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} < 0`;\n        }\n    LongIsNegativeArgsTemplate: &LongIsNegativeArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    LongNegateTemplate: &LongNegateTemplate !!js/function >\n        () => {\n            return '-';\n        }\n    LongNegateArgsTemplate: &LongNegateArgsTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    LongNotTemplate: &LongNotTemplate !!js/function >\n        () => {\n            return '~';\n        }\n    LongNotArgsTemplate: &LongNotArgsTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    LongNotEqualsTemplate: &LongNotEqualsTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} !=`;\n        }\n    LongNotEqualsArgsTemplate: &LongNotEqualsArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongGreaterThanTemplate: &LongGreaterThanTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} >`;\n        }\n    LongGreaterThanArgsTemplate: &LongGreaterThanArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongGreaterThanOrEqualTemplate: &LongGreaterThanOrEqualTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} >=`;\n        }\n    LongGreaterThanOrEqualArgsTemplate: &LongGreaterThanOrEqualArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongLessThanTemplate: &LongLessThanTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} <`;\n        }\n    LongLessThanArgsTemplate: &LongLessThanArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongLessThanOrEqualTemplate: &LongLessThanOrEqualTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} <=`;\n        }\n    LongLessThanOrEqualArgsTemplate: &LongLessThanOrEqualArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return ` ${arg}`;\n        }\n    LongFloatApproxTemplate: &LongFloatApproxTemplate !!js/function >\n        (lhs) => {\n            return `(float) ${lhs}`;\n        }\n    LongTopTemplate: &LongTopTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} >> 32`;\n        }\n    LongBottomTemplate: &LongBottomTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} & 0x00000000ffffffff`;\n        }\n    TimestampToStringTemplate: &TimestampToStringTemplate !!js/function >\n        (lhs) => {\n            return `(string) ${lhs}`;\n        }\n    TimestampToStringArgsTemplate: &TimestampToStringArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    TimestampEqualsTemplate: &TimestampEqualsTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} == `;\n        }\n    TimestampEqualsArgsTemplate: &TimestampEqualsArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return `${arg}`;\n        }\n    TimestampGetLowBitsTemplate: &TimestampGetLowBitsTemplate !!js/function >\n        (lhs) => {\n            return `(${lhs})->getTimestamp()`;\n        }\n    TimestampGetLowBitsArgsTemplate: &TimestampGetLowBitsArgsTemplate !!js/function >\n        () => {\n            return ''\n        }\n    TimestampGetHighBitsTemplate: &TimestampGetHighBitsTemplate !!js/function >\n        (lhs) => {\n            return `(${lhs})->getIncrement()`;\n        }\n    TimestampGetHighBitsArgsTemplate: &TimestampGetHighBitsArgsTemplate !!js/function >\n        () => {\n            return ''\n        }\n    TimestampTTemplate: &TimestampTTemplate !!js/function >\n        (lhs) => {\n            return `(${lhs})->getTimestamp()`;\n        }\n    TimestampITemplate: &TimestampITemplate !!js/function >\n        (lhs) => {\n            return `(${lhs})->getIncrement()`;\n        }\n    TimestampAsDateTemplate: &TimestampAsDateTemplate !!js/function >\n        (lhs) => {\n            return `new UTCDateTime((${lhs})->getTimestamp() * 1000)`;\n        }\n    TimestampAsDateArgsTemplate: &TimestampAsDateArgsTemplate null\n    TimestampCompareTemplate: &TimestampCompareTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} <=> `;\n        }\n    TimestampCompareArgsTemplate: &TimestampCompareArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return `${arg}`;\n        }\n    TimestampNotEqualsTemplate: &TimestampNotEqualsTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} != `;\n        }\n    TimestampNotEqualsArgsTemplate: &TimestampNotEqualsArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return `${arg}`;\n        }\n    TimestampGreaterThanTemplate: &TimestampGreaterThanTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} > `;\n        }\n    TimestampGreaterThanArgsTemplate: &TimestampGreaterThanArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return `${arg}`;\n        }\n    TimestampGreaterThanOrEqualTemplate: &TimestampGreaterThanOrEqualTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} >= `;\n        }\n    TimestampGreaterThanOrEqualArgsTemplate: &TimestampGreaterThanOrEqualArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return `${arg}`;\n        }\n    TimestampLessThanTemplate: &TimestampLessThanTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} < `;\n        }\n    TimestampLessThanArgsTemplate: &TimestampLessThanArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return `${arg}`;\n        }\n    TimestampLessThanOrEqualTemplate: &TimestampLessThanOrEqualTemplate !!js/function >\n        (lhs) => {\n            return `${lhs} <= `;\n        }\n    TimestampLessThanOrEqualArgsTemplate: &TimestampLessThanOrEqualArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return `${arg}`;\n        }\n    SymbolValueOfTemplate: &SymbolValueOfTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    SymbolValueOfArgsTemplate: &SymbolValueOfArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    SymbolInspectTemplate: &SymbolInspectTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    SymbolInspectArgsTemplate: &SymbolInspectArgsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    SymbolToStringTemplate: &SymbolToStringTemplate !!js/function >\n        (lhs) => {\n            return lhs;\n        }\n    SymbolToStringArgsTemplate: &SymbolToStringArgsTemplate !!js/function >\n        (lhs) => {\n            return '';\n        }\n    Decimal128ToStringTemplate: &Decimal128ToStringTemplate !!js/function >\n        (lhs) => {\n            return `(string) ${lhs}`;\n        }\n    Decimal128ToStringArgsTemplate: &Decimal128ToStringArgsTemplate !!js/function >\n        (lhs) => {\n            return '';\n        }\n\n    #############################################\n    #         Symbol Attributes/Methods         #\n    #                                           #\n    # These're variables or functions called on #\n    # symbols. Also called bson-utils.          #\n    #                                           #\n    # They are basically the same thing as      #\n    # object attributes/methods, but need to be #\n    # distinguished since they are separate     #\n    # namespaces that happen to have the same   #\n    # name which is v confusing.                #\n    #                                           #\n    # For example, ObjectId().toString() is an  #\n    # object method, while ObjectId.fromString  #\n    # is a symbol attribute. These are two      #\n    # separate ObjectId related namespaces that #\n    # don't overlap.                            #\n    #                                           #\n    #############################################\n    LongSymbolMaxTemplate: &LongSymbolMaxTemplate !!js/function >\n        () => {\n            return '\\\\PHP_INT_MAX';\n        }\n    LongSymbolMaxArgsTemplate: &LongSymbolMaxArgsTemplate null\n    LongSymbolMinTemplate: &LongSymbolMinTemplate !!js/function >\n        () => {\n            return '\\\\PHP_INT_MIN';\n        }\n    LongSymbolMinArgsTemplate: &LongSymbolMinArgsTemplate null\n    LongSymbolZeroTemplate: &LongSymbolZeroTemplate !!js/function >\n        () => {\n            return '0';\n        }\n    LongSymbolZeroArgsTemplate: &LongSymbolZeroArgsTemplate null\n    LongSymbolOneTemplate: &LongSymbolOneTemplate !!js/function >\n        () => {\n            return '1';\n        }\n    LongSymbolOneArgsTemplate: &LongSymbolOneArgsTemplate null\n    LongSymbolNegOneTemplate: &LongSymbolNegOneTemplate !!js/function >\n        () => {\n            return '-1';\n        }\n    LongSymbolNegOneArgsTemplate: &LongSymbolNegOneArgsTemplate null\n    LongSymbolFromBitsTemplate: &LongSymbolFromBitsTemplate !!js/function >\n        () => {\n            return '';\n        }\n    LongSymbolFromBitsArgsTemplate: &LongSymbolFromBitsArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return `(int) ${arg}`;\n        }\n    LongSymbolFromIntTemplate: &LongSymbolFromIntTemplate !!js/function >\n        () => {\n            return '';\n        }\n    LongSymbolFromIntArgsTemplate: &LongSymbolFromIntArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return arg;\n        }\n    LongSymbolFromNumberTemplate: &LongSymbolFromNumberTemplate !!js/function >\n        () => {\n            return '';\n        }\n    LongSymbolFromNumberArgsTemplate: &LongSymbolFromNumberArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return `(int) ${arg}`;\n        }\n    LongSymbolFromStringTemplate: &LongSymbolFromStringTemplate !!js/function >\n        () => {\n            return '';\n        }\n    LongSymbolFromStringArgsTemplate: &LongSymbolFromStringArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return `(int) ${arg}`;\n        }\n    Decimal128SymbolFromStringTemplate: &Decimal128SymbolFromStringTemplate !!js/function >\n        () => {\n            return 'new Decimal128';\n        }\n    Decimal128SymbolFromStringArgsTemplate: &Decimal128SymbolFromStringArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return `(${arg})`;\n        }\n    ObjectIdCreateFromHexStringTemplate: &ObjectIdCreateFromHexStringTemplate !!js/function >\n        () => {\n            return 'new ObjectId';\n        }\n    ObjectIdCreateFromHexStringArgsTemplate: &ObjectIdCreateFromHexStringArgsTemplate !!js/function >\n        (lhs, arg) => {\n            return `(${arg})`;\n        }\n    ObjectIdCreateFromTimeTemplate: &ObjectIdCreateFromTimeTemplate !!js/function >\n        () => {\n            return 'new ObjectId';\n        }\n    ObjectIdCreateFromTimeArgsTemplate: &ObjectIdCreateFromTimeArgsTemplate !!js/function >\n        (lhs, arg, isNumber) => {\n            if (!isNumber) {\n                return `(\\\\str_pad(\\\\bin2hex(\\\\pack('N', (${arg})->toDateTime()->getTimestamp())), 24, '0'))`;\n            }\n            return `(\\\\str_pad(\\\\bin2hex(\\\\pack('N', ${arg})), 24, '0'))`;\n        }\n    # non bson-specific would go here, but there aren't any atm.\n\n    #############################################\n    #                 Imports                   #\n    #                                           #\n    # Each type has a 'code' that is consistent #\n    # between languages. The import templates   #\n    # for each code generate the required       #\n    # statement for each type. No args.         #\n    #                                           #\n    # The ImportTemplate collects everything    #\n    # into one statement.                       #\n    #                                           #\n    #############################################\n    ImportTemplate: &ImportTemplate !!js/function >\n        (args) => {\n            let set = new Set(Object.values(args));\n            return [...set].sort().join('\\n');\n        }\n    DriverImportTemplate: &DriverImportTemplate !!js/function >\n        () => {\n            return `use MongoDB\\\\Client;`;\n        }\n    0ImportTemplate: &0ImportTemplate null\n    1ImportTemplate: &1ImportTemplate null\n    2ImportTemplate: &2ImportTemplate null\n    3ImportTemplate: &3ImportTemplate null\n    4ImportTemplate: &4ImportTemplate null\n    5ImportTemplate: &5ImportTemplate null\n    6ImportTemplate: &6ImportTemplate null\n    7ImportTemplate: &7ImportTemplate null\n    # Common internal Regexp\n    8ImportTemplate: &8ImportTemplate !!js/function >\n        () => {\n            return `use MongoDB\\\\BSON\\\\Regex;`;\n        }\n    9ImportTemplate: &9ImportTemplate null\n    10ImportTemplate: &10ImportTemplate null\n    11ImportTemplate: &11ImportTemplate null\n    12ImportTemplate: &12ImportTemplate null\n    # Code\n    100ImportTemplate: &100ImportTemplate !!js/function >\n        () => {\n            return `use MongoDB\\\\BSON\\\\Javascript;`;\n        }\n    # ObjectId\n    101ImportTemplate: &101ImportTemplate !!js/function >\n        () => {\n            return `use MongoDB\\\\BSON\\\\ObjectId;`;\n        }\n    # Binary\n    102ImportTemplate: &102ImportTemplate !!js/function >\n        () => {\n            return `use MongoDB\\\\BSON\\\\Binary;`;\n        }\n    # DBRef\n    103ImportTemplate: &103ImportTemplate null\n    104ImportTemplate: &104ImportTemplate null\n    105ImportTemplate: &105ImportTemplate null\n    # Int64\n    106ImportTemplate: &106ImportTemplate null\n    # MinKey\n    107ImportTemplate: &107ImportTemplate !!js/function >\n        () => {\n            return `use MongoDB\\\\BSON\\\\MinKey;`;\n        }\n    # MaxKey\n    108ImportTemplate: &108ImportTemplate !!js/function >\n        () => {\n            return `use MongoDB\\\\BSON\\\\MaxKey;`;\n        }\n    # Regex\n    109ImportTemplate: &109ImportTemplate !!js/function >\n        () => {\n            return `use MongoDB\\\\BSON\\\\Regex;`;\n        }\n    # Timestamp\n    110ImportTemplate: &110ImportTemplate !!js/function >\n        () => {\n            return `use MongoDB\\\\BSON\\\\Timestamp;`;\n        }\n    111ImportTemplate: &111ImportTemplate null\n    # Decimal128\n    112ImportTemplate: &112ImportTemplate !!js/function >\n        () => {\n            return `use MongoDB\\\\BSON\\\\Decimal128;`;\n        }\n    113ImportTemplate: &113ImportTemplate null\n    114ImportTemplate: &114ImportTemplate null\n    200ImportTemplate: &200ImportTemplate !!js/function >\n        () => {\n            return `use MongoDB\\\\BSON\\\\UTCDateTime;`;\n        }\n    201ImportTemplate: &201ImportTemplate null\n    300ImportTemplate: &300ImportTemplate null\n    301ImportTemplate: &301ImportTemplate null\n    302ImportTemplate: &302ImportTemplate null\n    303ImportTemplate: &303ImportTemplate null\n    304ImportTemplate: &304ImportTemplate null\n    305ImportTemplate: &305ImportTemplate null\n    306ImportTemplate: &306ImportTemplate null\n# Universal types\n# Everything inherits from StringType because we haven't implemented any of them.\nBasicTypes:\n    # Universal basic types\n    _bool: &BoolType\n        <<: *__type\n        id: \"_bool\"\n        code: 0\n        template: *BoolTypeTemplate\n    _integer: &IntegerType\n        <<: *__type\n        id: \"_integer\"\n        code: 1\n        template: *IntegerTypeTemplate\n    _long: &LongBasicType\n        <<: *__type\n        id: \"_long\"\n        code: 2\n        template: *LongBasicTypeTemplate\n    _decimal: &DecimalType\n        <<: *__type\n        id: \"_decimal\"\n        code: 3\n        template: *DecimalTypeTemplate\n    _hex: &HexType\n        <<: *__type\n        id: \"_hex\"\n        code: 4\n        template: *HexTypeTemplate\n    _octal: &OctalType\n        <<: *__type\n        id: \"_octal\"\n        code: 5\n        template: *OctalTypeTemplate\n    _numeric: &NumericType\n        <<: *__type\n        id: \"_numeric\"\n        code: 6\n        template: *NumericTypeTemplate\n    _string: &StringType\n        <<: *__type\n        id: \"_string\"\n        code: 7\n        template: *StringTypeTemplate\n    _regex: &RegexType\n        <<: *__type\n        id: \"_regex\"\n        code: 8\n        template: *RegexTypeTemplate\n    _array: &ArrayType\n        <<: *__type\n        id: \"_array\"\n        code: 9\n        template: *ArrayTypeTemplate\n        argsTemplate: *ArrayTypeArgsTemplate\n    _object: &ObjectType\n        <<: *__type\n        id: \"_object\"\n        code: 10\n        template: *ObjectTypeTemplate\n        argsTemplate: *ObjectTypeArgsTemplate\n    _null: &NullType\n        <<: *__type\n        id: \"_null\"\n        code: 11\n        template: *NullTypeTemplate\n    _undefined: &UndefinedType\n        <<: *__type\n        id: \"_undefined\"\n        code: 12\n        template: *UndefinedTypeTemplate\n\nSyntax:\n    equality:\n        template: *EqualitySyntaxTemplate\n    in:\n        template: *InSyntaxTemplate\n    and:\n        template: *AndSyntaxTemplate\n    or:\n        template: *OrSyntaxTemplate\n    not:\n        template: *NotSyntaxTemplate\n    unary:\n        template: *UnarySyntaxTemplate\n    binary:\n        template: *BinarySyntaxTemplate\n    parens:\n        template: *ParensSyntaxTemplate\n    eos:\n        template: *EosSyntaxTemplate\n    eof:\n        template: *EofSyntaxTemplate\n    # The new template takes in expr, and an optional skip argument and optional\n    # id argument. The skip argument is a boolean that if true then doesn't add\n    # new. The code argument is the symbol code being called. The template will check\n    # if it is an exception, i.e. a type that is a constructor but may not use new.\n    new:\n        template: *NewSyntaxTemplate\n    # The regex flags that change symbols between languages can be defined here.\n    # Flags that aren't defined can be left blank and will be ignored.\n    regexFlags: *RegexFlags\n    bsonRegexFlags: *BSONRegexFlags\n    driver: *DriverTemplate\nImports:\n    import:\n        template: *ImportTemplate\n    driver:\n        template: *DriverImportTemplate\n    0:\n        template: *0ImportTemplate\n    1:\n        template: *1ImportTemplate\n    2:\n        template: *2ImportTemplate\n    3:\n        template: *3ImportTemplate\n    4:\n        template: *4ImportTemplate\n    5:\n        template: *5ImportTemplate\n    6:\n        template: *6ImportTemplate\n    7:\n        template: *7ImportTemplate\n    8:\n        template: *8ImportTemplate\n    9:\n        template: *9ImportTemplate\n    10:\n        template: *10ImportTemplate\n    11:\n        template: *11ImportTemplate\n    12:\n        template: *12ImportTemplate\n    100:\n        template: *100ImportTemplate\n    101:\n        template: *101ImportTemplate\n    102:\n        template: *102ImportTemplate\n    103:\n        template: *103ImportTemplate\n    104:\n        template: *104ImportTemplate\n    105:\n        template: *105ImportTemplate\n    106:\n        template: *106ImportTemplate\n    107:\n        template: *107ImportTemplate\n    108:\n        template: *108ImportTemplate\n    109:\n        template: *109ImportTemplate\n    110:\n        template: *110ImportTemplate\n    111:\n        template: *111ImportTemplate\n    112:\n        template: *112ImportTemplate\n    113:\n        template: *113ImportTemplate\n    114:\n        template: *114ImportTemplate\n    200:\n        template: *200ImportTemplate\n    201:\n        template: *201ImportTemplate\n    300:\n        template: *300ImportTemplate\n    301:\n        template: *301ImportTemplate\n    302:\n        template: *302ImportTemplate\n    303:\n        template: *303ImportTemplate\n    304:\n        template: *304ImportTemplate\n    305:\n        template: *305ImportTemplate\n    306:\n        template: *306ImportTemplate\nBsonTypes:\n    Code: &CodeType\n        <<: *__type\n        id: \"Code\"\n        code: 100\n        type: *ObjectType\n        attr:\n            code:\n                callable: *var\n                args: null\n                attr: null\n                id: \"code\"\n                type: *StringType\n                template: *CodeCodeTemplate\n                argsTemplate: *CodeCodeArgsTemplate\n            scope:\n                callable: *var\n                args: null\n                attr: null\n                id: \"scope\"\n                type: *StringType\n                template: *CodeScopeTemplate\n                argsTemplate: *CodeScopeArgsTemplate\n    ObjectId: &ObjectIdType\n        <<: *__type\n        id: \"ObjectId\"\n        code: 101\n        type: *ObjectType\n        attr:\n            toHexString:\n                <<: *__func\n                id: \"toHexString\"\n                type: *StringType\n            toString:\n                <<: *__func\n                type: *StringType\n                template: *ObjectIdToStringTemplate\n                argsTemplate: *ObjectIdToStringArgsTemplate\n            equals:\n                <<: *__func\n                args:\n                    - [ \"ObjectId\" ]\n                type: *BoolType\n                template: *ObjectIdEqualsTemplate\n                argsTemplate: *ObjectIdEqualsArgsTemplate\n            getTimestamp:\n                <<: *__func\n                type: *IntegerType\n                template: *ObjectIdGetTimestampTemplate\n                argsTemplate: *ObjectIdGetTimestampArgsTemplate\n    Binary: &BinaryType\n        <<: *__type\n        id: \"Binary\"\n        code: 102\n        type: *ObjectType\n        attr:\n            value:\n                <<: *__func\n                id: \"value\"\n                type: *StringType\n                template: *BinaryValueTemplate\n                argsTemplate: *BinaryValueArgsTemplate\n            length:\n                <<: *__func\n                id: \"length\"\n                type: *IntegerType\n                template: *BinaryLengthTemplate\n                argsTemplate: *BinaryLengthArgsTemplate\n            toString:\n                <<: *__func\n                id: \"toString\"\n                type: *StringType\n                template: *BinaryToStringTemplate\n                argsTemplate: *BinaryToStringArgsTemplate\n            sub_type:\n                callable: *var\n                args: null\n                attr: null\n                id: \"subtype\"\n                type: *IntegerType\n                template: *BinarySubtypeTemplate\n                argsTemplate: *BinarySubtypeArgsTemplate\n    DBRef: &DBRefType\n        <<: *__type\n        id: \"DBRef\"\n        code: 103\n        type: *ObjectType\n        attr:\n            db:\n                callable: *var\n                args: null\n                attr: null\n                id: \"db\"\n                type: *StringType\n                template: *DBRefGetDBTemplate\n                argsTemplate: *DBRefGetDBArgsTemplate\n            namespace:\n                callable: *var\n                args: null\n                attr: null\n                id: \"namespace\"\n                type: *StringType\n                template: *DBRefGetCollectionTemplate\n                argsTemplate: *DBRefGetCollectionArgsTemplate\n            oid:\n                callable: *var\n                args: null\n                attr: null\n                id: \"oid\"\n                type: *StringType\n                template: *DBRefGetIdTemplate\n                argsTemplate: *DBRefGetIdArgsTemplate\n    Double: &DoubleType\n        <<: *__type\n        id: \"Double\"\n        code: 104\n        type: *ObjectType\n        attr: {}\n    Int32: &Int32Type\n        <<: *__type\n        id: \"Int32\"\n        code: 105\n        type: *ObjectType\n        attr: {}\n    Long: &LongType\n        <<: *__type\n        id: \"Long\"\n        code: 106\n        type: *ObjectType\n        attr:\n            toString:\n                <<: *__func\n                id: \"LongtoString\" # Needs process method\n                args:\n                    - [ *IntegerType, null ]\n                type: *StringType\n                template: *LongToStringTemplate\n                argsTemplate: *LongToStringArgsTemplate\n            equals:\n                <<: *__func\n                id: \"equals\"\n                args:\n                    - [ \"Long\" ]\n                type: *BoolType\n                template: *LongEqualsTemplate\n                argsTemplate: *LongEqualsArgsTemplate\n            toInt:\n                <<: *__func\n                id: \"toInt\"\n                type: *IntegerType\n                template: *LongToIntTemplate\n                argsTemplate: *LongToIntArgsTemplate\n            toNumber:\n                <<: *__func\n                id: \"toNumber\"\n                type: *DecimalType\n                template: *LongToNumberTemplate\n                argsTemplate: *LongToNumberArgsTemplate\n            compare:\n                <<: *__func\n                id: \"compare\"\n                args:\n                    - [ \"Long\" ]\n                type: *StringType\n                template: *LongCompareTemplate\n                argsTemplate: *LongCompareArgsTemplate\n            isOdd:\n                <<: *__func\n                id: \"isOdd\"\n                type: *BoolType\n                template: *LongIsOddTemplate\n                argsTemplate: *LongIsOddArgsTemplate\n            isZero:\n                <<: *__func\n                id: \"isZero\"\n                type: *BoolType\n                template: *LongIsZeroTemplate\n                argsTemplate: *LongIsZeroArgsTemplate\n            isNegative:\n                <<: *__func\n                id: \"isNegative\"\n                type: *BoolType\n                template: *LongIsNegativeTemplate\n                argsTemplate: *LongIsNegativeArgsTemplate\n            negate:\n                <<: *__func\n                id: \"negate\"\n                type: \"Long\"\n                template: *LongNegateTemplate\n                argsTemplate: *LongNegateArgsTemplate\n            not:\n                <<: *__func\n                id: \"not\"\n                type: \"Long\"\n                template: *LongNotTemplate\n                argsTemplate: *LongNotArgsTemplate\n            notEquals:\n                <<: *__func\n                id: \"notEquals\"\n                args:\n                    - [ \"Long\" ]\n                type: *BoolType\n                template: *LongNotEqualsTemplate\n                argsTemplate: *LongNotEqualsArgsTemplate\n            greaterThan:\n                <<: *__func\n                id: \"greaterThan\"\n                args:\n                    - [ \"Long\" ]\n                type: *BoolType\n                template: *LongGreaterThanTemplate\n                argsTemplate: *LongGreaterThanArgsTemplate\n            greaterThanOrEqual:\n                <<: *__func\n                id: \"greaterThanOrEqual\"\n                args:\n                    - [ \"Long\" ]\n                type: *BoolType\n                template: *LongGreaterThanOrEqualTemplate\n                argsTemplate: *LongGreaterThanOrEqualArgsTemplate\n            lessThan:\n                <<: *__func\n                id: \"lessThan\"\n                args:\n                    - [ \"Long\" ]\n                type: *BoolType\n                template: *LongLessThanTemplate\n                argsTemplate: *LongLessThanArgsTemplate\n            lessThanOrEqual:\n                <<: *__func\n                id: \"lessThanOrEqual\"\n                args:\n                    - [ \"Long\" ]\n                type: *BoolType\n                template: *LongLessThanOrEqualTemplate\n                argsTemplate: *LongLessThanOrEqualArgsTemplate\n            add:\n                <<: *__func\n                id: \"add\"\n                args:\n                    - [ \"Long\" ]\n                type: \"Long\"\n                template: *LongAddTemplate\n                argsTemplate: *LongAddArgsTemplate\n            subtract:\n                <<: *__func\n                id: \"subtract\"\n                args:\n                    - [ \"Long\" ]\n                type: \"Long\"\n                template: *LongSubtractTemplate\n                argsTemplate: *LongSubtractArgsTemplate\n            multiply:\n                <<: *__func\n                id: \"multiply\"\n                args:\n                    - [ \"Long\" ]\n                type: \"Long\"\n                template: *LongMultiplyTemplate\n                argsTemplate: *LongMultiplyArgsTemplate\n            div:\n                <<: *__func\n                id: \"div\"\n                args:\n                    - [ \"Long\" ]\n                type: \"Long\"\n                template: *LongDivTemplate\n                argsTemplate: *LongDivArgsTemplate\n            modulo:\n                <<: *__func\n                id: \"modulo\"\n                args:\n                    - [ \"Long\" ]\n                type: \"Long\"\n                template: *LongModuloTemplate\n                argsTemplate: *LongModuloArgsTemplate\n            and:\n                <<: *__func\n                id: \"and\"\n                args:\n                    - [ \"Long\" ]\n                type: \"Long\"\n                template: *LongAndTemplate\n                argsTemplate: *LongAndArgsTemplate\n            or:\n                <<: *__func\n                id: \"or\"\n                args:\n                    - [ \"Long\" ]\n                type: \"Long\"\n                template: *LongOrTemplate\n                argsTemplate: *LongOrArgsTemplate\n            xor:\n                <<: *__func\n                id: \"xor\"\n                args:\n                    - [ \"Long\" ]\n                type: \"Long\"\n                template: *LongXorTemplate\n                argsTemplate: *LongXorArgsTemplate\n            shiftLeft:\n                <<: *__func\n                id: \"shiftLeft\"\n                args:\n                    - [ *IntegerType ]\n                type: \"Long\"\n                template: *LongShiftLeftTemplate\n                argsTemplate: *LongShiftLeftArgsTemplate\n            shiftRight:\n                <<: *__func\n                id: \"shiftRight\"\n                args:\n                    - [ *IntegerType ]\n                type: \"Long\"\n                template: *LongShiftRightTemplate\n                argsTemplate: *LongShiftRightArgsTemplate\n    MinKeyType: &MinKeyType\n        <<: *__type\n        id: \"MinKey\"\n        code: 107\n        type: *ObjectType\n    MaxKeyType: &MaxKeyType\n        <<: *__type\n        id: \"MaxKey\"\n        code: 108\n        type: *ObjectType\n    BSONRegExpType: &BSONRegExpType\n        <<: *__type\n        id: \"BSONRegExp\"\n        code: 109\n        type: *ObjectType #TODO: add pattern + options\n    Timestamp: &TimestampType\n        <<: *__type\n        id: \"Timestamp\"\n        code: 110\n        type: *ObjectType\n        attr:\n            toString:\n                <<: *__func\n                id: \"toString\"\n                type: *StringType\n                template: *TimestampToStringTemplate\n                argsTemplate: *TimestampToStringArgsTemplate\n            equals:\n                <<: *__func\n                id: \"equals\"\n                args:\n                    - [ \"Timestamp\" ]\n                type: *BoolType\n                template: *TimestampEqualsTemplate\n                argsTemplate: *TimestampEqualsArgsTemplate\n            getLowBits:\n                <<: *__func\n                id: \"getLowBits\"\n                type: *IntegerType\n                template: *TimestampGetLowBitsTemplate\n                argsTemplate: *TimestampGetLowBitsArgsTemplate\n            getHighBits:\n                <<: *__func\n                id: \"getHighBits\"\n                type: *IntegerType\n                template: *TimestampGetHighBitsTemplate\n                argsTemplate: *TimestampGetHighBitsArgsTemplate\n            compare:\n                <<: *__func\n                id: \"compare\"\n                args:\n                    - [ \"Timestamp\" ]\n                type: *StringType\n                template: *TimestampCompareTemplate\n                argsTemplate: *TimestampCompareArgsTemplate\n            notEquals:\n                <<: *__func\n                id: \"notEquals\"\n                args:\n                    - [ \"Timestamp\" ]\n                type: *BoolType\n                template: *TimestampNotEqualsTemplate\n                argsTemplate: *TimestampNotEqualsArgsTemplate\n            greaterThan:\n                <<: *__func\n                id: \"greaterThan\"\n                args:\n                    - [ \"Timestamp\" ]\n                type: *BoolType\n                template: *TimestampGreaterThanTemplate\n                argsTemplate: *TimestampGreaterThanArgsTemplate\n            greaterThanOrEqual:\n                <<: *__func\n                id: \"greaterThanOrEqual\"\n                args:\n                    - [ \"Timestamp\" ]\n                type: *BoolType\n                template: *TimestampGreaterThanOrEqualTemplate\n                argsTemplate: *TimestampGreaterThanOrEqualArgsTemplate\n            lessThan:\n                <<: *__func\n                id: \"lessThan\"\n                args:\n                    - [ \"Timestamp\" ]\n                type: *BoolType\n                template: *TimestampLessThanTemplate\n                argsTemplate: *TimestampLessThanArgsTemplate\n            lessThanOrEqual:\n                <<: *__func\n                id: \"lessThanOrEqual\"\n                args:\n                    - [ \"Timestamp\" ]\n                type: *BoolType\n                template: *TimestampLessThanOrEqualTemplate\n                argsTemplate: *TimestampLessThanOrEqualArgsTemplate\n    BSONSymbol: &SymbolType\n        <<: *__type\n        id: \"BSONSymbol\"\n        code: 111\n        type: *ObjectType\n        attr:\n            valueOf:\n                <<: *__func\n                id: \"valueOf\"\n                type: *StringType\n                template: *SymbolValueOfTemplate\n                argsTemplate: *SymbolValueOfArgsTemplate\n            toString:\n                <<: *__func\n                id: \"toString\"\n                type: *StringType\n                template: *SymbolToStringTemplate\n                argsTemplate: *SymbolToStringArgsTemplate\n            inspect:\n                <<: *__func\n                id: \"inspect\"\n                type: *StringType\n                template: *SymbolInspectTemplate\n                argsTemplate: *SymbolInspectArgsTemplate\n    Decimal128: &Decimal128Type\n        <<: *__type\n        id: \"Decimal128\"\n        code: 112\n        type: *ObjectType\n        attr:\n            toString:\n                <<: *__func\n                id: \"toString\"\n                type: *StringType\n                template: *Decimal128ToStringTemplate\n                argsTemplate: *Decimal128ToStringArgsTemplate\nNativeTypes:\n    Date: &DateType\n        <<: *__type\n        id: \"Date\"\n        code: 200\n        type: *ObjectType\n        attr: {} # TODO: no built-in date methods added yet\nBsonSymbols:\n    Code: &CodeSymbol\n        id: \"CodeFromJS\"\n        code: 100\n        callable: *constructor\n        args:\n            - [ *StringType ]\n            - [ *ObjectType, null ]\n        type: *CodeType\n        attr: {}\n        template: *CodeSymbolTemplate\n        argsTemplate: *CodeSymbolArgsTemplate\n    ObjectId: &ObjectIdSymbol\n        id: \"ObjectId\"\n        code: 101\n        callable: *constructor\n        args:\n            - [ *StringType, *NumericType, null ]\n        type: *ObjectIdType\n        attr:\n            createFromHexString:\n                <<: *__func\n                id: \"createFromHexString\"\n                args:\n                    - [ *StringType ]\n                type: *ObjectIdType\n                template: *ObjectIdCreateFromHexStringTemplate\n                argsTemplate: *ObjectIdCreateFromHexStringArgsTemplate\n            createFromTime:\n                <<: *__func\n                id: \"ObjectIdCreateFromTime\"\n                args:\n                    - [ *NumericType ]\n                type: *ObjectIdType\n                template: *ObjectIdCreateFromTimeTemplate\n                argsTemplate: *ObjectIdCreateFromTimeArgsTemplate\n            isValid:\n                <<: *__func\n                id: \"isValid\"\n                args:\n                    - [ *StringType ]\n                type: *BoolType\n                template: *ObjectIdIsValidTemplate\n                argsTemplate: *ObjectIdIsValidArgsTemplate\n        template: *ObjectIdSymbolTemplate\n        argsTemplate: *ObjectIdSymbolArgsTemplate\n    Binary: &BinarySymbol\n        id: \"Binary\"\n        code: 102\n        callable: *constructor\n        args:\n            - [ *StringType, *NumericType, *ObjectType ]\n            - [ *NumericType, null ]\n        type: *BinaryType\n        attr:\n            SUBTYPE_DEFAULT:\n                id: \"SUBTYPE_DEFAULT\"\n                callable: *var\n                args: null\n                type: *IntegerType\n                template: *BinarySymbolSubtypeDefaultTemplate\n            SUBTYPE_FUNCTION:\n                id: \"SUBTYPE_FUNCTION\"\n                callable: *var\n                args: null\n                type: *IntegerType\n                template: *BinarySymbolSubtypeFunctionTemplate\n            SUBTYPE_BYTE_ARRAY:\n                id: \"SUBTYPE_BYTE_ARRAY\"\n                callable: *var\n                args: null\n                type: *IntegerType\n                template: *BinarySymbolSubtypeByteArrayTemplate\n            SUBTYPE_UUID_OLD:\n                id: \"SUBTYPE_UUID_OLD\"\n                callable: *var\n                args: null\n                type: *IntegerType\n                template: *BinarySymbolSubtypeUuidOldTemplate\n            SUBTYPE_UUID:\n                id: \"SUBTYPE_UUID\"\n                callable: *var\n                args: null\n                type: *IntegerType\n                template: *BinarySymbolSubtypeUuidTemplate\n            SUBTYPE_MD5:\n                id: \"SUBTYPE_MD5\"\n                callable: *var\n                args: null\n                type: *IntegerType\n                template: *BinarySymbolSubtypeMd5Template\n            SUBTYPE_USER_DEFINED:\n                id: \"SUBTYPE_USER_DEFINED\"\n                callable: *var\n                args: null\n                type: *IntegerType\n                template: *BinarySymbolSubtypeUserDefinedTemplate\n        template: *BinarySymbolTemplate\n        argsTemplate: *BinarySymbolArgsTemplate\n    DBRef:\n        id: \"DBRef\"\n        code: 103\n        callable: *constructor\n        args:\n            - [ *StringType ]\n            - [ *ObjectIdType ]\n            - [ *StringType, null ]\n        type: *DBRefType\n        attr: {}\n        template: *DBRefSymbolTemplate\n        argsTemplate: *DBRefSymbolArgsTemplate\n    Double:\n        id: \"Double\"\n        code: 104\n        callable: *constructor\n        args:\n            - [ *NumericType, *StringType ]\n        type: *DoubleType\n        attr: {}\n        template: *DoubleSymbolTemplate\n        argsTemplate: *DoubleSymbolArgsTemplate\n    Int32:\n        id: \"Int32\"\n        code: 105\n        callable: *constructor\n        args:\n            - [ *NumericType, *StringType ]\n        type: *Int32Type\n        attr: {}\n        template: *Int32SymbolTemplate\n        argsTemplate: *Int32SymbolArgsTemplate\n    Long:\n        id: \"Long\"\n        code: 106\n        callable: *constructor\n        args:\n            - [ *IntegerType ]\n            - [ *IntegerType ]\n        type: *LongType\n        attr:\n            MAX_VALUE:\n                id: \"MAX_VALUE\"\n                callable: *var\n                args: null\n                type: *LongType\n                attr: {}\n                template: *LongSymbolMaxTemplate\n                argsTemplate: *LongSymbolMaxArgsTemplate\n            MIN_VALUE:\n                id: \"MIN_VALUE\"\n                callable: *var\n                args: null\n                type: *LongType\n                attr: {}\n                template: *LongSymbolMinTemplate\n                argsTemplate: *LongSymbolMinArgsTemplate\n            ZERO:\n                id: \"ZERO\"\n                callable: *var\n                args: null\n                type: *LongType\n                attr: {}\n                template: *LongSymbolZeroTemplate\n                argsTemplate: *LongSymbolZeroArgsTemplate\n            ONE:\n                id: \"ONE\"\n                callable: *var\n                args: null\n                type: *LongType\n                attr: {}\n                template: *LongSymbolOneTemplate\n                argsTemplate: *LongSymbolOneArgsTemplate\n            NEG_ONE:\n                id: \"NEG_ONE\"\n                callable: *var\n                args: null\n                type: *LongType\n                attr: {}\n                template: *LongSymbolNegOneTemplate\n                argsTemplate: *LongSymbolNegOneArgsTemplate\n            fromBits:\n                id: \"LongfromBits\" # Needs process method\n                callable: *func\n                args:\n                    - [ *IntegerType ]\n                    - [ *IntegerType ]\n                type: *LongType\n                attr: {}\n                template: *LongSymbolFromBitsTemplate\n                argsTemplate: *LongSymbolFromBitsArgsTemplate\n            fromInt:\n                id: \"fromInt\"\n                callable: *func\n                args:\n                    - [ *IntegerType ]\n                type: *LongType\n                attr: {}\n                template: *LongSymbolFromIntTemplate\n                argsTemplate: *LongSymbolFromIntArgsTemplate\n            fromNumber:\n                id: \"fromNumber\"\n                callable: *func\n                args:\n                    - [ *NumericType ]\n                type: *LongType\n                attr: {}\n                template: *LongSymbolFromNumberTemplate\n                argsTemplate: *LongSymbolFromNumberArgsTemplate\n            fromString:\n                id: \"fromString\"\n                callable: *func\n                args:\n                    - [ *StringType ]\n                    - [ *IntegerType, null ]\n                type: *LongType\n                attr: {}\n                template: *LongSymbolFromStringTemplate\n                argsTemplate: *LongSymbolFromStringArgsTemplate\n        template: *LongSymbolTemplate\n        argsTemplate: *LongSymbolArgsTemplate\n    MinKey:\n        id: \"MinKey\"\n        code: 107\n        callable: *constructor\n        args: []\n        type: *MinKeyType\n        attr: {}\n        template: *MinKeySymbolTemplate\n        argsTemplate: *MinKeySymbolArgsTemplate\n    MaxKey:\n        id: \"MaxKey\"\n        code: 108\n        callable: *constructor\n        args: []\n        type: *MaxKeyType\n        attr: {}\n        template: *MaxKeySymbolTemplate\n        argsTemplate: *MaxKeySymbolArgsTemplate\n    Timestamp:\n        id: \"Timestamp\"\n        code: 110\n        callable: *constructor\n        args:\n            - [ *IntegerType ]\n            - [ *IntegerType ]\n        type: *TimestampType\n        attr: {} #TODO: add fromInt, fromNumber, fromBits, fromString\n        template: *TimestampSymbolTemplate\n        argsTemplate: *TimestampSymbolArgsTemplate\n    BSONSymbol:\n        id: \"BSONSymbol\"\n        code: 111\n        callable: *constructor\n        args:\n            - [ *StringType ]\n        type: *SymbolType\n        attr: {}\n        template: *SymbolSymbolTemplate\n        argsTemplate: *SymbolSymbolArgsTemplate\n    BSONRegExp:\n        id: \"BSONRegExp\"\n        code: 109\n        callable: *constructor\n        args:\n            - [ *StringType ]\n            - [ *StringType, null ]\n        type: *BSONRegExpType\n        attr: {}\n        template: *BSONRegExpSymbolTemplate\n        argsTemplate: *BSONRegExpSymbolArgsTemplate\n    Decimal128:\n        id: \"Decimal128\"\n        code: 112\n        callable: *constructor\n        args:\n            - [ *ObjectType ]\n        type: *Decimal128Type\n        attr:\n            fromString:\n                id: \"fromString\"\n                callable: *func\n                args:\n                    - [ *StringType ]\n                type: *Decimal128Type\n                attr: {}\n                template: *Decimal128SymbolFromStringTemplate\n                argsTemplate: *Decimal128SymbolFromStringArgsTemplate\n        template: *Decimal128SymbolTemplate\n        argsTemplate: *Decimal128SymbolArgsTemplate\n\nNativeSymbols:\n    Number:\n        id: \"Number\"\n        code: 2\n        callable: *constructor\n        args:\n            - [ *IntegerType, *StringType ]\n        type: *NumericType\n        attr: {} # TODO: no built-in number funcs added yet\n        template: *NumberSymbolTemplate\n        argsTemplate: *NumberSymbolArgsTemplate\n    Date: # Needs process method\n        id: \"Date\"\n        code: 200\n        callable: *constructor\n        args:\n            - [ *StringType, *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n            - [ *NumericType, null ]\n        type: *DateType\n        attr: # TODO: add more date funcs?\n            now:\n                id: \"now\"\n                code: 200.1\n                callable: *func\n                args: []\n                type: *DateType\n                attr: {}\n                template: *DateSymbolNowTemplate\n                argsTemplate: *DateSymbolNowArgsTemplate\n        template: *DateSymbolTemplate\n        argsTemplate: *DateSymbolArgsTemplate\n    RegExp: # Needs process method\n        id: \"RegExp\"\n        code: 8\n        callable: *constructor\n        args:\n            - [ *StringType, *RegexType ]\n            - [ *StringType, null ]\n        type: *RegexType\n        attr: {}\n        template: *RegExpSymbolTemplate\n        argsTemplate: *RegExpSymbolArgsTemplate\n";
