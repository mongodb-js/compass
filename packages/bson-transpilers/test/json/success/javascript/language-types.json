{
  "tests": {
    "math": [
      {
        "description": "simple addition",
        "javascript": "2+5",
        "python": "2+5",
        "java": "new java.lang.Long(\"2\")+new java.lang.Long(\"5\")",
        "csharp": "2+5",
        "shell": "2+5"
      },
      {
        "description": "multiplication and division",
        "javascript": "2+(4*36)/3",
        "python": "2+(4*36)/3",
        "java": "new java.lang.Long(\"2\")+(new java.lang.Long(\"4\")*new java.lang.Long(\"36\"))/new java.lang.Long(\"3\")",
        "csharp": "2+(4*36)/3",
        "shell": "2+(4*36)/3"
      }
    ],
    "Number": [
      {
        "description": "Number with number arg",
        "javascript": "new Number(2)",
        "python": "int(2)",
        "java": "new java.lang.Long(\"2\")",
        "csharp": "new int(2)",
        "shell": "new Number(2)"
      },
      {
        "description": "Number with valid string arg",
        "javascript": "new Number('2')",
        "python": "int('2')",
        "java": "new java.lang.Long(\"2\")",
        "csharp": "new int(2)",
        "shell": "Number('2')"
      }
    ],
    "literals": [
      {
        "description": "Integer 2",
        "javascript": "2",
        "python": "2",
        "java": "new java.lang.Long(\"2\")",
        "csharp": "2",
        "shell": "2"
      },
      {
        "description": "larger than int32",
        "javascript": "429496729601",
        "python": "429496729601",
        "java": "new java.lang.Long(\"429496729601\")",
        "csharp": "429496729601",
        "shell": "429496729601"
      },
      {
        "description": "Decimal 2.001",
        "javascript": "2.001",
        "python": "2.001",
        "java": "new java.lang.Double(2.001)",
        "csharp": "2.001",
        "shell": "2.001"
      },
      {
        "description": "Hex number caps",
        "javascript": "0X123ABC",
        "python": "0X123ABC",
        "java": "0X123ABC",
        "csharp": "0X123ABC",
        "shell": "0X123ABC"
      },
      {
        "description": "Hex number lower",
        "javascript": "0x123abc",
        "python": "0x123abc",
        "java": "0x123abc",
        "csharp": "0x123abc",
        "shell": "0x123abc"
      },
      {
        "description": "Octal 0-prefix number",
        "javascript": "01234567",
        "python": "0o1234567",
        "java": "01234567",
        "csharp": "342391",
        "shell": "01234567"
      },
      {
        "description": "Octal 00-prefix number",
        "javascript": "001234567",
        "python": "0o1234567",
        "java": "01234567",
        "csharp": "342391",
        "shell": "0o1234567"
      },
      {
        "description": "Octal 0o-prefix number",
        "javascript": "0o1234567",
        "python": "0o1234567",
        "java": "01234567",
        "csharp": "342391",
        "shell": "0o1234567"
      },
      {
        "description": "Octal 0O-prefix number",
        "javascript": "0o1234567",
        "python": "0o1234567",
        "java": "01234567",
        "csharp": "342391",
        "shell": "0o1234567"
      },
      {
        "description": "Single-quote string",
        "javascript": "'string'",
        "python": "'string'",
        "java": "\"string\"",
        "csharp": "\"string\"",
        "shell": "'string'"
      },
      {
        "description": "Double-quote string",
        "javascript": "\"string\"",
        "python": "'string'",
        "java": "\"string\"",
        "csharp": "\"string\"",
        "shell": "\"string\""
      },
      {
        "description": "null",
        "javascript": "null",
        "python": "None",
        "java": "null",
        "csharp": "BsonNull.Value",
        "shell": "null"
      },
      {
        "description": "undefined",
        "javascript": "undefined",
        "python": "None",
        "java": "null",
        "csharp": "BsonUndefined.Value",
        "shell": "undefined"
      },
      {
        "description": "true",
        "javascript": "true",
        "python": "True",
        "java": "true",
        "csharp": "true",
        "shell": "true"
      },
      {
        "description": "false",
        "javascript": "false",
        "python": "False",
        "java": "false",
        "csharp": "false",
        "shell": "false"
      }
    ],
    "Date": [
      {
        "description": "new Date with ISO String",
        "javascript": "new Date('December 17, 1995 03:24:00Z')",
        "python": "datetime.datetime(1995, 12, 17, 3, 24, 0, tzinfo=datetime.timezone.utc)",
        "java": "new java.util.Date(new java.lang.Long(\"819170640000\"))",
        "csharp": "new DateTime(1995, 12, 17, 3, 24, 0)",
        "shell": "new Date('December 17, 1995 03:24:00Z')"
      },
      {
        "description": "new Date with UTC number",
        "javascript": "new Date(819167040000)",
        "python": "datetime.datetime(1995, 12, 17, 2, 24, 0, tzinfo=datetime.timezone.utc)",
        "java": "new java.util.Date(new java.lang.Long(\"819167040000\"))",
        "csharp": "new DateTime(1995, 12, 17, 2, 24, 0)",
        "shell": "new Date(819167040000)"
      },
      {
        "description": "Current date",
        "javascript": "new Date()",
        "python": "datetime.datetime.utcnow().date()",
        "java": "new java.util.Date()",
        "csharp": "DateTime.Now",
        "shell": "new Date()"
      },
      {
        "description": "Date from year, month and day",
        "javascript": "new Date(1995, 11, 17)",
        "python": "datetime.datetime(1995, 12, 17, 0, 0, 0, tzinfo=datetime.timezone.utc)",
        "java": "new java.util.Date(new java.lang.Long(\"819158400000\"))",
        "csharp": "new DateTime(1995, 12, 17, 0, 0, 0)",
        "shell": "new Date(1995, 11, 17)"
      },
      {
        "description": "Date from year, month, day, hour, min and sec",
        "javascript": "new Date(1995, 11, 17, 3, 24, 0)",
        "python": "datetime.datetime(1995, 12, 17, 3, 24, 0, tzinfo=datetime.timezone.utc)",
        "java": "new java.util.Date(new java.lang.Long(\"819170640000\"))",
        "csharp": "new DateTime(1995, 12, 17, 3, 24, 0)",
        "shell": "new Date(1995, 11, 17, 3, 24, 0)"
      },
      {
        "description": "Date string with ISO String",
        "javascript": "Date('December 17, 1995 03:24:00Z')",
        "python": "datetime.datetime(1995, 12, 17, 3, 24, 0, tzinfo=datetime.timezone.utc).strftime('%a %b %d %Y %H:%M:%S %Z')",
        "java": "new java.util.Date(new java.lang.Long(\"819170640000\")).toString()",
        "csharp": "new DateTime(1995, 12, 17, 3, 24, 0).ToString()",
        "shell": "Date('December 17, 1995 03:24:00Z')"
      },
      {
        "description": "Date string with UTC number",
        "javascript": "Date(819167040000)",
        "python": "datetime.datetime(1995, 12, 17, 2, 24, 0, tzinfo=datetime.timezone.utc).strftime('%a %b %d %Y %H:%M:%S %Z')",
        "java": "new java.util.Date(new java.lang.Long(\"819167040000\")).toString()",
        "csharp": "new DateTime(1995, 12, 17, 2, 24, 0).ToString()",
        "shell": "Date(819167040000)"
      },
      {
        "description": "Current date string",
        "javascript": "Date()",
        "python": "datetime.datetime.utcnow().date().strftime('%a %b %d %Y %H:%M:%S %Z')",
        "java": "new java.util.Date().toString()",
        "csharp": "DateTime.Now.ToString()",
        "shell": "Date()"
      },
      {
        "description": "Date string from year, month and day",
        "javascript": "Date(1995, 11, 17)",
        "python": "datetime.datetime(1995, 12, 17, 0, 0, 0, tzinfo=datetime.timezone.utc).strftime('%a %b %d %Y %H:%M:%S %Z')",
        "java": "new java.util.Date(new java.lang.Long(\"819158400000\")).toString()",
        "csharp": "new DateTime(1995, 12, 17, 0, 0, 0).ToString()",
        "shell": "Date(1995, 11, 17)"
      },
      {
        "description": "Date string from year, month, day, hour, min and sec",
        "javascript": "Date(1995, 11, 17, 3, 24, 0)",
        "python": "datetime.datetime(1995, 12, 17, 3, 24, 0, tzinfo=datetime.timezone.utc).strftime('%a %b %d %Y %H:%M:%S %Z')",
        "java": "new java.util.Date(new java.lang.Long(\"819170640000\")).toString()",
        "csharp": "new DateTime(1995, 12, 17, 3, 24, 0).ToString()",
        "shell": "Date(1995, 11, 17, 3, 24, 0)"
      },
      {
        "description": "Current time",
        "javascript": "Date.now()",
        "python": "datetime.datetime.utcnow()",
        "java": "new java.util.Date()",
        "csharp": "DateTime.Now",
        "shell": "Date.now()"
      }
    ],
    "RegExp": [
      {
        "description": "empty RegExp",
        "javascript": "RegExp('')",
        "python": "re.compile(r\"(?:)\")",
        "java": "Pattern.compile(\"(?:)\")",
        "csharp": "new Regex(@\"(?:)\")",
        "shell": "RegExp('')"
      },
      {
        "description": "RegExp without options",
        "javascript": "RegExp('abc')",
        "python": "re.compile(r\"abc\")",
        "java": "Pattern.compile(\"abc\")",
        "csharp": "new Regex(@\"abc\")",
        "shell": "RegExp('abc')"
      },
      {
        "description": "regex object with im flags as args",
        "javascript": "new RegExp('ab+c', 'im')",
        "python": "re.compile(r\"ab+c(?im)\")",
        "java": "Pattern.compile(\"ab+c(?im)\")",
        "csharp": "new Regex(@\"(?im)ab+c\")",
        "shell": "new RegExp('ab+c', 'im')"
      },
      {
        "description": "regex object with ig flags as args",
        "javascript": "new RegExp('ab+c', 'ig')",
        "python": "re.compile(r\"ab+c(?is)\")",
        "java": "Pattern.compile(\"ab+c(?i)\")",
        "csharp": "new Regex(@\"(?i)ab+c\")",
        "shell": "new RegExp('ab+c', 'ig')"
      },
      {
        "description": "regex object with forward slash",
        "javascript": "new RegExp('ab/cd')",
        "python": "re.compile(r\"ab\\/cd\")",
        "java": "Pattern.compile(\"ab\\\\/cd\")",
        "csharp": "new Regex(@\"ab\\/cd\")",
        "shell": "new RegExp('ab/cd')"
      },
      {
        "description": "regex object with escaped double quote",
        "javascript": "new RegExp('ab\\\"ab')",
        "python": "re.compile(r\"ab\\\"ab\")",
        "java": "Pattern.compile(\"ab\\\"ab\")",
        "csharp": "new Regex(@\"ab\\\"ab\")",
        "shell": "new RegExp('ab\\\"ab')"
      },
      {
        "description": "regex object with nonescaped double quote",
        "javascript": "new RegExp('ab\"ab')",
        "python": "re.compile(r\"ab\\\"ab\")",
        "java": "Pattern.compile(\"ab\\\"ab\")",
        "csharp": "new Regex(@\"ab\\\"ab\")",
        "shell": "new RegExp('ab\"ab')"
      },
      {
        "description": "regex object with escaped single quote",
        "javascript": "new RegExp('ab\\'ab')",
        "python": "re.compile(r\"ab'ab\")",
        "java": "Pattern.compile(\"ab'ab\")",
        "csharp": "new Regex(@\"ab'ab\")",
        "shell": "new RegExp('ab\\'ab')"
      },
      {
        "description": "regex object with nonescaped single quote",
        "javascript": "new RegExp(\"ab'ab\")",
        "python": "re.compile(r\"ab'ab\")",
        "java": "Pattern.compile(\"ab'ab\")",
        "csharp": "new Regex(@\"ab'ab\")",
        "shell": "new RegExp(\"ab'ab\")"
      },
      {
        "description": "regex object with newline",
        "javascript": "new RegExp(\"\\\\n\")",
        "python": "re.compile(r\"\\\\n\")",
        "java": "Pattern.compile(\"\\\\n\")",
        "csharp": "new Regex(@\"\\n\")",
        "shell": "new RegExp(\"\\\\n\")"
      },
      {
        "description": "regex literal with ig flags",
        "javascript": "/ab+c/ig",
        "python": "re.compile(r\"ab+c(?is)\")",
        "java": "Pattern.compile(\"ab+c(?i)\")",
        "csharp": "new Regex(@\"(?i)ab+c\")",
        "shell": "/ab+c/ig"
      },
      {
        "description": "regex object with regex literal arg",
        "javascript": "new RegExp(/ab+c/, 'i')",
        "python": "re.compile(r\"ab+c(?i)\")",
        "java": "Pattern.compile(\"ab+c(?i)\")",
        "csharp": "new Regex(@\"(?i)ab+c\")",
        "shell": "new RegExp(/ab+c/, 'i')"
      }
    ]
  }
}
