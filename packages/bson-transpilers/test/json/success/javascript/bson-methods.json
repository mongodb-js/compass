{
  "tests": {
    "Code": [
      {
        "description": "CodeWithScope scope",
        "javascript": "Code('test code', {x: 1}).scope",
        "python": "Code('test code', {'x': 1}).scope",
        "java": "new CodeWithScope(\"test code\", new Document().append(\"x\", new java.lang.Long(\"1\"))).getScope()",
        "csharp": "new BsonJavaScriptWithScope(@\"test code\", new BsonDocument(\"x\", 1)).Scope",
        "shell": "Code('test code', {x: 1}).scope"
      },
      {
        "description": "Code code",
        "javascript": "Code('test code').code",
        "python": "str(Code('test code'))",
        "java": "new Code(\"test code\").getCode()",
        "csharp": "new BsonJavaScript(@\"test code\").Code",
        "shell": "Code('test code').code"
      },
      {
        "description": "Code toString",
        "javascript": "Code('test code').toString()",
        "python": "repr(Code('test code'))",
        "java": "new Code(\"test code\").toString()",
        "csharp": "new BsonJavaScript(@\"test code\").ToString()",
        "shell": "Code('test code').toString()"
      }
    ],
    "ObjectId": [
      {
        "description": "no arg toString",
        "javascript": "ObjectId().toString()",
        "python": "str(ObjectId())",
        "java": "new ObjectId().toHexString()",
        "csharp": "new ObjectId().ToString()",
        "shell": "ObjectId().toString()"
      },
      {
        "description": "hex arg toString",
        "javascript": "ObjectId('5ab901c29ee65f5c8550c5b9').toString()",
        "python": "str(ObjectId('5ab901c29ee65f5c8550c5b9'))",
        "java": "new ObjectId(\"5ab901c29ee65f5c8550c5b9\").toHexString()",
        "csharp": "new ObjectId(\"5ab901c29ee65f5c8550c5b9\").ToString()",
        "shell": "ObjectId('5ab901c29ee65f5c8550c5b9').toString()"
      },
      {
        "description": "getTimestamp",
        "javascript": "ObjectId('5ab901c29ee65f5c8550c5b9').getTimestamp()",
        "python": "ObjectId('5ab901c29ee65f5c8550c5b9').generation_time",
        "java": "new ObjectId(\"5ab901c29ee65f5c8550c5b9\").getTimestamp()",
        "csharp": "new ObjectId(\"5ab901c29ee65f5c8550c5b9\").Timestamp",
        "shell": "ObjectId('5ab901c29ee65f5c8550c5b9').getTimestamp()"
      },
      {
        "description": "equals",
        "javascript": "ObjectId().equals(ObjectId())",
        "python": "ObjectId() == ObjectId()",
        "java": "new ObjectId().equals(new ObjectId())",
        "csharp": "new ObjectId().Equals(new ObjectId())",
        "shell": "ObjectId().equals(ObjectId())"
      }
    ],
    "Binary": [
      {
        "description": "length",
        "javascript": "Binary(Buffer.from('0404')).length()",
        "python": "len(bytearray(Binary(b'0404')))",
        "java": "new Binary(\"0404\".getBytes(\"UTF-8\")).length()",
        "csharp": "new BsonBinaryData(System.Text.Encoding.ASCII.GetBytes(\"0404\")).Length",
        "shell": "BinData(0, '0404').length()"
      },
      {
        "description": "subtype",
        "javascript": "Binary(Buffer.from('0001')).sub_type",
        "python": "Binary(b'0001').subtype",
        "java": "new Binary(\"0001\".getBytes(\"UTF-8\")).getType()",
        "csharp": "new BsonBinaryData(System.Text.Encoding.ASCII.GetBytes(\"0001\")).SubType",
        "shell": "BinData(0, '0001').subtype()"
      },
      {
        "description": "value",
        "javascript": "Binary(Buffer.from('0404')).value()",
        "python": "str(Binary(b'0404'))",
        "java": "new Binary(\"0404\".getBytes(\"UTF-8\")).getData()",
        "csharp": "new BsonBinaryData(System.Text.Encoding.ASCII.GetBytes(\"0404\")).ToString()",
        "shell": "BinData(0, '0404').hex()"
      },
      {
        "description": "toString",
        "javascript": "Binary(Buffer.from('0404')).toString()",
        "python": "str(Binary(b'0404'))",
        "java": "new Binary(\"0404\".getBytes(\"UTF-8\")).toString()",
        "csharp": "new BsonBinaryData(System.Text.Encoding.ASCII.GetBytes(\"0404\")).ToString()",
        "shell": "BinData(0, '0404').toString()"
      }
    ],
    "DBRef": [
      {
        "description": "toString",
        "javascript": "new DBRef('coll', new ObjectId()).toString()",
        "python": "str(DBRef('coll', ObjectId()))",
        "java": "new DBRef(\"coll\", new ObjectId()).toString()",
        "csharp": "new MongoDBRef(\"coll\", new ObjectId()).ToString()",
        "shell": "new DBRef('coll', new ObjectId()).toString()"
      },
      {
        "description": "getDb",
        "javascript": "new DBRef('coll', new ObjectId()).db",
        "python": "DBRef('coll', ObjectId()).database",
        "java": "new DBRef(\"coll\", new ObjectId()).getDatabaseName()",
        "csharp": "new MongoDBRef(\"coll\", new ObjectId()).DatabaseName",
        "shell": "new DBRef('coll', new ObjectId()).getDb()"
      },
      {
        "description": "getCollection",
        "javascript": "new DBRef('coll', new ObjectId()).namespace",
        "python": "DBRef('coll', ObjectId()).collection",
        "java": "new DBRef(\"coll\", new ObjectId()).getCollectionName()",
        "csharp": "new MongoDBRef(\"coll\", new ObjectId()).CollectionName",
        "shell": "new DBRef('coll', new ObjectId()).getCollection()"
      },
      {
        "description": "getId",
        "javascript": "new DBRef('coll', new ObjectId()).oid",
        "python": "DBRef('coll', ObjectId()).id",
        "java": "new DBRef(\"coll\", new ObjectId()).getId()",
        "csharp": "new MongoDBRef(\"coll\", new ObjectId()).Id",
        "shell": "new DBRef('coll', new ObjectId()).getId()"
      }
    ],
    "Int32": [
      {
        "description": "valueOf",
        "javascript": "Int32(3).valueOf()",
        "python": "int(3)",
        "java": "new java.lang.Integer(3).intValue()",
        "csharp": "Convert.ToInt32(3)",
        "shell": "NumberInt(3).valueOf()"
      }
    ],
    "Double": [
      {
        "description": "valueOf",
        "javascript": "Double(3).valueOf()",
        "python": "float(3)",
        "java": "new java.lang.Double(3).doubleValue()",
        "csharp": "new BsonDouble(3).Value",
        "shell": "3"
      }
    ],
    "Long": [
      {
        "description": "toInt",
        "javascript": "Long(1, 100).toInt()",
        "python": "int(Int64(429496729601))",
        "java": "new java.lang.Long(\"429496729601\").intValue()",
        "csharp": "new BsonInt64(429496729601).ToInt32()",
        "shell": "NumberLong(429496729601).valueOf()"
      },
      {
        "description": "toNumber",
        "javascript": "Long(1, 100).toNumber()",
        "python": "float(Int64(429496729601))",
        "java": "new java.lang.Long(\"429496729601\").floatValue()",
        "csharp": "new BsonInt64(429496729601).Value",
        "shell": "NumberLong(429496729601).floatApprox"
      },
      {
        "description": "toString without radix",
        "javascript": "Long(1, 100).toString()",
        "python": "'429496729601'",
        "java": "\"429496729601\"",
        "csharp": "\"429496729601\"",
        "shell": "'429496729601'"
      },
      {
        "description": "toString with radix",
        "javascript": "Long(1, 100).toString(10)",
        "python": "'429496729601'",
        "java": "\"429496729601\"",
        "csharp": "\"429496729601\"",
        "shell": "'429496729601'"
      },
      {
        "description": "isZero",
        "javascript": "Long(1, 100).isZero()",
        "python": "Int64(429496729601) == 0",
        "java": "new java.lang.Long(\"429496729601\").equals(new java.lang.Long(0))",
        "csharp": "new BsonInt64(429496729601) == 0",
        "shell": "NumberLong(429496729601) === 0"
      },
      {
        "description": "isNegative",
        "javascript": "Long(1, 100).isNegative()",
        "python": "Int64(429496729601) < 0",
        "java": "new java.lang.Long(\"429496729601\").compareTo(new java.lang.Long(0)) < 0",
        "csharp": "new BsonInt64(429496729601) < 0",
        "shell": "NumberLong(429496729601) < 0"
      },
      {
        "description": "isOdd",
        "javascript": "Long(1, 100).isOdd()",
        "python": "(Int64(429496729601) % 2) == 0",
        "java": "new java.lang.Long(\"429496729601\") % 2 == 0",
        "csharp": "new BsonInt64(429496729601).ToInt64() % 2 == 0",
        "shell": "(NumberLong(429496729601) % 2) === 0"
      },
      {
        "description": "equals",
        "javascript": "Long(1, 100).equals(Long(9, 1))",
        "python": "(Int64(429496729601) - Int64(4294967305)) == 0",
        "java": "new java.lang.Long(\"429496729601\").equals(new java.lang.Long(\"4294967305\"))",
        "csharp": "new BsonInt64(429496729601).ToInt64() == new BsonInt64(4294967305).ToInt64()",
        "shell": "NumberLong(429496729601) === NumberLong(4294967305)"
      },
      {
        "description": "notEquals",
        "javascript": "Long(1, 100).notEquals(Long(9, 1))",
        "python": "(Int64(429496729601) - Int64(4294967305)) != 0",
        "java": "new java.lang.Long(\"429496729601\").compareTo(new java.lang.Long(\"4294967305\")) != 0",
        "csharp": "new BsonInt64(429496729601).ToInt64() != new BsonInt64(4294967305).ToInt64()",
        "shell": "NumberLong(429496729601) !== NumberLong(4294967305)"
      },
      {
        "description": "compare",
        "javascript": "Long(1, 100).compare(Long(9, 1))",
        "python": "Int64(429496729601) - Int64(4294967305)",
        "java": "new java.lang.Long(\"429496729601\").compareTo(new java.lang.Long(\"4294967305\"))",
        "csharp": "new BsonInt64(429496729601).CompareTo(new BsonInt64(4294967305))",
        "shell": "NumberLong(429496729601) - NumberLong(4294967305)"
      },
      {
        "description": "greaterThan",
        "javascript": "Long(1, 100).greaterThan(Long(9, 1))",
        "python": "(Int64(429496729601) - Int64(4294967305)) > 0",
        "java": "new java.lang.Long(\"429496729601\").compareTo(new java.lang.Long(\"4294967305\")) > 0",
        "csharp": "new BsonInt64(429496729601) > new BsonInt64(4294967305)",
        "shell": "NumberLong(429496729601) > NumberLong(4294967305)"
      },
      {
        "description": "greaterThanOrEqual",
        "javascript": "Long(1, 100).greaterThanOrEqual(Long(9, 1))",
        "python": "(Int64(429496729601) - Int64(4294967305)) >= 0",
        "java": "new java.lang.Long(\"429496729601\").compareTo(new java.lang.Long(\"4294967305\")) >= 0",
        "csharp": "new BsonInt64(429496729601) >= new BsonInt64(4294967305)",
        "shell": "NumberLong(429496729601) >= NumberLong(4294967305)"
      },
      {
        "description": "lessThan",
        "javascript": "Long(1, 100).lessThan(Long(9, 1))",
        "python": "(Int64(429496729601) - Int64(4294967305)) < 0",
        "java": "new java.lang.Long(\"429496729601\").compareTo(new java.lang.Long(\"4294967305\")) < 0",
        "csharp": "new BsonInt64(429496729601) < new BsonInt64(4294967305)",
        "shell": "NumberLong(429496729601) < NumberLong(4294967305)"
      },
      {
        "description": "lessThanOrEqual",
        "javascript": "Long(1, 100).lessThanOrEqual(Long(9, 1))",
        "python": "(Int64(429496729601) - Int64(4294967305)) <= 0",
        "java": "new java.lang.Long(\"429496729601\").compareTo(new java.lang.Long(\"4294967305\")) <= 0",
        "csharp": "new BsonInt64(429496729601) <= new BsonInt64(4294967305)",
        "shell": "NumberLong(429496729601) <= NumberLong(4294967305)"
      },
      {
        "description": "negate",
        "javascript": "Long(1, 100).negate())",
        "python": "-Int64(429496729601)",
        "java": "-new java.lang.Long(\"429496729601\")",
        "csharp": "-new BsonInt64(429496729601).ToInt64()",
        "shell": "-NumberLong(429496729601)"
      },
      {
        "description": "add",
        "javascript": "Long(1, 100).add(Long(9, 1))",
        "python": "Int64(429496729601) + Int64(4294967305)",
        "java": "new java.lang.Long(\"429496729601\") + new java.lang.Long(\"4294967305\")",
        "csharp": "new BsonInt64(429496729601).ToInt64() + new BsonInt64(4294967305).ToInt64()",
        "shell": "NumberLong(429496729601) + NumberLong(4294967305)"
      },
      {
        "description": "subtract",
        "javascript": "Long(1, 100).subtract(Long(9, 1))",
        "python": "Int64(429496729601) - Int64(4294967305)",
        "java": "new java.lang.Long(\"429496729601\") - new java.lang.Long(\"4294967305\")",
        "csharp": "new BsonInt64(429496729601).ToInt64() - new BsonInt64(4294967305).ToInt64()",
        "shell": "NumberLong(429496729601) - NumberLong(4294967305)"
      },
      {
        "description": "multiply",
        "javascript": "Long(1, 100).multiply(Long(9, 1))",
        "python": "Int64(429496729601) * Int64(4294967305)",
        "java": "new java.lang.Long(\"429496729601\") * new java.lang.Long(\"4294967305\")",
        "csharp": "new BsonInt64(429496729601).ToInt64() * new BsonInt64(4294967305).ToInt64()",
        "shell": "NumberLong(429496729601) * NumberLong(4294967305)"
      },
      {
        "description": "div",
        "javascript": "Long(1, 100).div(Long(9, 1))",
        "python": "Int64(429496729601) / Int64(4294967305)",
        "java": "new java.lang.Long(\"429496729601\") / new java.lang.Long(\"4294967305\")",
        "csharp": "new BsonInt64(429496729601).ToInt64() / new BsonInt64(4294967305).ToInt64()",
        "shell": "NumberLong(429496729601) / NumberLong(4294967305)"
      },
      {
        "description": "modulo",
        "javascript": "Long(1, 100).modulo(Long(9, 1))",
        "python": "Int64(429496729601) % Int64(4294967305)",
        "java": "new java.lang.Long(\"429496729601\") % new java.lang.Long(\"4294967305\")",
        "csharp": "new BsonInt64(429496729601).ToInt64() % new BsonInt64(4294967305).ToInt64()",
        "shell": "NumberLong(429496729601) % NumberLong(4294967305)"
      },
      {
        "description": "not",
        "javascript": "Long(1, 100).not()",
        "python": "~Int64(429496729601)",
        "java": "~new java.lang.Long(\"429496729601\")",
        "csharp": "!new BsonInt64(429496729601).ToInt64()",
        "shell": "~NumberLong(429496729601)"
      },
      {
        "description": "and",
        "javascript": "Long(1, 100).and(Long(9, 1))",
        "python": "Int64(429496729601) & Int64(4294967305)",
        "java": "new java.lang.Long(\"429496729601\") & new java.lang.Long(\"4294967305\")",
        "csharp": "new BsonInt64(429496729601).ToInt64() & new BsonInt64(4294967305).ToInt64()",
        "shell": "NumberLong(429496729601) & NumberLong(4294967305)"
      },
      {
        "description": "or",
        "javascript": "Long(1, 100).or(Long(9, 1))",
        "python": "Int64(429496729601) | Int64(4294967305)",
        "java": "new java.lang.Long(\"429496729601\") | new java.lang.Long(\"4294967305\")",
        "csharp": "new BsonInt64(429496729601).ToInt64() | new BsonInt64(4294967305).ToInt64()",
        "shell": "NumberLong(429496729601) | NumberLong(4294967305)"
      },
      {
        "description": "xor",
        "javascript": "Long(1, 100).xor(Long(9, 1))",
        "python": "Int64(429496729601) ^ Int64(4294967305)",
        "java": "new java.lang.Long(\"429496729601\") ^ new java.lang.Long(\"4294967305\")",
        "csharp": "new BsonInt64(429496729601).ToInt64() ^ new BsonInt64(4294967305).ToInt64()",
        "shell": "NumberLong(429496729601) ^ NumberLong(4294967305)"
      },
      {
        "description": "shiftLeft",
        "javascript": "Long(1, 100).shiftLeft(10)",
        "python": "Int64(429496729601) << 10",
        "java": "java.lang.Long.rotateLeft(new java.lang.Long(\"429496729601\"), 10)",
        "csharp": "new BsonInt64(429496729601).ToInt32() << 10",
        "shell": "NumberLong(429496729601) << 10"
      },
      {
        "description": "shiftRight",
        "javascript": "Long(1, 100).shiftRight(10)",
        "python": "Int64(429496729601) >> 10",
        "java": "java.lang.Long.rotateRight(new java.lang.Long(\"429496729601\"), 10)",
        "csharp": "new BsonInt64(429496729601).ToInt32() >> 10",
        "shell": "NumberLong(429496729601) >> 10"
      }
    ],
    "Decimal128": [
      {
        "description": "toString",
        "javascript": "new Decimal128(Buffer.from('5')).toString()",
        "python": "str(Decimal128('5.3E-6175'))",
        "java": "Decimal128.parse(\"5.3E-6175\").toString()",
        "csharp": "new Decimal128(5).ToString()",
        "shell": "new NumberDecimal(5.3E-6175).toString()"
      }
    ],
    "Timestamp": [
      {
        "description": "toString",
        "javascript": "Timestamp(1, 100).toString()",
        "python": "str(Timestamp(1, 100))",
        "java": "new BSONTimestamp(1, 100).toString()",
        "csharp": "new BsonTimestamp(1, 100).ToString()",
        "shell": "Timestamp(1, 100).toString()"
      },
      {
        "description": "equals",
        "javascript": "Timestamp(1, 100).equals(Timestamp(2, 99))",
        "python": "(Timestamp(1, 100).time - Timestamp(2, 99).time) == 0",
        "java": "new BSONTimestamp(1, 100).equals(new BSONTimestamp(2, 99))",
        "csharp": "new BsonTimestamp(1, 100).Equals(new BsonTimestamp(2, 99))",
        "shell": "Timestamp(1, 100) === Timestamp(2, 99)"
      },
      {
        "description": "compare",
        "javascript": "Timestamp(1, 100).compare(Timestamp(2, 99))",
        "python": "Timestamp(1, 100).time - Timestamp(2, 99).time",
        "java": "new BSONTimestamp(1, 100).compareTo(new BSONTimestamp(2, 99))",
        "csharp": "new BsonTimestamp(1, 100).CompareTo(new BsonTimestamp(2, 99))",
        "shell": "Timestamp(1, 100) - Timestamp(2, 99)"
      },
      {
        "description": "notEquals",
        "javascript": "Timestamp(1, 100).notEquals(Timestamp(2, 99))",
        "python": "(Timestamp(1, 100).time - Timestamp(2, 99).time) != 0",
        "java": "new BSONTimestamp(1, 100).compareTo(new BSONTimestamp(2, 99)) != 0",
        "csharp": "new BsonTimestamp(1, 100) != new BsonTimestamp(2, 99)",
        "shell": "Timestamp(1, 100) !== Timestamp(2, 99)"
      },
      {
        "description": "greaterThan",
        "javascript": "Timestamp(1, 100).greaterThan(Timestamp(2, 99))",
        "python": "(Timestamp(1, 100).time - Timestamp(2, 99).time) > 0",
        "java": "new BSONTimestamp(1, 100).compareTo(new BSONTimestamp(2, 99)) > 0",
        "csharp": "new BsonTimestamp(1, 100) > new BsonTimestamp(2, 99)",
        "shell": "Timestamp(1, 100) > Timestamp(2, 99)"
      },
      {
        "description": "greaterThanOrEqual",
        "javascript": "Timestamp(1, 100).greaterThanOrEqual(Timestamp(2, 99))",
        "python": "(Timestamp(1, 100).time - Timestamp(2, 99).time) >= 0",
        "java": "new BSONTimestamp(1, 100).compareTo(new BSONTimestamp(2, 99)) >= 0",
        "csharp": "new BsonTimestamp(1, 100) >= new BsonTimestamp(2, 99)",
        "shell": "Timestamp(1, 100) >= Timestamp(2, 99)"
      },
      {
        "description": "lessThan",
        "javascript": "Timestamp(1, 100).lessThan(Timestamp(2, 99))",
        "python": "(Timestamp(1, 100).time - Timestamp(2, 99).time) < 0",
        "java": "new BSONTimestamp(1, 100).compareTo(new BSONTimestamp(2, 99)) < 0",
        "csharp": "new BsonTimestamp(1, 100) < new BsonTimestamp(2, 99)",
        "shell": "Timestamp(1, 100) < Timestamp(2, 99)"
      },
      {
        "description": "lessThanOrEqual",
        "javascript": "Timestamp(1, 100).lessThanOrEqual(Timestamp(2, 99))",
        "python": "(Timestamp(1, 100).time - Timestamp(2, 99).time) <= 0",
        "java": "new BSONTimestamp(1, 100).compareTo(new BSONTimestamp(2, 99)) <= 0",
        "csharp": "new BsonTimestamp(1, 100) <= new BsonTimestamp(2, 99)",
        "shell": "Timestamp(1, 100) <= Timestamp(2, 99)"
      },
      {
        "description": "getLowBits",
        "javascript": "Timestamp(1, 100).getLowBits()",
        "python": "Timestamp(1, 100).time",
        "java": "new BSONTimestamp(1, 100).getTime()",
        "csharp": "new BsonTimestamp(1, 100).ToUniversalTime()",
        "shell": "Timestamp(1, 100).getTime()"
      },
      {
        "description": "getHighBits",
        "javascript": "Timestamp(1, 100).getHighBits()",
        "python": "Timestamp(1, 100).inc",
        "java": "new BSONTimestamp(1, 100).getInc()",
        "csharp": "new BsonTimestamp(1, 100).Increment",
        "shell": "Timestamp(1, 100).getInc()"
      }
    ],
    "Symbol": [
      {
        "description": "valueOf",
        "javascript": "Symbol('2').valueOf()",
        "python": "unicode('2', 'utf-8')",
        "java": "new Symbol(\"2\").getSymbol()",
        "csharp": "new BsonString(\"2\").AsBsonSymbol",
        "shell": "'2'"
      },
      {
        "description": "toString",
        "javascript": "Symbol('2').toString()",
        "python": "str(unicode('2', 'utf-8'))",
        "java": "new Symbol(\"2\").toString()",
        "csharp": "new BsonString(\"2\").ToString()",
        "shell": "'2'"
      },
      {
        "description": "inspect",
        "javascript": "Symbol('2').inspect()",
        "python": "unicode('2', 'utf-8')",
        "java": "new Symbol(\"2\").getSymbol()",
        "csharp": "new BsonString(\"2\").Value",
        "shell": "'2'"
      }
    ]
  }
}
