{
  "tests": {
    "Code": [
      {
        "description": "new Code with string code",
        "javascript": "new Code('some code')",
        "python": "Code('some code')",
        "java": "new Code(\"some code\")",
        "csharp": "new BsonJavaScript(@\"some code\")",
        "shell": "new Code('some code')"
      },
      {
        "description": "Code with string code",
        "javascript": "Code('some code')",
        "python": "Code('some code')",
        "java": "new Code(\"some code\")",
        "csharp": "new BsonJavaScript(@\"some code\")",
        "shell": "Code('some code')"
      },
      {
        "description": "Code with string code and object scope",
        "javascript": "Code('string', {x: '1'})",
        "python": "Code('string', {'x': '1'})",
        "java": "new CodeWithScope(\"string\", new Document().append(\"x\", \"1\"))",
        "csharp": "new BsonJavaScriptWithScope(@\"string\", new BsonDocument(\"x\", \"1\"))",
        "shell": "Code('string', {x: '1'})"
      },
      {
        "description": "Code with function code",
        "javascript": "Code(function(test) { console.log(test); })",
        "python": "Code('function(test){console.log(test);}')",
        "java": "new Code(\"function(test){console.log(test);}\")",
        "csharp": "new BsonJavaScript(@\"function(test){console.log(test);}\")",
        "shell": "Code('function(test){console.log(test);}')"
      },
      {
        "description": "new Code with where code",
        "javascript": "new Code('this.a > i', { i: '1' })",
        "python": "Code('this.a > i', {'i': '1'})",
        "java": "new CodeWithScope(\"this.a > i\", new Document().append(\"i\", \"1\"))",
        "csharp": "new BsonJavaScriptWithScope(@\"this.a > i\", new BsonDocument(\"i\", \"1\"))",
        "shell": "new Code('this.a > i', {i: '1'})"
      }
    ],
    "ObjectId": [
      {
        "description": "ObjectId with no arg",
        "javascript": "ObjectId()",
        "python": "ObjectId()",
        "java": "new ObjectId()",
        "csharp": "new ObjectId()",
        "shell": "ObjectId()"
      },
      {
        "description": "new ObjectId with no arg",
        "javascript": "new ObjectId()",
        "python": "ObjectId()",
        "java": "new ObjectId()",
        "csharp": "new ObjectId()",
        "shell": "new ObjectId()"
      },
      {
        "description": "ObjectId with hex string arg",
        "javascript": "ObjectId('5a7382114ec1f67ae445f778')",
        "python": "ObjectId('5a7382114ec1f67ae445f778')",
        "java": "new ObjectId(\"5a7382114ec1f67ae445f778\")",
        "csharp": "new ObjectId(\"5a7382114ec1f67ae445f778\")",
        "shell": "ObjectId('5a7382114ec1f67ae445f778')"
      }
    ],
    "Binary": [
      {
        "description": "Binary with ascii buffer arg",
        "javascript": "Binary(Buffer.from('1234'))",
        "python": "Binary(b'1234')",
        "java": "new Binary(\"1234\".getBytes(\"UTF-8\"))",
        "csharp": "new BsonBinaryData(System.Text.Encoding.ASCII.GetBytes(\"1234\"))",
        "shell": "BinData(0, '1234')"
      },
      {
        "description": "new Binary with (ascii buffer, UUID subtype enum) args",
        "javascript": "new Binary(Buffer.from(\"1234\"), Binary.SUBTYPE_UUID)",
        "python": "Binary(b'1234', bson.binary.UUID_SUBTYPE)",
        "java": "new Binary(BsonBinarySubType.UUID_STANDARD, \"1234\".getBytes(\"UTF-8\"))",
        "csharp": "new BsonBinaryData(System.Text.Encoding.ASCII.GetBytes(\"1234\"), BsonBinarySubType.UuidStandard)",
        "shell": "new BinData(4, '1234')"
      },
      {
        "description": "Binary with (ascii buffer, number) args",
        "javascript": "Binary(Buffer.from('1234'), '1')",
        "python": "Binary(b'1234', bson.binary.FUNCTION_SUBTYPE)",
        "java": "new Binary(BsonBinarySubType.FUNCTION, \"1234\".getBytes(\"UTF-8\"))",
        "csharp": "new BsonBinaryData(System.Text.Encoding.ASCII.GetBytes(\"1234\"), BsonBinarySubType.Function)",
        "shell": "BinData(1, '1234')"
      },
      {
        "description": "Binary with string args",
        "javascript": "Binary('1234')",
        "python": "Binary(b'1234')",
        "java": "new Binary(\"1234\".getBytes(\"UTF-8\"))",
        "csharp": "new BsonBinaryData(System.Text.Encoding.ASCII.GetBytes(\"1234\"))",
        "shell": "BinData(0, '1234')"
      },
      {
        "description": "Binary with (string, string) args",
        "javascript": "Binary('1234', '1')",
        "python": "Binary(b'1234', bson.binary.FUNCTION_SUBTYPE)",
        "java": "new Binary(BsonBinarySubType.FUNCTION, \"1234\".getBytes(\"UTF-8\"))",
        "csharp": "new BsonBinaryData(System.Text.Encoding.ASCII.GetBytes(\"1234\"), BsonBinarySubType.Function)",
        "shell": "BinData(1, '1234')"
      }
    ],
    "DBRef": [
      {
        "description": "new DBRef with (string, ObjectID) args",
        "javascript": "new DBRef('coll', new ObjectId())",
        "python": "DBRef('coll', ObjectId())",
        "java": "new DBRef(\"coll\", new ObjectId())",
        "csharp": "new MongoDBRef(\"coll\", new ObjectId())",
        "shell": "new DBRef('coll', new ObjectId())"
      },
      {
        "description": "new DBRef with (string, ObjectId, string) args",
        "javascript": "new DBRef('coll', ObjectId(), 'db')",
        "python": "DBRef('coll', ObjectId(), 'db')",
        "java": "new DBRef(\"db\", \"coll\", new ObjectId())",
        "csharp": "new MongoDBRef(\"coll\", new ObjectId(), \"db\")",
        "shell": "new DBRef('coll', ObjectId(), 'db')"
      }
    ],
    "Int32": [
      {
        "description": "Int32 with number arg",
        "javascript": "Int32(3)",
        "python": "int(3)",
        "java": "new java.lang.Integer(3)",
        "csharp": "Convert.ToInt32(3)",
        "shell": "NumberInt(3)"
      },
      {
        "description": "Int32 with valid string arg",
        "javascript": "Int32('3')",
        "python": "int('3')",
        "java": "new java.lang.Integer(\"3\")",
        "csharp": "Int32.Parse(\"3\")",
        "shell": "NumberInt('3')"
      }
    ],
    "Double": [
      {
        "description": "Double with number arg",
        "javascript": "Double(3)",
        "python": "float(3)",
        "java": "new java.lang.Double(3)",
        "csharp": "new BsonDouble(3)",
        "shell": "3"
      },
      {
        "description": "new Double with number arg",
        "javascript": "new Double(3)",
        "python": "float(3)",
        "java": "new java.lang.Double(3)",
        "csharp": "new BsonDouble(3)",
        "shell": "3"
      },
      {
        "description": "Double with valid string arg",
        "javascript": "Double('3')",
        "python": "float('3')",
        "java": "new java.lang.Double(\"3\")",
        "csharp": "new BsonDouble(3)",
        "shell": "3"
      }
    ],
    "Long": [
      {
        "description": "Long with two number args",
        "javascript": "new Long(-1, 2147483647)",
        "python": "Int64(9223372036854775807)",
        "java": "new java.lang.Long(\"9223372036854775807\")",
        "csharp": "new BsonInt64(9223372036854775807)",
        "shell": "new NumberLong(9223372036854775807)"
      }
    ],
    "Decimal128": [
      {
        "description": "new Decimal128 with string arg",
        "javascript": "new Decimal128(Buffer.from('5'))",
        "python": "Decimal128('5.3E-6175')",
        "java": "Decimal128.parse(\"5.3E-6175\")",
        "csharp": "new Decimal128(5)",
        "shell": "new NumberDecimal(5.3E-6175)"
      }
    ],
    "MinKeyMaxKey": [
      {
        "description": "MinKey",
        "javascript": "MinKey()",
        "python": "MinKey()",
        "java": "new MinKey()",
        "csharp": "BsonMinKey.Value",
        "shell": "MinKey()"
      },
      {
        "description": "maxKey",
        "javascript": "MaxKey()",
        "python": "MaxKey()",
        "java": "new MaxKey()",
        "csharp": "BsonMaxKey.Value",
        "shell": "MaxKey()"
      },
      {
        "description": "new MaxKey()",
        "javascript": "new MaxKey()",
        "python": "MaxKey()",
        "java": "new MaxKey()",
        "csharp": "BsonMaxKey.Value",
        "shell": "new MaxKey()"
      },
      {
        "description": "new MinKey()",
        "javascript": "new MinKey()",
        "python": "MinKey()",
        "java": "new MinKey()",
        "csharp": "BsonMinKey.Value",
        "shell": "new MinKey()"
      }
    ],
    "BSONRegExp": [
      {
        "description": "new BSONRegExp with string arg",
        "javascript": "new BSONRegExp('^[a-z0-9_-]{3,16}$')",
        "python": "Regex('^[a-z0-9_-]{3,16}$')",
        "java": "new BsonRegularExpression(\"^[a-z0-9_-]{3,16}$\")",
        "csharp": "new BsonRegularExpression(@\"^[a-z0-9_-]{3,16}$\")",
        "shell": "new RegExp('^[a-z0-9_-]{3,16}$')"
      },
      {
        "description": "new BSONRegExp with string arg and flags",
        "javascript": "new BSONRegExp('^[a-z0-9_-]{3,16}$', 'imuxls')",
        "python": "Regex('^[a-z0-9_-]{3,16}$', 'imuxls')",
        "java": "new BsonRegularExpression(\"^[a-z0-9_-]{3,16}$\", \"imuxls\")",
        "csharp": "new BsonRegularExpression(@\"^[a-z0-9_-]{3,16}$\", \"imxs\")",
        "shell": "new RegExp('^[a-z0-9_-]{3,16}$', 'imuxls')"
      }
    ],
    "Timestamp": [
      {
        "description": "Timestamp with two number args",
        "javascript": "Timestamp(10, 100)",
        "python": "Timestamp(10, 100)",
        "java": "new BSONTimestamp(10, 100)",
        "csharp": "new BsonTimestamp(10, 100)",
        "shell": "Timestamp(10, 100)"
      },
      {
        "description": "new Timestamp with two number args",
        "javascript": "new Timestamp(10, 100)",
        "python": "Timestamp(10, 100)",
        "java": "new BSONTimestamp(10, 100)",
        "csharp": "new BsonTimestamp(10, 100)",
        "shell": "new Timestamp(10, 100)"
      }
    ],
    "Document": [
      {
        "description": "{x: '1'}",
        "javascript": "{x: '1'}",
        "python": "{'x': '1'}",
        "java": "new Document().append(\"x\", \"1\")",
        "csharp": "new BsonDocument(\"x\", \"1\")",
        "shell": "{x: '1'}"
      },
      {
        "description": "Doc with trailing comma",
        "javascript": "{x: '1',}",
        "python": "{'x': '1'}",
        "java": "new Document().append(\"x\", \"1\")",
        "csharp": "new BsonDocument(\"x\", \"1\")",
        "shell": "{x: '1'}"
      },
      {
        "description": "Doc with array",
        "javascript": "{x: ['1', '2']}",
        "python": "{'x': ['1', '2']}",
        "java": "new Document().append(\"x\", Arrays.asList(\"1\", \"2\"))",
        "csharp": "new BsonDocument(\"x\", new BsonArray {\"1\", \"2\"})",
        "shell": "{x: ['1', '2']}"
      },
      {
        "description": "Doc with subdoc",
        "javascript": "{x: {y: '2'}}",
        "python": "{'x': {'y': '2'}}",
        "java": "new Document().append(\"x\", new Document().append(\"y\", \"2\"))",
        "csharp": "new BsonDocument(\"x\", new BsonDocument(\"y\", \"2\"))",
        "shell": "{x: {y: '2'}}"
      },
      {
        "description": "Object.create()",
        "javascript": "Object.create({x: '1'})",
        "python": "{'x': '1'}",
        "java": "new Document().append(\"x\", \"1\")",
        "csharp": "new BsonDocument(\"x\", \"1\")",
        "shell": "Object.create({x: '1'})"
      },
      {
        "description": "Empty object",
        "javascript": "{}",
        "python": "{}",
        "java": "new Document()",
        "csharp": "new BsonDocument()",
        "shell": "{}"
      },
      {
        "description": "Two items in document",
        "javascript": "{x: '1', n: '4'}",
        "python": "{'x': '1', 'n': '4'}",
        "java": "new Document().append(\"x\", \"1\").append(\"n\", \"4\")",
        "csharp": "new BsonDocument{ { \"x\", \"1\" }, { \"n\", \"4\" } }",
        "shell": "{x: '1', n: '4'}"
      }
    ],
    "Array": [
      {
        "description": "['1', '2']",
        "javascript": "['1', '2']",
        "python": "['1', '2']",
        "java": "Arrays.asList(\"1\", \"2\")",
        "csharp": "new BsonArray {\"1\", \"2\"}",
        "shell": "['1', '2']"
      },
      {
        "description": "array with trailing comma",
        "javascript": "['1', '2',]",
        "python": "['1', '2']",
        "java": "Arrays.asList(\"1\", \"2\")",
        "csharp": "new BsonArray {\"1\", \"2\"}",
        "shell": "['1', '2']"
      },
      {
        "description": "Array with subdoc",
        "javascript": "['1', { settings: 'http2' }]",
        "python": "['1', {'settings': 'http2'}]",
        "java": "Arrays.asList(\"1\", new Document().append(\"settings\", \"http2\"))",
        "csharp": "new BsonArray {\"1\", new BsonDocument(\"settings\", \"http2\")}",
        "shell": "['1', {settings: 'http2'}]"
      },
      {
        "description": "Array with subarray",
        "javascript": "['1', ['2', '3']]",
        "python": "['1', ['2', '3']]",
        "java": "Arrays.asList(\"1\", Arrays.asList(\"2\", \"3\"))",
        "csharp": "new BsonArray {\"1\", new BsonArray {\"2\", \"3\"}}",
        "shell": "['1', ['2', '3']]"
      },
      {
        "description": "Empty array",
        "javascript": "[]",
        "python": "[]",
        "java": "Arrays.asList()",
        "csharp": "new BsonArray()",
        "shell": "[]"
      }
    ],
    "ArrayElision": [
      {
        "description": "array with leading elision",
        "javascript": "[,'1', '2',]",
        "python": "[None, '1', '2']",
        "java": "Arrays.asList(new BsonUndefined(), \"1\", \"2\")",
        "csharp": "new BsonArray {BsonUndefined.Value, \"1\", \"2\"}",
        "shell": "[undefined, '1', '2']"
      },
      {
        "description": "Array with one elision",
        "javascript": "[,]",
        "python": "[None]",
        "java": "Arrays.asList(new BsonUndefined())",
        "csharp": "new BsonArray {BsonUndefined.Value}",
        "shell": "[undefined]"
      },
      {
        "description": "Array with 2 elision",
        "javascript": "[,,]",
        "python": "[None, None]",
        "java": "Arrays.asList(new BsonUndefined(), new BsonUndefined())",
        "csharp": "new BsonArray {BsonUndefined.Value, BsonUndefined.Value}",
        "shell": "[undefined, undefined]"
      },
      {
        "description": "Array with elision in the middle",
        "javascript": "['1',,,,'2']",
        "python": "['1', None, None, None, '2']",
        "java": "Arrays.asList(\"1\", new BsonUndefined(), new BsonUndefined(), new BsonUndefined(), \"2\")",
        "csharp": "new BsonArray {\"1\", BsonUndefined.Value, BsonUndefined.Value, BsonUndefined.Value, \"2\"}",
        "shell": "['1', undefined, undefined, undefined, '2']"
      }
    ],
    "Symbol": [
      {
        "description": "Symbol from string",
        "javascript": "Symbol('2')",
        "python": "unicode('2', 'utf-8')",
        "java": "new Symbol(\"2\")",
        "csharp": "new BsonString(\"2\")",
        "shell": "'2'"
      },
      {
        "description": "new Symbol from string",
        "javascript": "new Symbol('2')",
        "python": "unicode('2', 'utf-8')",
        "java": "new Symbol(\"2\")",
        "csharp": "new BsonString(\"2\")",
        "shell": "'2'"
      }
    ]
  }
}
