{
  "tests": {
    "Code": [
      {
        "description": "new Code with string code",
        "javascript": "new Code('some code')",
        "python": "Code('some code')",
        "java": "new Code(\"some code\")",
        "csharp": "new BsonJavaScript(\"some code\")",
        "shell": "new Code('some code')"
      },
      {
        "description": "Code with string code",
        "javascript": "Code('some code')",
        "python": "Code('some code')",
        "java": "new Code(\"some code\")",
        "csharp": "new BsonJavaScript(\"some code\")",
        "shell": "Code('some code')"
      },
      {
        "description": "Code with string code and object scope",
        "javascript": "Code('string', {x: '1'})",
        "python": "Code('string', {\n    'x': '1'\n})",
        "java": "new CodeWithScope(\"string\", new Document(\"x\", \"1\"))",
        "csharp": "new BsonJavaScriptWithScope(\"string\", new BsonDocument(\"x\", \"1\"))",
        "shell": "Code('string', {\n  x: '1'\n})"
      },
      {
        "description": "Code with function code",
        "javascript": "Code(function(test) { console.log(test); })",
        "python": "Code('function(test){console.log(test);}')",
        "java": "new Code(\"function(test){console.log(test);}\")",
        "csharp": "new BsonJavaScript(\"function(test){console.log(test);}\")",
        "shell": "Code('function(test){console.log(test);}')"
      },
      {
        "description": "new Code with where code",
        "javascript": "new Code('this.a > i', { i: '1' })",
        "python": "Code('this.a > i', {\n    'i': '1'\n})",
        "java": "new CodeWithScope(\"this.a > i\", new Document(\"i\", \"1\"))",
        "csharp": "new BsonJavaScriptWithScope(\"this.a > i\", new BsonDocument(\"i\", \"1\"))",
        "shell": "new Code('this.a > i', {\n    i: '1'\n  })"
      }
    ],
    "ObjectId": [
      {
        "description": "ObjectId with no arg",
        "javascript": "ObjectId()",
        "python": "ObjectId()",
        "java": "new ObjectId()",
        "csharp": "new ObjectId()",
        "shell": "ObjectId()"
      },
      {
        "description": "new ObjectId with no arg",
        "javascript": "new ObjectId()",
        "python": "ObjectId()",
        "java": "new ObjectId()",
        "csharp": "new ObjectId()",
        "shell": "new ObjectId()"
      },
      {
        "description": "ObjectId with hex string arg",
        "javascript": "ObjectId('5a7382114ec1f67ae445f778')",
        "python": "ObjectId('5a7382114ec1f67ae445f778')",
        "java": "new ObjectId(\"5a7382114ec1f67ae445f778\")",
        "csharp": "new ObjectId(\"5a7382114ec1f67ae445f778\")",
        "shell": "ObjectId('5a7382114ec1f67ae445f778')"
      }
    ],
    "DBRef": [
      {
        "description": "new DBRef with (string, ObjectID) args",
        "javascript": "new DBRef('coll', new ObjectId())",
        "python": "DBRef('coll', ObjectId())",
        "java": "new DBRef(\"coll\", new ObjectId())",
        "csharp": "new MongoDBRef(\"coll\", new ObjectId())",
        "shell": "new DBRef('coll', new ObjectId())"
      },
      {
        "description": "new DBRef with (string, ObjectId, string) args",
        "javascript": "new DBRef('coll', ObjectId(), 'db')",
        "python": "DBRef('coll', ObjectId(), 'db')",
        "java": "new DBRef(\"db\", \"coll\", new ObjectId())",
        "csharp": "new MongoDBRef(\"coll\", new ObjectId(), \"db\")",
        "shell": "new DBRef('coll', ObjectId(), 'db')"
      }
    ],
    "Int32": [
      {
        "description": "Int32 with number arg",
        "javascript": "Int32(3)",
        "python": "int(3)",
        "java": "3",
        "csharp": "3",
        "shell": "NumberInt(3)"
      },
      {
        "description": "Int32 with valid string arg",
        "javascript": "Int32('3')",
        "python": "int('3')",
        "java": "Integer.parseInt(\"3\")",
        "csharp": "Convert.ToInt32(\"3\")",
        "shell": "NumberInt('3')"
      },
      {
        "description": "Int32 with decimal arg",
        "javascript": "Int32(3.0001)",
        "python": "int(3.0001)",
        "java": "(int) 3.0001d",
        "csharp": "Convert.ToInt32(3.0001)",
        "shell": "NumberInt(3.0001)"
      },
      {
        "description": "Int32 with hex arg",
        "javascript": "Int32(0x3)",
        "python": "int(0x3)",
        "java": "(int) 0x3",
        "csharp": "Convert.ToInt32(0x3)",
        "shell": "NumberInt(0x3)"
      },
      {
        "description": "Int32 with octal arg",
        "javascript": "Int32(0o5)",
        "python": "int(0o5)",
        "java": "(int) 05",
        "csharp": "5",
        "shell": "NumberInt(0o5)"
      }
    ],
    "Double": [
      {
        "description": "Double with number arg",
        "javascript": "Double(3)",
        "python": "float(3)",
        "java": "3d",
        "csharp": "3.0",
        "shell": "3"
      },
      {
        "description": "new Double with number arg",
        "javascript": "new Double(3)",
        "python": "float(3)",
        "java": "3d",
        "csharp": "3.0",
        "shell": "3"
      },
      {
        "description": "Double with valid string arg",
        "javascript": "Double('3')",
        "python": "float('3')",
        "java": "Double.parseDouble(\"3\")",
        "csharp": "Convert.ToDouble(\"3\")",
        "shell": "3"
      },
      {
        "description": "new Double with decimal arg",
        "javascript": "new Double(3.005)",
        "python": "float(3.005)",
        "java": "3.005d",
        "csharp": "3.005",
        "shell": "3.005"
      },
      {
        "description": "new Double with hex arg",
        "javascript": "new Double(0x3)",
        "python": "float(0x3)",
        "java": "(double) 0x3",
        "csharp": "Convert.ToDouble(0x3)",
        "shell": "0x3"
      },
      {
        "description": "new Double with octal arg",
        "javascript": "new Double(0o5)",
        "python": "float(0o5)",
        "java": "(double) 05",
        "csharp": "5.0",
        "shell": "0o5"
      }
    ],
    "Long": [
      {
        "description": "Long with two number args",
        "javascript": "new Long(-1, 2147483647)",
        "python": "Int64(9223372036854775807)",
        "java": "9223372036854775807L",
        "csharp": "9223372036854775807L",
        "shell": "new NumberLong(9223372036854775807)"
      }
    ],
    "Decimal128": [
      {
        "description": "new Decimal128 with string arg",
        "javascript": "new Decimal128(Buffer.from('5'))",
        "python": "Decimal128('5.3E-6175')",
        "java": "Decimal128.parse(\"5.3E-6175\")",
        "csharp": "Decimal128.Parse(\"5.3E-6175\")",
        "shell": "new NumberDecimal(5.3E-6175)"
      }
    ],
    "MinKeyMaxKey": [
      {
        "description": "MinKey",
        "javascript": "MinKey()",
        "python": "MinKey()",
        "java": "new MinKey()",
        "csharp": "BsonMinKey.Value",
        "shell": "MinKey()"
      },
      {
        "description": "maxKey",
        "javascript": "MaxKey()",
        "python": "MaxKey()",
        "java": "new MaxKey()",
        "csharp": "BsonMaxKey.Value",
        "shell": "MaxKey()"
      },
      {
        "description": "new MaxKey()",
        "javascript": "new MaxKey()",
        "python": "MaxKey()",
        "java": "new MaxKey()",
        "csharp": "BsonMaxKey.Value",
        "shell": "new MaxKey()"
      },
      {
        "description": "new MinKey()",
        "javascript": "new MinKey()",
        "python": "MinKey()",
        "java": "new MinKey()",
        "csharp": "BsonMinKey.Value",
        "shell": "new MinKey()"
      }
    ],
    "BSONRegExp": [
      {
        "description": "new BSONRegExp with string arg",
        "javascript": "new BSONRegExp('^[a-z0-9_-]{3,16}$')",
        "python": "Regex('^[a-z0-9_-]{3,16}$')",
        "java": "new BsonRegularExpression(\"^[a-z0-9_-]{3,16}$\")",
        "csharp": "new BsonRegularExpression(\"^[a-z0-9_-]{3,16}$\")",
        "shell": "new RegExp('^[a-z0-9_-]{3,16}$')"
      },
      {
        "description": "new BSONRegExp with string arg and flags",
        "javascript": "new BSONRegExp('^[a-z0-9_-]{3,16}$', 'imuxls')",
        "python": "Regex('^[a-z0-9_-]{3,16}$', 'imuxls')",
        "java": "new BsonRegularExpression(\"^[a-z0-9_-]{3,16}$\", \"imuxls\")",
        "csharp": "new BsonRegularExpression(\"^[a-z0-9_-]{3,16}$\", \"imxs\")",
        "shell": "new RegExp('^[a-z0-9_-]{3,16}$', 'imuxls')"
      }
    ],
    "Timestamp": [
      {
        "description": "Timestamp with two number args",
        "javascript": "Timestamp(10, 100)",
        "python": "Timestamp(10, 100)",
        "java": "new BSONTimestamp(10, 100)",
        "csharp": "new BsonTimestamp(10, 100)",
        "shell": "Timestamp(10, 100)"
      },
      {
        "description": "new Timestamp with two number args",
        "javascript": "new Timestamp(10, 100)",
        "python": "Timestamp(10, 100)",
        "java": "new BSONTimestamp(10, 100)",
        "csharp": "new BsonTimestamp(10, 100)",
        "shell": "new Timestamp(10, 100)"
      }
    ],
    "Document": [
      {
        "description": "{x: '1'}",
        "javascript": "{x: '1'}",
        "python": "{\n    'x': '1'\n}",
        "java": "new Document(\"x\", \"1\")",
        "csharp": "new BsonDocument(\"x\", \"1\")",
        "shell": "{\n  x: '1'\n}"
      },
      {
        "description": "Doc with trailing comma",
        "javascript": "{x: '1',}",
        "python": "{\n    'x': '1'\n}",
        "java": "new Document(\"x\", \"1\")",
        "csharp": "new BsonDocument(\"x\", \"1\")",
        "shell": "{\n  x: '1'\n}"
      },
      {
        "description": "Doc with array",
        "javascript": "{x: ['1', '2']}",
        "python": "{\n    'x': [\n        '1', '2'\n    ]\n}",
        "java": "new Document(\"x\", Arrays.asList(\"1\", \"2\"))",
        "csharp": "new BsonDocument(\"x\", new BsonArray\n    {\n        \"1\", \"2\"\n    })",
        "shell": "{\n  x: [\n    '1', '2'\n  ]\n}"
      },
      {
        "description": "Doc with subdoc",
        "javascript": "{x: {y: '2'}}",
        "python": "{\n    'x': {\n        'y': '2'\n    }\n}",
        "java": "new Document(\"x\", new Document(\"y\", \"2\"))",
        "csharp": "new BsonDocument(\"x\", new BsonDocument(\"y\", \"2\"))",
        "shell": "{\n  x: {\n    y: '2'\n  }\n}"
      },
      {
        "description": "Object.create()",
        "javascript": "Object.create({x: '1'})",
        "python": "{\n    'x': '1'\n}",
        "java": "new Document(\"x\", \"1\")",
        "csharp": "new BsonDocument(\"x\", \"1\")",
        "shell": "Object.create({\n  x: '1'\n})"
      },
      {
        "description": "Empty object",
        "javascript": "{}",
        "python": "{}",
        "java": "new Document()",
        "csharp": "new BsonDocument()",
        "shell": "{}"
      },
      {
        "description": "Two items in document",
        "javascript": "{x: '1', n: '4'}",
        "python": "{\n    'x': '1', \n    'n': '4'\n}",
        "java": "new Document(\"x\", \"1\")\n    .append(\"n\", \"4\")",
        "csharp": "new BsonDocument\n{\n    { \"x\", \"1\" }, \n    { \"n\", \"4\" }\n}",
        "shell": "{\n  x: '1', \n  n: '4'\n}"
      },
      {
        "description": "nested document",
        "javascript": "{ $graphLookup : { \"from\" : \"raw_data\", \"startWith\" : \"$_id\", \"connectFromField\" : \"_id\", \"connectToField\" : \"manager\", \"as\" : \"reports\" } }",
        "python": "{\n    '$graphLookup': {\n        'from': 'raw_data', \n        'startWith': '$_id', \n        'connectFromField': '_id', \n        'connectToField': 'manager', \n        'as': 'reports'\n    }\n}",
        "java": "new Document(\"$graphLookup\", new Document(\"from\", \"raw_data\")\n        .append(\"startWith\", \"$_id\")\n        .append(\"connectFromField\", \"_id\")\n        .append(\"connectToField\", \"manager\")\n        .append(\"as\", \"reports\"))",
        "csharp": "new BsonDocument(\"$graphLookup\", new BsonDocument\n    {\n        { \"from\", \"raw_data\" }, \n        { \"startWith\", \"$_id\" }, \n        { \"connectFromField\", \"_id\" }, \n        { \"connectToField\", \"manager\" }, \n        { \"as\", \"reports\" }\n    })",
        "shell": "{\n  $graphLookup: {\n    \"from\": \"raw_data\", \n    \"startWith\": \"$_id\", \n    \"connectFromField\": \"_id\", \n    \"connectToField\": \"manager\", \n    \"as\": \"reports\"\n  }\n}"
      },
      {
        "description": "nested document with array",
        "javascript": "{ status: 'A', $or: [{ qty: { $lt: 30 } }, { item: { $regex: '^p' } }] }",
        "python": "{\n    'status': 'A', \n    '$or': [\n        {\n            'qty': {\n                '$lt': 30\n            }\n        }, {\n            'item': {\n                '$regex': '^p'\n            }\n        }\n    ]\n}",
        "java": "new Document(\"status\", \"A\")\n    .append(\"$or\", Arrays.asList(new Document(\"qty\", new Document(\"$lt\", 30L)), new Document(\"item\", new Document(\"$regex\", \"^p\"))))",
        "csharp": "new BsonDocument\n{\n    { \"status\", \"A\" }, \n    { \"$or\", new BsonArray\n    {\n        new BsonDocument(\"qty\", new BsonDocument(\"$lt\", 30)), new BsonDocument(\"item\", new BsonDocument(\"$regex\", \"^p\"))\n    } }\n}",
        "shell": "{\n  status: 'A', \n  $or: [\n    {\n      qty: {\n        $lt: 30\n      }\n    }, {\n      item: {\n        $regex: '^p'\n      }\n    }\n  ]\n}"
      }

    ],
    "Array": [
      {
        "description": "['1', '2']",
        "javascript": "['1', '2']",
        "python": "[\n    '1', '2'\n]",
        "java": "Arrays.asList(\"1\", \"2\")",
        "csharp": "new BsonArray\n{\n    \"1\", \"2\"\n}",
        "shell": "[\n  '1', '2'\n]"
      },
      {
        "description": "array with trailing comma",
        "javascript": "['1', '2',]",
        "python": "[\n    '1', '2'\n]",
        "java": "Arrays.asList(\"1\", \"2\")",
        "csharp": "new BsonArray\n{\n    \"1\", \"2\"\n}",
        "shell": "[\n  '1', '2'\n]"
      },
      {
        "description": "Array with subdoc",
        "javascript": "['1', { settings: 'http2' }]",
        "python": "[\n    '1', {\n        'settings': 'http2'\n    }\n]",
        "java": "Arrays.asList(\"1\", new Document(\"settings\", \"http2\"))",
        "csharp": "new BsonArray\n{\n    \"1\", new BsonDocument(\"settings\", \"http2\")\n}",
        "shell": "[\n  '1', {\n    settings: 'http2'\n  }\n]"
      },
      {
        "description": "nested array with nested subdoc",
        "javascript": "{\"pipeline\": [ { $match: { $expr: { \"$eq\": [ \"$manager\", \"$$me\" ] } } }, { $project: { managers : 0 } }, { $sort: { startQuarter: 1, notes:1, job_code: 1 } } ]}" ,
        "python": "{\n    'pipeline': [\n        {\n            '$match': {\n                '$expr': {\n                    '$eq': [\n                        '$manager', '$$me'\n                    ]\n                }\n            }\n        }, {\n            '$project': {\n                'managers': 0\n            }\n        }, {\n            '$sort': {\n                'startQuarter': 1, \n                'notes': 1, \n                'job_code': 1\n            }\n        }\n    ]\n}",
        "java": "new Document(\"pipeline\", Arrays.asList(new Document(\"$match\", new Document(\"$expr\", new Document(\"$eq\", Arrays.asList(\"$manager\", \"$$me\")))), new Document(\"$project\", new Document(\"managers\", 0L)), new Document(\"$sort\", new Document(\"startQuarter\", 1L)\n                .append(\"notes\", 1L)\n                .append(\"job_code\", 1L))))",
        "csharp": "new BsonDocument(\"pipeline\", new BsonArray\n    {\n        new BsonDocument(\"$match\", new BsonDocument(\"$expr\", new BsonDocument(\"$eq\", new BsonArray\n                    {\n                        \"$manager\", \"$$me\"\n                    }))), new BsonDocument(\"$project\", new BsonDocument(\"managers\", 0)), new BsonDocument(\"$sort\", new BsonDocument\n            {\n                { \"startQuarter\", 1 }, \n                { \"notes\", 1 }, \n                { \"job_code\", 1 }\n            })\n    })",
        "shell": "{\n  \"pipeline\": [\n    {\n      $match: {\n        $expr: {\n          \"$eq\": [\n            \"$manager\", \"$$me\"\n          ]\n        }\n      }\n    }, {\n      $project: {\n        managers: 0\n      }\n    }, {\n      $sort: {\n        startQuarter: 1, \n        notes: 1, \n        job_code: 1\n      }\n    }\n  ]\n}"
      },
      {
        "description": "Array with subarray",
        "javascript": "['1', ['2', '3']]",
        "python": "[\n    '1', [\n        '2', '3'\n    ]\n]",
        "java": "Arrays.asList(\"1\", Arrays.asList(\"2\", \"3\"))",
        "csharp": "new BsonArray\n{\n    \"1\", new BsonArray\n    {\n        \"2\", \"3\"\n    }\n}",
        "shell": "[\n  '1', [\n    '2', '3'\n  ]\n]"
      },
      {
        "description": "Empty array",
        "javascript": "[]",
        "python": "[]",
        "java": "Arrays.asList()",
        "csharp": "new BsonArray()",
        "shell": "[]"
      }
    ],
    "ArrayElision": [
      {
        "description": "array with leading elision",
        "javascript": "[,'1', '2',]",
        "python": "[\n    None, '1', '2'\n]",
        "java": "Arrays.asList(new BsonUndefined(), \"1\", \"2\")",
        "csharp": "new BsonArray\n{\n    BsonUndefined.Value, \"1\", \"2\"\n}",
        "shell": "[\n  undefined, '1', '2'\n]"
      },
      {
        "description": "Array with one elision",
        "javascript": "[,]",
        "python": "[\n    None\n]",
        "java": "Arrays.asList(new BsonUndefined())",
        "csharp": "new BsonArray\n{\n    BsonUndefined.Value\n}",
        "shell": "[\n  undefined\n]"
      },
      {
        "description": "Array with 2 elision",
        "javascript": "[,,]",
        "python": "[\n    None, None\n]",
        "java": "Arrays.asList(new BsonUndefined(), new BsonUndefined())",
        "csharp": "new BsonArray\n{\n    BsonUndefined.Value, BsonUndefined.Value\n}",
        "shell": "[\n  undefined, undefined\n]"
      },
      {
        "description": "Array with elision in the middle",
        "javascript": "['1',,,,'2']",
        "python": "[\n    '1', None, None, None, '2'\n]",
        "java": "Arrays.asList(\"1\", new BsonUndefined(), new BsonUndefined(), new BsonUndefined(), \"2\")",
        "csharp": "new BsonArray\n{\n    \"1\", BsonUndefined.Value, BsonUndefined.Value, BsonUndefined.Value, \"2\"\n}",
        "shell": "[\n  '1', undefined, undefined, undefined, '2'\n]"
      }
    ],
    "Symbol": [
      {
        "description": "Symbol from string",
        "javascript": "Symbol('2')",
        "python": "'2'",
        "java": "new Symbol(\"2\")",
        "csharp": "\"2\"",
        "shell": "'2'"
      },
      {
        "description": "new Symbol from string",
        "javascript": "new Symbol('2')",
        "python": "'2'",
        "java": "new Symbol(\"2\")",
        "csharp": "\"2\"",
        "shell": "'2'"
      }
    ]
  }
}
