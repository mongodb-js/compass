{
  "tests": {
    "ObjectId": [
      {
        "description": "createFromHexString",
        "javascript": "ObjectId.createFromHexString('5ab901c29ee65f5c8550c5b9')",
        "python": "ObjectId(u'5ab901c29ee65f5c8550c5b9')",
        "java": "new ObjectId(\"5ab901c29ee65f5c8550c5b9\")",
        "shell": "ObjectId('5ab901c29ee65f5c8550c5b9')",
        "csharp": "new ObjectId.Parse(\"5ab901c29ee65f5c8550c5b9\")"
      },
      {
        "description": "createFromTime",
        "javascript": "ObjectId.createFromTime(1522075031642)",
        "python": "ObjectId.from_datetime(datetime.datetime.fromtimestamp(1522075031642/1000.0))",
        "java": "new ObjectId(new java.util.Date(new java.lang.Long(\"1522075031642\")))",
        "shell": "ObjectId.fromDate(new Date(1522075031642))",
        "csharp": "new ObjectId.GenerateNewId(1522075031642)"
      },
      {
        "description": "createFromTime with date",
        "javascript": "ObjectId.createFromTime(new Date())",
        "python": "ObjectId.from_datetime(datetime.datetime.fromtimestamp(datetime.datetime.utcnow().date()/1000.0))",
        "java": "new ObjectId(new java.util.Date())",
        "csharp": "new ObjectId.GenerateNewId(DateTime.Now)",
        "shell": "ObjectId.fromDate(new Date())"
      },
      {
        "description": "isValid",
        "javascript": "ObjectId.isValid('5ab901c29ee65f5c8550c5b9')",
        "python": "ObjectId.is_valid('5ab901c29ee65f5c8550c5b9')",
        "java": "ObjectId.isValid(\"5ab901c29ee65f5c8550c5b9\")",
        "shell": "",
        "csharp": "new ObjectId.Parse(\"5ab901c29ee65f5c8550c5b9\")"
      }
    ],
    "Binary": [
      {
        "description": "subtype default",
        "javascript": "Binary.SUBTYPE_DEFAULT",
        "python": "bson.binary.BINARY_SUBTYPE",
        "java": "org.bson.BsonBinarySubType.BINARY",
        "shell": "0",
        "csharp": "BsonBinarySubType.Binary"
      },
      {
        "description": "subtype function",
        "javascript": "Binary.SUBTYPE_FUNCTION",
        "python": "bson.binary.FUNCTION_SUBTYPE",
        "java": "org.bson.BsonBinarySubType.FUNCTION",
        "shell": "1",
        "csharp": "BsonBinarySubType.Function"
      },
      {
        "description": "subtype byte array",
        "javascript": "Binary.SUBTYPE_BYTE_ARRAY",
        "python": "bson.binary.OLD_BINARY_SUBTYPE",
        "java": "org.bson.BsonBinarySubType.OLD_BINARY",
        "shell": "2",
        "csharp": "BsonBinarySubType.OldBinary"
      },
      {
        "description": "subtype uuid old",
        "javascript": "Binary.SUBTYPE_UUID_OLD",
        "python": "bson.binary.OLD_UUID_SUBTYPE",
        "java": "org.bson.BsonBinarySubType.UUID_LEGACY",
        "shell": "3",
        "csharp": "BsonBinarySubType.UuidLegacy"
      },
      {
        "description": "subtype uuid",
        "javascript": "Binary.SUBTYPE_UUID",
        "python": "bson.binary.UUID_SUBTYPE",
        "java": "org.bson.BsonBinarySubType.UUID_STANDARD",
        "shell": "4",
        "csharp": "BsonBinarySubType.UuidStandard"
      },
      {
        "description": "subtype md5",
        "javascript": "Binary.SUBTYPE_MD5",
        "python": "bson.binary.MD5_SUBTYPE",
        "java": "org.bson.BsonBinarySubType.MD5",
        "shell": "5",
        "csharp": "BsonBinarySubType.MD5"
      },
      {
        "description": "subtype udef",
        "javascript": "Binary.SUBTYPE_USER_DEFINED",
        "python": "bson.binary.USER_DEFINED_SUBTYPE",
        "java": "org.bson.BsonBinarySubType.USER_DEFINED",
        "shell": "80",
        "csharp": "BsonBinarySubType.UserDefined"
      }
    ],
    "Long": [
      {
        "description": "MAX_VALUE",
        "javascript": "Long.MAX_VALUE",
        "python": "sys.maxsize",
        "java": "java.lang.Long.MAX_VALUE",
        "shell": "math.max()",
        "csharp": "Int64.MaxValue"
      },
      {
        "description": "MIN_VALUE",
        "javascript": "Long.MIN_VALUE",
        "python": "-sys.maxsize -1",
        "java": "java.lang.Long.MIN_VALUE",
        "shell": "math.min()",
        "csharp": "Int64.MinValue"
      },
      {
        "description": "ZERO",
        "javascript": "Long.ZERO",
        "python": "Int64(0)",
        "java": "new java.lang.Long(0)",
        "shell": "0",
        "csharp": "BsonInt64.ToInt64(0)"
      },
      {
        "description": "ONE",
        "javascript": "Long.ONE",
        "python": "Int64(1)",
        "java": "new java.lang.Long(1)",
        "shell": "1",
        "csharp": "BsonInt64.ToInt64(1)"
      },
      {
        "description": "NEG_ONE",
        "javascript": "Long.NEG_ONE",
        "python": "Int64(-1)",
        "java": "new java.lang.Long(-1)",
        "shell": "-1",
        "csharp": "BsonInt64.ToInt64(-1)"
      },
      {
        "description": "fromInt",
        "javascript": "Long.fromInt(5)",
        "python": "Int64(5)",
        "java": "new java.lang.Long(\"5\")",
        "shell": "NumberLong(5)",
        "csharp": "BsonInt64.ToInt64(5)"
      },
      {
        "description": "fromString without radix",
        "javascript": "Long.fromString('5')",
        "python": "Int64(int('5'))",
        "java": "java.lang.Long.parseLong(\"5\")",
        "shell": "NumberLong('5')",
        "csharp": "BsonInt64.ToInt64(\"5\")"
      },
      {
        "description": "fromString with radix",
        "javascript": "Long.fromString('5', 10)",
        "python": "Int64(int('5'))",
        "java": "java.lang.Long.parseLong(\"5\", 10)",
        "shell": "NumberLong('5')",
        "csharp": "Int64.TryParse(\"5\", 10)"
      },
      {
        "description": "fromBits",
        "javascript": "Long.fromBits(-1, 2147483647)",
        "python": "Int64(9223372036854775807)",
        "java": "new java.lang.Long(\"9223372036854775807\")",
        "shell": "NumberLong(2147483647)",
        "csharp": "BsonInt64.ToInt64(9223372036854775807)"
      }
    ],
    "Decimal128": [
      {
        "description": "fromString",
        "javascript": "Decimal128.fromString(\"5\")",
        "python": "Decimal128('5')",
        "java": "Decimal128.parse(\"5\")",
        "shell": "NumberDecimal('5')",
        "csharp": "new Decimal128.TryParse(\"5\")"
      }
    ]
  }
}
