{
  "tests": {
    "Code": [
      {
        "description": "CodeWithScope toJSON",
        "query": "Code('test code', {x: 1}).toJSON()",
        "python": "",
        "java": "new Document().append(\"code\", \"test code\").append(\"scope\", new Document().append(\"x\", 1))",
        "csharp": ""
      },
      {
        "description": "Code toJSON",
        "query": "Code('test code').toJSON()",
        "python": "",
        "java": "new Document().append(\"code\", \"test code\").append(\"scope\", undefined)",
        "csharp": ""
      }
    ],
    "ObjectId": [
      {
        "description": "no arguments toJSON",
        "query": "ObjectId().toJSON()",
        "python": "",
        "java": "new ObjectId().toHexString()",
        "csharp": ""
      },
      {
        "description": "hex arg toJSON",
        "query": "ObjectId('5ab901c29ee65f5c8550c5b9').toJSON()",
        "python": "",
        "java": "new ObjectId(\"5ab901c29ee65f5c8550c5b9\").toHexString()",
        "csharp": ""
      },
      {
        "description": "no arg toString",
        "query": "ObjectId().toString()",
        "python": "",
        "java": "new ObjectId().toString()",
        "csharp": ""
      },
      {
        "description": "hex arg toString",
        "query": "ObjectId('5ab901c29ee65f5c8550c5b9').toString()",
        "python": "",
        "java": "new ObjectId(\"5ab901c29ee65f5c8550c5b9\").toString()",
        "csharp": ""
      },
      {
        "description": "getTimestamp",
        "query": "ObjectId('5ab901c29ee65f5c8550c5b9').getTimestamp()",
        "python": "",
        "java": "new ObjectId(\"5ab901c29ee65f5c8550c5b9\").getTimestamp()",
        "csharp": ""
      },
      {
        "description": "equals",
        "query": "ObjectId().equals(ObjectId())",
        "python": "",
        "java": "new ObjectId().equals(new ObjectId())",
        "csharp": ""
      }
    ],
    "Binary": [
      {
        "description": "length",
        "query": "Binary(Buffer.from('a string')).length()",
        "python": "",
        "java": "new Binary(\"a string\".getBytes(\"UTF-8\")).length()",
        "csharp": ""
      },
      {
        "description": "value",
        "query": "Binary(Buffer.from('a string')).value()",
        "python": "",
        "java": "new Binary(\"a string\".getBytes(\"UTF-8\")).getData()",
        "csharp": ""
      },
      {
        "description": "toString",
        "query": "Binary(Buffer.from('a string')).toString()",
        "python": "",
        "java": "new Binary(\"a string\".getBytes(\"UTF-8\")).toString()",
        "csharp": ""
      },
      {
        "description": "toJSON",
        "query": "Binary(Buffer.from('a string')).toJSON()",
        "python": "",
        "java": "new Binary(\"a string\".getBytes(\"UTF-8\")).toString()",
        "csharp": ""
      }
    ],
    "DBRef": [
      {
        "description": "toJSON with two args",
        "query": "new DBRef('coll', new ObjectId()).toJSON()",
        "python": "",
        "java": "new Document().append(\"$ref\", \"coll\").append(\"$id\", new ObjectId()).append(\"$db\", \"\")",
        "csharp": ""
      },
      {
        "description": "toJSON with three args",
        "query": "new DBRef('coll', new ObjectId(), 'db').toJSON()",
        "python": "",
        "java": "new Document().append(\"$ref\", \"coll\").append(\"$id\", new ObjectId()).append(\"$db\", \"db\")",
        "csharp": ""
      }
    ],
    "Int32": [
      {
        "description": "toJSON",
        "query": "Int32(3).toJSON()",
        "python": "",
        "java": "new java.lang.Integer(3).intValue()",
        "csharp": ""
      },
      {
        "description": "valueOf",
        "query": "Int32(3).valueOf()",
        "python": "",
        "java": "new java.lang.Integer(3).intValue()",
        "csharp": ""
      }
    ],
    "Double": [
      {
        "description": "toJSON",
        "query": "Double(3).toJSON()",
        "python": "",
        "java": "new java.lang.Double(3).doubleValue()",
        "csharp": ""
      },
      {
        "description": "valueOf",
        "query": "Double(3).valueOf()",
        "python": "",
        "java": "new java.lang.Double(3).doubleValue()",
        "csharp": ""
      }
    ],
    "Long": [
      {
        "description": "toJSON",
        "query": "Long(1, 100).toJSON()",
        "python": "",
        "java": "new java.lang.Long(\"429496729601\").toString()",
        "csharp": ""
      },
      {
        "description": "toInt",
        "query": "Long(1, 100).toInt()",
        "python": "",
        "java": "new java.lang.Long(\"429496729601\").intValue()",
        "csharp": ""
      },
      {
        "description": "toNumber",
        "query": "Long(1, 100).toNumber()",
        "python": "",
        "java": "new java.lang.Long(\"429496729601\").floatValue()",
        "csharp": ""
      },
      {
        "description": "toString without radix",
        "query": "Long(1, 100).toString()",
        "python": "",
        "java": "java.lang.Long.toString(429496729601)",
        "csharp": ""
      },
      {
        "description": "toString with radix",
        "query": "Long(1, 100).toString(10)",
        "python": "",
        "java": "java.lang.Long.toString(429496729601, 10)",
        "csharp": ""
      },
      {
        "description": "isZero",
        "query": "Long(1, 100).isZero()",
        "python": "",
        "java": "new java.lang.Long(\"429496729601\").equals(new java.lang.Long(0))",
        "csharp": ""
      },
      {
        "description": "isNegative",
        "query": "Long(1, 100).isNegative()",
        "python": "",
        "java": "new java.lang.Long(\"429496729601\").compareTo(new java.lang.Long(0)) < 0",
        "csharp": ""
      },
      {
        "description": "isOdd",
        "query": "Long(1, 100).isOdd()",
        "python": "",
        "java": "new java.lang.Long(\"429496729601\") % 2 == 0",
        "csharp": ""
      },
      {
        "description": "equals",
        "query": "Long(1, 100).equals(Long(9, 1))",
        "python": "",
        "java": "new java.lang.Long(\"429496729601\").equals(new java.lang.Long(\"4294967305\"))",
        "csharp": ""
      },
      {
        "description": "notEquals",
        "query": "Long(1, 100).notEquals(Long(9, 1))",
        "python": "",
        "java": "new java.lang.Long(\"429496729601\").compareTo(new java.lang.Long(\"4294967305\")) != 0",
        "csharp": ""
      },
      {
        "description": "compare",
        "query": "Long(1, 100).compare(Long(9, 1))",
        "python": "",
        "java": "new java.lang.Long(\"429496729601\").compareTo(new java.lang.Long(\"4294967305\"))",
        "csharp": ""
      },
      {
        "description": "greaterThan",
        "query": "Long(1, 100).greaterThan(Long(9, 1))",
        "python": "",
        "java": "new java.lang.Long(\"429496729601\").compareTo(new java.lang.Long(\"4294967305\")) > 0",
        "csharp": ""
      },
      {
        "description": "greaterThanOrEqual",
        "query": "Long(1, 100).greaterThanOrEqual(Long(9, 1))",
        "python": "",
        "java": "new java.lang.Long(\"429496729601\").compareTo(new java.lang.Long(\"4294967305\")) >= 0",
        "csharp": ""
      },
      {
        "description": "lessThan",
        "query": "Long(1, 100).lessThan(Long(9, 1))",
        "python": "",
        "java": "new java.lang.Long(\"429496729601\").compareTo(new java.lang.Long(\"4294967305\")) < 0",
        "csharp": ""
      },
      {
        "description": "lessThanOrEqual",
        "query": "Long(1, 100).lessThanOrEqual(Long(9, 1))",
        "python": "",
        "java": "new java.lang.Long(\"429496729601\").compareTo(new java.lang.Long(\"4294967305\")) <= 0",
        "csharp": ""
      },
      {
        "description": "negate",
        "query": "Long(1, 100).negate())",
        "python": "",
        "java": "-new java.lang.Long(\"429496729601\")",
        "csharp": ""
      },
      {
        "description": "add",
        "query": "Long(1, 100).add(Long(9, 1))",
        "python": "",
        "java": "new java.lang.Long(\"429496729601\") + new java.lang.Long(\"4294967305\")",
        "csharp": ""
      },
      {
        "description": "subtract",
        "query": "Long(1, 100).subtract(Long(9, 1))",
        "python": "",
        "java": "new java.lang.Long(\"429496729601\") - new java.lang.Long(\"4294967305\")",
        "csharp": ""
      },
      {
        "description": "multiply",
        "query": "Long(1, 100).multiply(Long(9, 1))",
        "python": "",
        "java": "new java.lang.Long(\"429496729601\") * new java.lang.Long(\"4294967305\")",
        "csharp": ""
      },
      {
        "description": "div",
        "query": "Long(1, 100).div(Long(9, 1))",
        "python": "",
        "java": "new java.lang.Long(\"429496729601\") / new java.lang.Long(\"4294967305\")",
        "csharp": ""
      },
      {
        "description": "modulo",
        "query": "Long(1, 100).modulo(Long(9, 1))",
        "python": "",
        "java": "new java.lang.Long(\"429496729601\") % new java.lang.Long(\"4294967305\")",
        "csharp": ""
      },
      {
        "description": "not",
        "query": "Long(1, 100).not()",
        "python": "",
        "java": "~new java.lang.Long(\"429496729601\")",
        "csharp": ""
      },
      {
        "description": "and",
        "query": "Long(1, 100).and(Long(9, 1))",
        "python": "",
        "java": "new java.lang.Long(\"429496729601\") & new java.lang.Long(\"4294967305\")",
        "csharp": ""
      },
      {
        "description": "or",
        "query": "Long(1, 100).or(Long(9, 1))",
        "python": "",
        "java": "new java.lang.Long(\"429496729601\") | new java.lang.Long(\"4294967305\")",
        "csharp": ""
      },
      {
        "description": "xor",
        "query": "Long(1, 100).xor(Long(9, 1))",
        "python": "",
        "java": "new java.lang.Long(\"429496729601\") ^ new java.lang.Long(\"4294967305\")",
        "csharp": ""
      },
      {
        "description": "shiftLeft",
        "query": "Long(1, 100).shiftLeft(10)",
        "python": "",
        "java": "java.lang.Long.rotateLeft(new java.lang.Long(\"429496729601\"), 10)",
        "csharp": ""
      },
      {
        "description": "shiftRight",
        "query": "Long(1, 100).shiftRight(10)",
        "python": "",
        "java": "java.lang.Long.rotateRight(new java.lang.Long(\"429496729601\"), 10)",
        "csharp": ""
      }
    ],
    "Decimal128": [
      {
        "description": "toString",
        "query": "new Decimal128(Buffer.from('5')).toString()",
        "python": "",
        "java": "Decimal128.parse(\"5.3E-6175\").toString()",
        "csharp": ""
      },
      {
        "description": "toJSON",
        "query": "new Decimal128(Buffer.from('5')).toJSON()",
        "python": "",
        "java": "new Document().append(\"$numberDecimal\", Decimal128.parse(\"5.3E-6175\").toString())",
        "csharp": ""
      }
    ],
    "Timestamp": [
      {
        "description": "toJSON",
        "query": "Timestamp(1, 100).toJSON()",
        "python": "",
        "java": "new BSONTimestamp(1, 100).toString()",
        "csharp": ""
      },
      {
        "description": "toString",
        "query": "Timestamp(1, 100).toString()",
        "python": "",
        "java": "new BSONTimestamp(1, 100).toString()",
        "csharp": ""
      },
      {
        "description": "equals",
        "query": "Timestamp(1, 100).equals(Timestamp(2, 99))",
        "python": "",
        "java": "new BSONTimestamp(1, 100).equals(new BSONTimestamp(2, 99))",
        "csharp": ""
      },
      {
        "description": "compare",
        "query": "Timestamp(1, 100).compare(Timestamp(2, 99))",
        "python": "",
        "java": "new BSONTimestamp(1, 100).compareTo(new BSONTimestamp(2, 99))",
        "csharp": ""
      },
      {
        "description": "notEquals",
        "query": "Timestamp(1, 100).notEquals(Timestamp(2, 99))",
        "python": "",
        "java": "new BSONTimestamp(1, 100).compareTo(new BSONTimestamp(2, 99)) != 0",
        "csharp": ""
      },
      {
        "description": "greaterThan",
        "query": "Timestamp(1, 100).greaterThan(Timestamp(2, 99))",
        "python": "",
        "java": "new BSONTimestamp(1, 100).compareTo(new BSONTimestamp(2, 99)) > 0",
        "csharp": ""
      },
      {
        "description": "greaterThanOrEqual",
        "query": "Timestamp(1, 100).greaterThanOrEqual(Timestamp(2, 99))",
        "python": "",
        "java": "new BSONTimestamp(1, 100).compareTo(new BSONTimestamp(2, 99)) >= 0",
        "csharp": ""
      },
      {
        "description": "lessThan",
        "query": "Timestamp(1, 100).lessThan(Timestamp(2, 99))",
        "python": "",
        "java": "new BSONTimestamp(1, 100).compareTo(new BSONTimestamp(2, 99)) < 0",
        "csharp": ""
      },
      {
        "description": "lessThanOrEqual",
        "query": "Timestamp(1, 100).lessThanOrEqual(Timestamp(2, 99))",
        "python": "",
        "java": "new BSONTimestamp(1, 100).compareTo(new BSONTimestamp(2, 99)) <= 0",
        "csharp": ""
      },
      {
        "description": "getLowBits",
        "query": "Timestamp(1, 100).getLowBits()",
        "python": "",
        "java": "new BSONTimestamp(1, 100).getTime()",
        "csharp": ""
      },
      {
        "description": "getHighBits",
        "query": "Timestamp(1, 100).getHighBits()",
        "python": "",
        "java": "new BSONTimestamp(1, 100).getInc()",
        "csharp": ""
      }
    ],
    "Symbol": [
      {
        "description": "valueOf",
        "query": "Symbol('2').valueOf()",
        "python": "",
        "java": "new Symbol(\"2\").getSymbol()",
        "csharp": ""
      },
      {
        "description": "toString",
        "query": "Symbol('2').toString()",
        "python": "",
        "java": "new Symbol(\"2\").toString()",
        "csharp": ""
      },
      {
        "description": "inspect",
        "query": "Symbol('2').inspect()",
        "python": "",
        "java": "new Symbol(\"2\").getSymbol()",
        "csharp": ""
      },
      {
        "description": "toJSON",
        "query": "Symbol('2').toJSON()",
        "python": "",
        "java": "new Symbol(\"2\").toString()",
        "csharp": ""
      }
    ]
  }
}
