{
  "tests": {
    "Code": [
      {
        "description": "new Code with string arg",
        "javascript": "new Code('some code')",
        "python": "Code('some code')",
        "java": "new Code(\"some code\")",
        "csharp": "new BsonJavaScript(\"some code\")",
        "shell": "new Code('some code')"
      },
      {
        "description": "Code with string code",
        "javascript": "Code('some code')",
        "python": "Code('some code')",
        "java": "new Code(\"some code\")",
        "csharp": "new BsonJavaScript(\"some code\")",
        "shell": "Code('some code')"
      },
      {
        "description": "Code with string code and object scope",
        "javascript": "Code('string', {x: '1'})",
        "python": "Code('string', {'x': '1'})",
        "java": "new CodeWithScope(\"string\", new Document(\"x\", \"1\"))",
        "csharp": "new BsonJavaScriptWithScope(\"string\", new BsonDocument(\"x\", \"1\"))",
        "shell": "Code('string', {x: '1'})"
      },
      {
        "description": "Code with no args",
        "javascript": "Code('')",
        "python": "Code('')",
        "java": "new Code(\"\")",
        "csharp": "new BsonJavaScript(\"\")",
        "shell": "Code()"
      }
    ],
    "ObjectId": [
      {
        "description": "ObjectId with no arg",
        "javascript": "ObjectId()",
        "python": "ObjectId()",
        "java": "new ObjectId()",
        "csharp": "new ObjectId()",
        "shell": "ObjectId()"
      },
      {
        "description": "new ObjectId with no arg",
        "javascript": "new ObjectId()",
        "python": "ObjectId()",
        "java": "new ObjectId()",
        "csharp": "new ObjectId()",
        "shell": "new ObjectId()"
      },
      {
        "description": "ObjectId with hex string arg",
        "javascript": "ObjectId('5a7382114ec1f67ae445f778')",
        "python": "ObjectId('5a7382114ec1f67ae445f778')",
        "java": "new ObjectId(\"5a7382114ec1f67ae445f778\")",
        "csharp": "new ObjectId(\"5a7382114ec1f67ae445f778\")",
        "shell": "ObjectId('5a7382114ec1f67ae445f778')"
      }
    ],
    "BinData": [
      {
        "description": "new Binary with (ascii buffer, UUID subtype enum) args",
        "javascript": "new Binary('1234', '4')",
        "python": "Binary(b'1234', bson.binary.UUID_SUBTYPE)",
        "java": "new Binary(BsonBinarySubType.UUID_STANDARD, \"1234\".getBytes(\"UTF-8\"))",
        "csharp": "new BsonBinaryData(System.Text.Encoding.ASCII.GetBytes(\"1234\"), BsonBinarySubType.UuidStandard)",
        "shell": "new BinData(4, '1234')"
      }
    ],
    "DBRef": [
      {
        "description": "new DBRef with (string, ObjectID) args",
        "javascript": "new DBRef('coll', ObjectId())",
        "python": "DBRef('coll', ObjectId())",
        "java": "new DBRef(\"coll\", new ObjectId())",
        "csharp": "new MongoDBRef(\"coll\", new ObjectId())",
        "shell": "new DBRef('coll', ObjectId())"
      },
      {
        "description": "new DBRef with (string, ObjectId, string) args",
        "javascript": "new DBRef('coll', ObjectId(), 'db')",
        "python": "DBRef('coll', ObjectId(), 'db')",
        "java": "new DBRef(\"db\", \"coll\", new ObjectId())",
        "csharp": "new MongoDBRef(\"coll\", new ObjectId(), \"db\")",
        "shell": "new DBRef('coll', ObjectId(), 'db')"
      }
    ],
    "NumberInt": [
      {
        "description": "NumberInt with number arg",
        "javascript": "Int32(3)",
        "python": "int(3)",
        "java": "3",
        "csharp": "3",
        "shell": "NumberInt(3)"
      },
      {
        "description": "NumberInt with valid string arg",
        "javascript": "Int32('3')",
        "python": "int('3')",
        "java": "Integer.parseInt(\"3\")",
        "csharp": "Convert.ToInt32(\"3\")",
        "shell": "NumberInt('3')"
      },
      {
        "description": "NumberInt with no arg",
        "javascript": "Int32(0)",
        "python": "int(0)",
        "java": "0",
        "csharp": "0",
        "shell": "NumberInt()"
      }
    ],
    "Double literal": [
      {
        "description": "Double",
        "javascript": "3",
        "python": "3",
        "java": "3L",
        "csharp": "3",
        "shell": "3"
      },
      {
        "description": "Double with .",
        "javascript": "3.001",
        "python": "3.001",
        "java": "3.001d",
        "csharp": "3.001",
        "shell": "3.001"
      }
    ],
    "NumberLong": [
      {
        "description": "NumberLong with no args",
        "javascript": "new Long.fromNumber(0)",
        "python": "Int64(0)",
        "java": "0L",
        "csharp": "0L",
        "shell": "new NumberLong()"
      },
      {
        "description": "Long with one number arg",
        "javascript": "new Long.fromNumber(10)",
        "python": "Int64(10)",
        "java": "10L",
        "csharp": "10L",
        "shell": "new NumberLong(10)"
      },
      {
        "description": "Long with one string arg",
        "javascript": "new Long.fromString('10')",
        "python": "Int64('10')",
        "java": "Long.parseLong(\"10\")",
        "csharp": "Convert.ToInt64(\"10\")",
        "shell": "new NumberLong('10')"
      }
    ],
    "Decimal128": [
      {
        "description": "Decimal128 with string arg",
        "javascript": "Decimal128.fromString('5')",
        "python": "Decimal128('5')",
        "java": "Decimal128.parse(\"5\")",
        "csharp": "Decimal128.Parse(\"5\")",
        "shell": "NumberDecimal('5')"
      },
      {
        "description": "Decimal128 with num arg",
        "javascript": "Decimal128.fromString('5')",
        "python": "Decimal128('5')",
        "java": "Decimal128.parse(\"5\")",
        "csharp": "Decimal128.Parse(\"5\")",
        "shell": "NumberDecimal(5)"
      },
      {
        "description": "Decimal128 with no arg",
        "javascript": "Decimal128.fromString('0')",
        "python": "Decimal128('0')",
        "java": "Decimal128.parse(\"0\")",
        "csharp": "Decimal128.Parse(\"0\")",
        "shell": "NumberDecimal()"
      }
    ],
    "MinKeyMaxKey": [
      {
        "description": "MinKey",
        "javascript": "MinKey()",
        "python": "MinKey()",
        "java": "new MinKey()",
        "csharp": "BsonMinKey.Value",
        "shell": "MinKey()"
      },
      {
        "description": "new MinKey",
        "javascript": "new MinKey()",
        "python": "MinKey()",
        "java": "new MinKey()",
        "csharp": "BsonMinKey.Value",
        "shell": "new MinKey()"
      },
      {
        "description": "maxKey",
        "javascript": "MaxKey()",
        "python": "MaxKey()",
        "java": "new MaxKey()",
        "csharp": "BsonMaxKey.Value",
        "shell": "MaxKey()"
      },
      {
        "description": "new MaxKey()",
        "javascript": "new MaxKey()",
        "python": "MaxKey()",
        "java": "new MaxKey()",
        "csharp": "BsonMaxKey.Value",
        "shell": "new MaxKey()"
      }
    ],
    "Timestamp": [
      {
        "description": "Timestamp with two number args",
        "javascript": "Timestamp(10, 100)",
        "python": "Timestamp(10, 100)",
        "java": "new BSONTimestamp(10, 100)",
        "csharp": "new BsonTimestamp(10, 100)",
        "shell": "Timestamp(10, 100)"
      },
      {
        "description": "new Timestamp with two number args",
        "javascript": "new Timestamp(10, 100)",
        "python": "Timestamp(10, 100)",
        "java": "new BSONTimestamp(10, 100)",
        "csharp": "new BsonTimestamp(10, 100)",
        "shell": "new Timestamp(10, 100)"
      },
      {
        "description": "Timestamp with no number args",
        "javascript": "new Timestamp(0, 0)",
        "python": "Timestamp(0, 0)",
        "java": "new BSONTimestamp(0, 0)",
        "csharp": "new BsonTimestamp(0, 0)",
        "shell": "new Timestamp()"
      }
    ],
    "Document": [
      {
        "description": "{x: 1}",
        "javascript": "{x: 1}",
        "python": "{'x': 1}",
        "java": "new Document(\"x\", 1L)",
        "csharp": "new BsonDocument(\"x\", 1)",
        "shell": "{x: 1}"
      },
      {
        "description": "Doc with trailing comma",
        "javascript": "{x: 1}",
        "python": "{'x': 1}",
        "java": "new Document(\"x\", 1L)",
        "csharp": "new BsonDocument(\"x\", 1)",
        "shell": "{x: 1,}"
      },
      {
        "description": "Doc with array",
        "javascript": "{x: [1, 2]}",
        "python": "{'x': [1, 2]}",
        "java": "new Document(\"x\", Arrays.asList(1L, 2L))",
        "csharp": "new BsonDocument(\"x\", new BsonArray {1, 2})",
        "shell": "{x: [1,2]}"
      },
      {
        "description": "Doc with subdoc",
        "javascript": "{x: {y: 2}}",
        "python": "{'x': {'y': 2}}",
        "java": "new Document(\"x\", new Document(\"y\", 2L))",
        "csharp": "new BsonDocument(\"x\", new BsonDocument(\"y\", 2))",
        "shell": "{x: {y: 2}}"
      },
      {
        "description": "Object.create()",
        "javascript": "Object.create({x: 1})",
        "python": "{'x': 1}",
        "java": "new Document(\"x\", 1L)",
        "csharp": "new BsonDocument(\"x\", 1)",
        "shell": "Object.create({x: 1})"
      },
      {
        "description": "Empty object",
        "javascript": "{}",
        "python": "{}",
        "java": "new Document()",
        "csharp": "new BsonDocument()",
        "shell": "{}"
      },
      {
        "description": "Two items in document",
        "javascript": "{x: 1, n: 4}",
        "python": "{'x': 1, 'n': 4}",
        "java": "new Document(\"x\", 1L).append(\"n\", 4L)",
        "csharp": "new BsonDocument { { \"x\", 1 }, { \"n\", 4 } }",
        "shell": "{x: 1, n: 4}"
      }
    ],
    "Array": [
      {
        "description": "[1, 2]",
        "javascript": "[1, 2]",
        "python": "[1, 2]",
        "java": "Arrays.asList(1L, 2L)",
        "csharp": "new BsonArray {1, 2}",
        "shell": "[1, 2]"
      },
      {
        "description": "array with trailing comma",
        "javascript": "[1, 2]",
        "python": "[1, 2]",
        "java": "Arrays.asList(1L, 2L)",
        "csharp": "new BsonArray {1, 2}",
        "shell": "[1, 2,]"
      },
      {
        "description": "Array with subdoc",
        "javascript": "[1, {settings: 'http2'}]",
        "python": "[1, {'settings': 'http2'}]",
        "java": "Arrays.asList(1L, new Document(\"settings\", \"http2\"))",
        "csharp": "new BsonArray {1, new BsonDocument(\"settings\", \"http2\")}",
        "shell": "[1, { settings: 'http2' }]"
      },
      {
        "description": "Array with subarray",
        "javascript": "[1, [2, 3]]",
        "python": "[1, [2, 3]]",
        "java": "Arrays.asList(1L, Arrays.asList(2L, 3L))",
        "csharp": "new BsonArray {1, new BsonArray {2, 3}}",
        "shell": "[1, [2, 3]]"
      },
      {
        "description": "Empty array",
        "javascript": "[]",
        "python": "[]",
        "java": "Arrays.asList()",
        "csharp": "new BsonArray()",
        "shell": "[]"
      }
    ],
    "ArrayElision": [
      {
        "description": "array with leading elision",
        "javascript": "[undefined, 1, 2]",
        "python": "[None, 1, 2]",
        "java": "Arrays.asList(new BsonUndefined(), 1L, 2L)",
        "csharp": "new BsonArray {BsonUndefined.Value, 1, 2}",
        "shell": "[,1, 2,]"
      },
      {
        "description": "Array with one elision",
        "javascript": "[undefined]",
        "python": "[None]",
        "java": "Arrays.asList(new BsonUndefined())",
        "csharp": "new BsonArray {BsonUndefined.Value}",
        "shell": "[,]"
      },
      {
        "description": "Array with 2 elision",
        "javascript": "[undefined, undefined]",
        "python": "[None, None]",
        "java": "Arrays.asList(new BsonUndefined(), new BsonUndefined())",
        "csharp": "new BsonArray {BsonUndefined.Value, BsonUndefined.Value}",
        "shell": "[,,]"
      },
      {
        "description": "Array with elision in the middle",
        "javascript": "[1, undefined, undefined, undefined, 2]",
        "python": "[1, None, None, None, 2]",
        "java": "Arrays.asList(1L, new BsonUndefined(), new BsonUndefined(), new BsonUndefined(), 2L)",
        "csharp": "new BsonArray {1, BsonUndefined.Value, BsonUndefined.Value, BsonUndefined.Value, 2}",
        "shell": "[1,,,,2]"
      }
    ]
  }
}
