{
  "tests": {
    "Code": [
      {
        "description": "new Code with string arg",
        "javascript": "new Code('some code')",
        "python": "Code('some code')",
        "java": "new Code(\"some code\")",
        "csharp": "new BsonJavaScript(\"some code\")",
        "shell": "new Code('some code')"
      },
      {
        "description": "Code with string code",
        "javascript": "Code('some code')",
        "python": "Code('some code')",
        "java": "new Code(\"some code\")",
        "csharp": "new BsonJavaScript(\"some code\")",
        "shell": "Code('some code')"
      },
      {
        "description": "Code with string code and object scope",
        "javascript": "Code('string', {\n  x: '1'\n})",
        "python": "Code('string', {\n    'x': '1'\n})",
        "java": "new CodeWithScope(\"string\", new Document(\"x\", \"1\"))",
        "csharp": "new BsonJavaScriptWithScope(\"string\", new BsonDocument(\"x\", \"1\"))",
        "shell": "Code('string', {x: '1'})"
      },
      {
        "description": "Code with no args",
        "javascript": "Code('')",
        "python": "Code('')",
        "java": "new Code(\"\")",
        "csharp": "new BsonJavaScript(\"\")",
        "shell": "Code()"
      }
    ],
    "ObjectId": [
      {
        "description": "ObjectId with no arg",
        "javascript": "ObjectId()",
        "python": "ObjectId()",
        "java": "new ObjectId()",
        "csharp": "new ObjectId()",
        "shell": "ObjectId()"
      },
      {
        "description": "new ObjectId with no arg",
        "javascript": "new ObjectId()",
        "python": "ObjectId()",
        "java": "new ObjectId()",
        "csharp": "new ObjectId()",
        "shell": "new ObjectId()"
      },
      {
        "description": "ObjectId with hex string arg",
        "javascript": "ObjectId('5a7382114ec1f67ae445f778')",
        "python": "ObjectId('5a7382114ec1f67ae445f778')",
        "java": "new ObjectId(\"5a7382114ec1f67ae445f778\")",
        "csharp": "new ObjectId(\"5a7382114ec1f67ae445f778\")",
        "shell": "ObjectId('5a7382114ec1f67ae445f778')"
      }
    ],
    "DBRef": [
      {
        "description": "new DBRef with (string, ObjectID) args",
        "javascript": "new DBRef('coll', ObjectId())",
        "python": "DBRef('coll', ObjectId())",
        "java": "new DBRef(\"coll\", new ObjectId())",
        "csharp": "new MongoDBRef(\"coll\", new ObjectId())",
        "shell": "new DBRef('coll', ObjectId())"
      },
      {
        "description": "new DBRef with (string, ObjectId, string) args",
        "javascript": "new DBRef('coll', ObjectId(), 'db')",
        "python": "DBRef('coll', ObjectId(), 'db')",
        "java": "new DBRef(\"db\", \"coll\", new ObjectId())",
        "csharp": "new MongoDBRef(\"coll\", new ObjectId(), \"db\")",
        "shell": "new DBRef('coll', ObjectId(), 'db')"
      }
    ],
    "NumberInt": [
      {
        "description": "NumberInt with number arg",
        "javascript": "Int32(3)",
        "python": "int(3)",
        "java": "3",
        "csharp": "3",
        "shell": "NumberInt(3)"
      },
      {
        "description": "NumberInt with valid string arg",
        "javascript": "Int32('3')",
        "python": "int('3')",
        "java": "Integer.parseInt(\"3\")",
        "csharp": "Convert.ToInt32(\"3\")",
        "shell": "NumberInt('3')"
      },
      {
        "description": "NumberInt with no arg",
        "javascript": "Int32(0)",
        "python": "int(0)",
        "java": "0",
        "csharp": "0",
        "shell": "NumberInt()"
      }
    ],
    "Double literal": [
      {
        "description": "Double",
        "javascript": "3",
        "python": "3",
        "java": "3L",
        "csharp": "3",
        "shell": "3"
      },
      {
        "description": "Double with .",
        "javascript": "3.001",
        "python": "3.001",
        "java": "3.001d",
        "csharp": "3.001",
        "shell": "3.001"
      }
    ],
    "NumberLong": [
      {
        "description": "NumberLong with no args",
        "javascript": "new Long.fromNumber(0)",
        "python": "Int64(0)",
        "java": "0L",
        "csharp": "0L",
        "shell": "new NumberLong()"
      },
      {
        "description": "Long with one number arg",
        "javascript": "new Long.fromNumber(10)",
        "python": "Int64(10)",
        "java": "10L",
        "csharp": "10L",
        "shell": "new NumberLong(10)"
      },
      {
        "description": "Long with one string arg",
        "javascript": "new Long.fromString('10')",
        "python": "Int64('10')",
        "java": "Long.parseLong(\"10\")",
        "csharp": "Convert.ToInt64(\"10\")",
        "shell": "new NumberLong('10')"
      }
    ],
    "Decimal128": [
      {
        "description": "Decimal128 with string arg",
        "javascript": "Decimal128.fromString('5')",
        "python": "Decimal128('5')",
        "java": "Decimal128.parse(\"5\")",
        "csharp": "Decimal128.Parse(\"5\")",
        "shell": "NumberDecimal('5')"
      },
      {
        "description": "Decimal128 with num arg",
        "javascript": "Decimal128.fromString('5')",
        "python": "Decimal128('5')",
        "java": "Decimal128.parse(\"5\")",
        "csharp": "Decimal128.Parse(\"5\")",
        "shell": "NumberDecimal(5)"
      },
      {
        "description": "Decimal128 with no arg",
        "javascript": "Decimal128.fromString('0')",
        "python": "Decimal128('0')",
        "java": "Decimal128.parse(\"0\")",
        "csharp": "Decimal128.Parse(\"0\")",
        "shell": "NumberDecimal()"
      }
    ],
    "MinKeyMaxKey": [
      {
        "description": "MinKey",
        "javascript": "MinKey()",
        "python": "MinKey()",
        "java": "new MinKey()",
        "csharp": "BsonMinKey.Value",
        "shell": "MinKey()"
      },
      {
        "description": "new MinKey",
        "javascript": "new MinKey()",
        "python": "MinKey()",
        "java": "new MinKey()",
        "csharp": "BsonMinKey.Value",
        "shell": "new MinKey()"
      },
      {
        "description": "maxKey",
        "javascript": "MaxKey()",
        "python": "MaxKey()",
        "java": "new MaxKey()",
        "csharp": "BsonMaxKey.Value",
        "shell": "MaxKey()"
      },
      {
        "description": "new MaxKey()",
        "javascript": "new MaxKey()",
        "python": "MaxKey()",
        "java": "new MaxKey()",
        "csharp": "BsonMaxKey.Value",
        "shell": "new MaxKey()"
      }
    ],
    "Timestamp": [
      {
        "description": "Timestamp with two number args",
        "javascript": "Timestamp(10, 100)",
        "python": "Timestamp(10, 100)",
        "java": "new BSONTimestamp(10, 100)",
        "csharp": "new BsonTimestamp(10, 100)",
        "shell": "Timestamp(10, 100)"
      },
      {
        "description": "new Timestamp with two number args",
        "javascript": "new Timestamp(10, 100)",
        "python": "Timestamp(10, 100)",
        "java": "new BSONTimestamp(10, 100)",
        "csharp": "new BsonTimestamp(10, 100)",
        "shell": "new Timestamp(10, 100)"
      },
      {
        "description": "Timestamp with no number args",
        "javascript": "new Timestamp(0, 0)",
        "python": "Timestamp(0, 0)",
        "java": "new BSONTimestamp(0, 0)",
        "csharp": "new BsonTimestamp(0, 0)",
        "shell": "new Timestamp()"
      }
    ],
    "Document": [
      {
        "description": "{x: 1}",
        "javascript": "{\n  x: 1\n}",
        "python": "{\n    'x': 1\n}",
        "java": "eq(\"x\", 1L)",
        "csharp": "new BsonDocument(\"x\", 1)",
        "shell": "{x: 1}"
      },
      {
        "description": "Doc with trailing comma",
        "javascript": "{\n  x: 1\n}",
        "python": "{\n    'x': 1\n}",
        "java": "eq(\"x\", 1L)",
        "csharp": "new BsonDocument(\"x\", 1)",
        "shell": "{x: 1,}"
      },
      {
        "description": "Doc with array",
        "javascript": "{\n  x: [\n    1, 2\n  ]\n}",
        "python": "{\n    'x': [\n        1, 2\n    ]\n}",
        "java": "eq(\"x\", Arrays.asList(1L, 2L))",
        "csharp": "new BsonDocument(\"x\", new BsonArray\n    {\n        1,\n        2\n    })",
        "shell": "{x: [1,2]}"
      },
      {
        "description": "Doc with subdoc",
        "javascript": "{\n  x: {\n    y: 2\n  }\n}",
        "python": "{\n    'x': {\n        'y': 2\n    }\n}",
        "java": "eq(\"x\", eq(\"y\", 2L))",
        "csharp": "new BsonDocument(\"x\", new BsonDocument(\"y\", 2))",
        "shell": "{x: {y: 2}}"
      },
      {
        "description": "Object.create()",
        "javascript": "Object.create({\n  x: 1\n})",
        "python": "{\n    'x': 1\n}",
        "java": "eq(\"x\", 1L)",
        "csharp": "new BsonDocument(\"x\", 1)",
        "shell": "Object.create({x: 1})"
      },
      {
        "description": "Empty object",
        "javascript": "{}",
        "python": "{}",
        "java": "new Document()",
        "csharp": "new BsonDocument()",
        "shell": "{}"
      },
      {
        "description": "Two items in document",
        "javascript": "{\n  x: 1, \n  n: 4\n}",
        "python": "{\n    'x': 1, \n    'n': 4\n}",
        "java": "and(eq(\"x\", 1L), eq(\"n\", 4L))",
        "csharp": "new BsonDocument\n{\n    { \"x\", 1 }, \n    { \"n\", 4 }\n}",
        "shell": "{x: 1, n: 4}"
      }
    ],
    "Array": [
      {
        "description": "[1, 2]",
        "javascript": "[\n  1, 2\n]",
        "python": "[\n    1, 2\n]",
        "java": "Arrays.asList(1L, 2L)",
        "csharp": "new BsonArray\n{\n    1,\n    2\n}",
        "shell": "[1, 2]"
      },
      {
        "description": "array with trailing comma",
        "javascript": "[\n  1, 2\n]",
        "python": "[\n    1, 2\n]",
        "java": "Arrays.asList(1L, 2L)",
        "csharp": "new BsonArray\n{\n    1,\n    2\n}",
        "shell": "[1, 2,]"
      },
      {
        "description": "Array with subdoc",
        "javascript": "[\n  1, {\n    settings: 'http2'\n  }\n]",
        "python": "[\n    1, {\n        'settings': 'http2'\n    }\n]",
        "java": "Arrays.asList(1L, eq(\"settings\", \"http2\"))",
        "csharp": "new BsonArray\n{\n    1,\n    new BsonDocument(\"settings\", \"http2\")\n}",
        "shell": "[1, { settings: 'http2' }]"
      },
      {
        "description": "Array with subarray",
        "javascript": "[\n  1, [\n    2, 3\n  ]\n]",
        "python": "[\n    1, [\n        2, 3\n    ]\n]",
        "java": "Arrays.asList(1L, Arrays.asList(2L, 3L))",
        "csharp": "new BsonArray\n{\n    1,\n    new BsonArray\n    {\n        2,\n        3\n    }\n}",
        "shell": "[1, [2, 3]]"
      },
      {
        "description": "Empty array",
        "javascript": "[]",
        "python": "[]",
        "java": "Arrays.asList()",
        "csharp": "new BsonArray()",
        "shell": "[]"
      }
    ],
    "ArrayElision": [
      {
        "description": "array with leading elision",
        "javascript": "[\n  undefined, 1, 2\n]",
        "python": "[\n    None, 1, 2\n]",
        "java": "Arrays.asList(new BsonUndefined(), 1L, 2L)",
        "csharp": "new BsonArray\n{\n    BsonUndefined.Value,\n    1,\n    2\n}",
        "shell": "[,1, 2,]"
      },
      {
        "description": "Array with one elision",
        "javascript": "[\n  undefined\n]",
        "python": "[\n    None\n]",
        "java": "Arrays.asList(new BsonUndefined())",
        "csharp": "new BsonArray\n{\n    BsonUndefined.Value\n}",
        "shell": "[,]"
      },
      {
        "description": "Array with 2 elision",
        "javascript": "[\n  undefined, undefined\n]",
        "python": "[\n    None, None\n]",
        "java": "Arrays.asList(new BsonUndefined(), \n    new BsonUndefined())",
        "csharp": "new BsonArray\n{\n    BsonUndefined.Value,\n    BsonUndefined.Value\n}",
        "shell": "[,,]"
      },
      {
        "description": "Array with elision in the middle",
        "javascript": "[\n  1, undefined, undefined, undefined, 2\n]",
        "python": "[\n    1, None, None, None, 2\n]",
        "java": "Arrays.asList(1L, \n    new BsonUndefined(), \n    new BsonUndefined(), \n    new BsonUndefined(), 2L)",
        "csharp": "new BsonArray\n{\n    1,\n    BsonUndefined.Value,\n    BsonUndefined.Value,\n    BsonUndefined.Value,\n    2\n}",
        "shell": "[1,,,,2]"
      }
    ]
  }
}
