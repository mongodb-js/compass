{
  "tests": {
    "Code": [
      {
        "description": "CodeWithScope scope",
        "javascript": "Code('test code', {\n  x: 1\n}).scope",
        "python": "Code('test code', {\n    'x': 1\n}).scope",
        "java": "new CodeWithScope(\"test code\", new Document(\"x\", 1L)).getScope()",
        "csharp": "new BsonJavaScriptWithScope(\"test code\", new BsonDocument(\"x\", 1)).Scope",
        "shell": "Code('test code', {x: 1}).scope"
      },
      {
        "description": "Code code",
        "javascript": "Code('test code').code",
        "python": "str(Code('test code'))",
        "java": "new Code(\"test code\").getCode()",
        "csharp": "new BsonJavaScript(\"test code\").Code",
        "shell": "Code('test code').code"
      }
    ],
    "ObjectId": [
      {
        "description": "toString",
        "javascript": "ObjectId().toString()",
        "python": "str(ObjectId())",
        "java": "new ObjectId().toHexString()",
        "csharp": "new ObjectId().ToString()",
        "shell": "ObjectId().toString()"
      },
      {
        "description": "getTimestamp",
        "javascript": "ObjectId('5ab901c29ee65f5c8550c5b9').getTimestamp()",
        "python": "ObjectId('5ab901c29ee65f5c8550c5b9').generation_time",
        "java": "new ObjectId(\"5ab901c29ee65f5c8550c5b9\").getTimestamp()",
        "csharp": "new ObjectId(\"5ab901c29ee65f5c8550c5b9\").Timestamp",
        "shell": "ObjectId('5ab901c29ee65f5c8550c5b9').getTimestamp()"
      },
      {
        "description": "equals",
        "javascript": "ObjectId().equals(ObjectId())",
        "python": "ObjectId() == ObjectId()",
        "java": "new ObjectId().equals(new ObjectId())",
        "csharp": "new ObjectId().Equals(new ObjectId())",
        "shell": "ObjectId().equals(ObjectId())"
      }
    ],
    "DBRef": [
      {
        "description": "toString",
        "javascript": "new DBRef('coll', new ObjectId()).toString()",
        "python": "str(DBRef('coll', ObjectId()))",
        "java": "new DBRef(\"coll\", new ObjectId()).toString()",
        "csharp": "new MongoDBRef(\"coll\", new ObjectId()).ToString()",
        "shell": "new DBRef('coll', new ObjectId()).toString()"
      },
      {
        "description": "getDb",
        "javascript": "new DBRef('coll', new ObjectId()).db",
        "python": "DBRef('coll', ObjectId()).database",
        "java": "new DBRef(\"coll\", new ObjectId()).getDatabaseName()",
        "csharp": "new MongoDBRef(\"coll\", new ObjectId()).DatabaseName",
        "shell": "new DBRef('coll', new ObjectId()).getDb()"
      },
      {
        "description": "$db",
        "javascript": "new DBRef('coll', new ObjectId()).db",
        "python": "DBRef('coll', ObjectId()).database",
        "java": "new DBRef(\"coll\", new ObjectId()).getDatabaseName()",
        "csharp": "new MongoDBRef(\"coll\", new ObjectId()).DatabaseName",
        "shell": "new DBRef('coll', new ObjectId()).$db"
      },
      {
        "description": "getCollection",
        "javascript": "new DBRef('coll', new ObjectId()).namespace",
        "python": "DBRef('coll', ObjectId()).collection",
        "java": "new DBRef(\"coll\", new ObjectId()).getCollectionName()",
        "csharp": "new MongoDBRef(\"coll\", new ObjectId()).CollectionName",
        "shell": "new DBRef('coll', new ObjectId()).getCollection()"
      },
      {
        "description": "getRef",
        "javascript": "new DBRef('coll', new ObjectId()).namespace",
        "python": "DBRef('coll', ObjectId()).collection",
        "java": "new DBRef(\"coll\", new ObjectId()).getCollectionName()",
        "csharp": "new MongoDBRef(\"coll\", new ObjectId()).CollectionName",
        "shell": "new DBRef('coll', new ObjectId()).getRef()"
      },
      {
        "description": "$ref",
        "javascript": "new DBRef('coll', new ObjectId()).namespace",
        "python": "DBRef('coll', ObjectId()).collection",
        "java": "new DBRef(\"coll\", new ObjectId()).getCollectionName()",
        "csharp": "new MongoDBRef(\"coll\", new ObjectId()).CollectionName",
        "shell": "new DBRef('coll', new ObjectId()).$ref"
      },
      {
        "description": "getId",
        "javascript": "new DBRef('coll', new ObjectId()).oid",
        "python": "DBRef('coll', ObjectId()).id",
        "java": "new DBRef(\"coll\", new ObjectId()).getId()",
        "csharp": "new MongoDBRef(\"coll\", new ObjectId()).Id",
        "shell": "new DBRef('coll', new ObjectId()).getId()"
      },
      {
        "description": "$id",
        "javascript": "new DBRef('coll', new ObjectId()).oid",
        "python": "DBRef('coll', ObjectId()).id",
        "java": "new DBRef(\"coll\", new ObjectId()).getId()",
        "csharp": "new MongoDBRef(\"coll\", new ObjectId()).Id",
        "shell": "new DBRef('coll', new ObjectId()).$id"
      }
    ],
    "NumberInt": [
      {
        "description": "toString",
        "javascript": "Int32(3).toString()",
        "python": "str(int(3))",
        "java": "Integer.toString(3)",
        "csharp": "3.ToString()",
        "shell": "NumberInt(3).toString()"
      },
      {
        "description": "valueOf",
        "javascript": "Int32(3).valueOf()",
        "python": "int(3)",
        "java": "3",
        "csharp": "3",
        "shell": "NumberInt(3).valueOf()"
      }
    ],
    "NumberLong": [
      {
        "description": "toString",
        "javascript": "'429496729601'",
        "python": "'429496729601'",
        "java": "\"429496729601\"",
        "csharp": "\"429496729601\"",
        "shell": "NumberLong(429496729601).toString()"
      },
      {
        "description": "valueOf",
        "javascript": "Long.fromNumber(429496729601).toInt()",
        "python": "long(Int64(429496729601))",
        "java": "(int) 429496729601L",
        "csharp": "(int) 429496729601L",
        "shell": "NumberLong(429496729601).valueOf()"
      },
      {
        "description": "floatApprox",
        "javascript": "Long.fromNumber(429496729601).toNumber()",
        "python": "float(Int64(429496729601))",
        "java": "(float) 429496729601L",
        "csharp": "(float) 429496729601L",
        "shell": "NumberLong(429496729601).floatApprox"
      },
      {
        "description": "top",
        "javascript": "Long.fromNumber(429496729601).getHighBits()",
        "python": "Int64(429496729601) >> 32",
        "java": "429496729601L >> 32",
        "csharp": "429496729601L >> 32",
        "shell": "NumberLong(429496729601).top"
      },
      {
        "description": "bottom",
        "javascript": "Long.fromNumber(429496729601).getLowBits()",
        "python": "Int64(429496729601) & 0x0000ffff",
        "java": "429496729601L & 0x0000ffff",
        "csharp": "429496729601L & 0x0000ffff",
        "shell": "NumberLong(429496729601).bottom"
      }
    ],
    "NumberDecimal": [
      {
        "description": "toString",
        "javascript": "Decimal128.fromString('0').toString()",
        "python": "str(Decimal128('0'))",
        "java": "Decimal128.parse(\"0\").toString()",
        "csharp": "Decimal128.Parse(\"0\").ToString()",
        "shell": "NumberDecimal(0).toString()"
      }
    ],
    "Timestamp": [
      {
        "description": "toString",
        "javascript": "Timestamp(1, 100).toString()",
        "python": "str(Timestamp(1, 100))",
        "java": "new BSONTimestamp(1, 100).toString()",
        "csharp": "new BsonTimestamp(1, 100).ToString()",
        "shell": "Timestamp(1, 100).toString()"
      },
      {
        "description": "getTime",
        "javascript": "Timestamp(1, 100).getLowBits()",
        "python": "Timestamp(1, 100).time",
        "java": "new BSONTimestamp(1, 100).getTime()",
        "csharp": "new BsonTimestamp(1, 100).ToUniversalTime()",
        "shell": "Timestamp(1, 100).getTime()"
      },
      {
        "description": "getInc",
        "javascript": "Timestamp(1, 100).getHighBits()",
        "python": "Timestamp(1, 100).inc",
        "java": "new BSONTimestamp(1, 100).getInc()",
        "csharp": "new BsonTimestamp(1, 100).Increment",
        "shell": "Timestamp(1, 100).getInc()"
      },
      {
        "description": "t",
        "javascript": "Timestamp(1, 100).getLowBits()",
        "python": "Timestamp(1, 100).time",
        "java": "new BSONTimestamp(1, 100).getTime()",
        "csharp": "new BsonTimestamp(1, 100).ToUniversalTime()",
        "shell": "Timestamp(1, 100).t"
      },
      {
        "description": "i",
        "javascript": "Timestamp(1, 100).getHighBits()",
        "python": "Timestamp(1, 100).inc",
        "java": "new BSONTimestamp(1, 100).getInc()",
        "csharp": "new BsonTimestamp(1, 100).Increment",
        "shell": "Timestamp(1, 100).i"
      }
    ]
  }
}
