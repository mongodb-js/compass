{
  "tests": {
    "Code": [
      {
        "description": "new Code with string arg",
        "javascript": "new Code('some code')",
        "python": "Code('some code')",
        "java": "new Code(\"some code\")",
        "csharp": "new BsonJavaScript(@\"some code\")"
      },
      {
        "description": "Code with string code",
        "javascript": "Code('some code')",
        "python": "Code('some code')",
        "java": "new Code(\"some code\")",
        "csharp": "new BsonJavaScript(@\"some code\")"
      },
      {
        "description": "Code with string code and object scope",
        "javascript": "Code('string', {x: 1})",
        "python": "Code('string', {'x': 1})",
        "java": "new CodeWithScope(\"string\", new Document().append(\"x\", 1))",
        "csharp": "new BsonJavaScriptWithScope(@\"string\", new BsonDocument(\"x\", 1))"
      },
      {
        "description": "Code with function code",
        "javascript": "Code(function(test) { console.log(test); })",
        "python": "Code('function(test){console.log(test);}')",
        "java": "new Code(\"function(test){console.log(test);}\")",
        "csharp": "new BsonJavaScript(@\"function(test){console.log(test);}\")"
      },
      {
        "description": "Code with where code",
        "javascript": "new Code('this.a > i', { i: 1 })",
        "python": "Code('this.a > i', {'i': 1})",
        "java": "new CodeWithScope(\"this.a > i\", new Document().append(\"i\", 1))",
        "csharp": "new BsonJavaScriptWithScope(@\"this.a > i\", new BsonDocument(\"i\", 1))"
      }
    ],
    "ObjectId": [
      {
        "description": "ObjectId with no arg",
        "javascript": "ObjectId()",
        "python": "ObjectId()",
        "java": "new ObjectId()",
        "csharp": "new BsonObjectId()"
      },
      {
        "description": "new ObjectId with no arg",
        "javascript": "new ObjectId()",
        "python": "ObjectId()",
        "java": "new ObjectId()",
        "csharp": "new BsonObjectId()"
      },
      {
        "description": "ObjectId with hex string arg",
        "javascript": "ObjectId('5a7382114ec1f67ae445f778')",
        "python": "ObjectId('5a7382114ec1f67ae445f778')",
        "java": "new ObjectId(\"5a7382114ec1f67ae445f778\")",
        "csharp": "new BsonObjectId(\"5a7382114ec1f67ae445f778\")"
      }
    ],
    "Binary": [
      {
        "description": "Binary with ascii buffer arg",
        "javascript": "Binary(Buffer.from('a string'))",
        "python": "Binary(bytes('a string', 'utf-8'))",
        "java": "new Binary(\"a string\".getBytes(\"UTF-8\"))",
        "csharp": "new BsonBinaryData(System.Text.Encoding.ASCII.GetBytes(\"a string\"))"
      },
      {
        "description": "new Binary with (ascii buffer, UUID subtype enum) args",
        "javascript": "new Binary(Buffer.from(\"a string\"), Binary.SUBTYPE_UUID)",
        "python": "Binary(bytes('a string', 'utf-8'), bson.binary.UUID_SUBTYPE)",
        "java": "new Binary(org.bson.BsonBinarySubType.UUID, \"a string\".getBytes(\"UTF-8\"))",
        "csharp": "new BsonBinaryData(System.Text.Encoding.ASCII.GetBytes(\"a string\"), BsonBinarySubType.UuidStandard)"
      },
      {
        "description": "Binary with (ascii buffer, number) args",
        "javascript": "Binary(Buffer.from('a string'), '1')",
        "python": "Binary(bytes('a string', 'utf-8'), bson.binary.FUNCTION_SUBTYPE)",
        "java": "new Binary(org.bson.BsonBinarySubType.FUNCTION, \"a string\".getBytes(\"UTF-8\"))",
        "csharp": "new BsonBinaryData(System.Text.Encoding.ASCII.GetBytes(\"a string\"), BsonBinarySubType.Function)"
      },
      {
        "description": "Binary with string args",
        "javascript": "Binary('a string')",
        "python": "Binary(bytes('a string', 'utf-8'))",
        "java": "new Binary(\"a string\".getBytes(\"UTF-8\"))",
        "csharp": "new BsonBinaryData(System.Text.Encoding.ASCII.GetBytes(\"a string\"))"
      },
      {
        "description": "Binary with (string, string) args",
        "javascript": "Binary('a string', '1')",
        "python": "Binary(bytes('a string', 'utf-8'), bson.binary.FUNCTION_SUBTYPE)",
        "java": "new Binary(org.bson.BsonBinarySubType.FUNCTION, \"a string\".getBytes(\"UTF-8\"))",
        "csharp": "new BsonBinaryData(System.Text.Encoding.ASCII.GetBytes(\"a string\"), BsonBinarySubType.Function)"
      }
    ],
    "DBRef": [
      {
        "description": "new DBRef with (string, ObjectID) args",
        "javascript": "new DBRef('coll', new ObjectId())",
        "python": "DBRef('coll', ObjectId())",
        "java": "new DBRef(\"coll\", new ObjectId())",
        "csharp": "DBRef(\"coll\", new BsonObjectId())"
      },
      {
        "description": "new DBRef with (string, ObjectId, string) args",
        "javascript": "new DBRef('coll', ObjectId(), 'db')",
        "python": "DBRef('coll', ObjectId(), 'db')",
        "java": "new DBRef(\"coll\", new ObjectId(), \"db\")",
        "csharp": "DBRef(\"coll\", new BsonObjectId(), \"db\")"
      }
    ],
    "Int32": [
      {
        "description": "Int32 with number arg",
        "javascript": "Int32(3)",
        "python": "int(3)",
        "java": "new java.lang.Integer(3)",
        "csharp": ""
      },
      {
        "description": "Int32 with valid string arg",
        "javascript": "Int32('3')",
        "python": "int(3)",
        "java": "new java.lang.Integer(\"3\")",
        "csharp": ""
      }
    ],
    "Double": [
      {
        "description": "Double with number arg",
        "javascript": "Double(3)",
        "python": "float(3)",
        "java": "new java.lang.Double(3)",
        "csharp": "new BsonDouble(Convert.ToDouble(\"3\"))"
      },
      {
        "description": "new Double with number arg",
        "javascript": "new Double(3)",
        "python": "float(3)",
        "java": "new java.lang.Double(3)",
        "csharp": "new BsonDouble(Convert.ToDouble(\"3\"))"
      },
      {
        "description": "Double with valid string arg",
        "javascript": "Double('3')",
        "python": "float(3)",
        "java": "new java.lang.Double(\"3\")",
        "csharp": "new BsonDouble(Convert.ToDouble(\"3\"))"
      }
    ],
    "Long": [
      {
        "description": "Long with two number args",
        "javascript": "new Long(-1, 2147483647)",
        "python": "Int64(9223372036854775807)",
        "java": "new java.lang.Long(\"9223372036854775807\")",
        "csharp": "new BsonInt64(Convert.ToInt32(9223372036854775807))"
      }
    ],
    "Decimal128": [
      {
        "description": "new Decimal128 with string arg",
        "javascript": "new Decimal128(Buffer.from('5'))",
        "python": "Decimal128(Decimal('5'))",
        "java": "Decimal128.parse(\"5.3E-6175\")",
        "csharp": "new BsonString(\"5\")"
      }
    ],
    "MinKey/MaxKey": [
      {
        "description": "MinKey",
        "javascript": "MinKey()",
        "python": "MinKey()",
        "java": "new MinKey()",
        "csharp": "BsonMinKey.Value"
      },
      {
        "description": "new MinKey",
        "javascript": "new MinKey()",
        "python": "MinKey()",
        "java": "new MinKey()",
        "csharp": "BsonMinKey.Value"
      },
      {
        "description": "maxKey",
        "javascript": "MaxKey()",
        "python": "MaxKey()",
        "java": "new MaxKey()",
        "csharp": "BsonMaxKey.Value"
      },
      {
        "description": "new MaxKey",
        "javascript": "new MaxKey()",
        "python": "MaxKey()",
        "java": "new MaxKey()",
        "csharp": "BsonMaxKey.Value"
      }
    ],
    "BSONRegExp": [
      {
        "description": "new BSONRegExp with string arg",
        "javascript": "new BSONRegExp('^[a-z0-9_-]{3,16}$')",
        "python": "RegExp('^[a-z0-9_-]{3,16}$')",
        "java": "new BsonRegularExpression(\"^[a-z0-9_-]{3,16}$\")",
        "csharp": "new BsonRegularExpression(@\"^[a-z0-9_-]{3,16}$\")"
      },
      {
        "description": "new BSONRegExp with string arg and flags",
        "javascript": "new BSONRegExp('^[a-z0-9_-]{3,16}$', 'imuxls')",
        "python": "RegExp('^[a-z0-9_-]{3,16}$', 'imuxls')",
        "java": "new BsonRegularExpression(\"^[a-z0-9_-]{3,16}$\", \"imuxls\")",
        "csharp": "new BsonRegularExpression(@\"^[a-z0-9_-]{3,16}$\", \"imxs\")"
      }
    ],
    "Timestamp": [
      {
        "description": "Timestamp with two number args",
        "javascript": "Timestamp(10, 100)",
        "python": "Timestamp(10, 100)",
        "java": "new BSONTimestamp(10, 100)",
        "csharp": "new BsonTimestamp(10, 100)"
      },
      {
        "description": "new Timestamp with two number args",
        "javascript": "new Timestamp(10, 100)",
        "python": "Timestamp(10, 100)",
        "java": "new BSONTimestamp(10, 100)",
        "csharp": "new BsonTimestamp(10, 100)"
      }
    ],
    "Document": [
      {
        "description": "{x: 1}",
        "javascript": "{x: 1}",
        "python": "{'x': 1}",
        "java": "new Document().append(\"x\", 1)",
        "csharp": "new BsonDocument(\"x\", 1)"
      },
      {
        "description": "Doc with trailing comma",
        "javascript": "{x: 1,}",
        "python": "{'x': 1,}",
        "java": "new Document().append(\"x\", 1)",
        "csharp": "new BsonDocument(\"x\", 1)"
      },
      {
        "description": "Doc with array",
        "javascript": "{x: [1, 2]}",
        "python": "{'x': [1, 2]}",
        "java": "new Document().append(\"x\", Arrays.asList(1, 2))",
        "csharp": "new BsonDocument(\"x\", new BsonArray {1, 2})"
      },
      {
        "description": "Doc with subdoc",
        "javascript": "{x: {y: 2}}",
        "python": "{'x': {'y': 2}}",
        "java": "new Document().append(\"x\", new Document().append(\"y\", 2))",
        "csharp": "new BsonDocument(\"x\", new BsonDocument(\"y\", 2))"
      },
      {
        "description": "Object.create()",
        "javascript": "Object.create({x: 1})",
        "python": "{'x': 1}",
        "java": "new Document().append(\"x\", 1)",
        "csharp": "new BsonDocument(\"x\", 1)"
      },
      {
        "description": "Empty object",
        "javascript": "{}",
        "python": "{}",
        "java": "new Document()",
        "csharp": "new BsonDocument()"
      },
      {
        "description": "Two items in document",
        "javascript": "{x: 1, n: 4}",
        "python": "{'x': 1, 'n': 4}",
        "java": "new Document().append(\"x\", 1).append(\"n\", 4)",
        "csharp": "new BsonDocument { { \"x\", 1 }, { \"n\", 4 } }"
      }
    ],
    "Array": [
      {
        "description": "[1, 2]",
        "javascript": "[1, 2]",
        "python": "[1, 2]",
        "java": "Arrays.asList(1, 2)",
        "csharp": "new BsonArray {1, 2}"
      },
      {
        "description": "array with trailing comma",
        "javascript": "[1, 2,]",
        "python": "[1, 2]",
        "java": "Arrays.asList(1, 2)",
        "csharp": "new BsonArray {1, 2}"
      },
      {
        "description": "Array with subdoc",
        "javascript": "[1, { settings: 'http2' }]",
        "python": "[1, {'settings': 'http2'}]",
        "java": "Arrays.asList(1, new Document().append(\"settings\", \"http2\"))",
        "csharp": "new BsonArray {1, new BsonDocument(\"settings\", \"http2\")}"
      },
      {
        "description": "Array with subarray",
        "javascript": "[1, [2, 3]]",
        "python": "[1, [2, 3]]",
        "java": "Arrays.asList(1, Arrays.asList(2, 3))",
        "csharp": "new BsonArray {1, new BsonArray {2, 3}}"
      },
      {
        "description": "Empty array",
        "javascript": "[]",
        "python": "[]",
        "java": "Arrays.asList()",
        "csharp": "new BsonArray()"
      }
    ],
    "ArrayElision": [
      {
        "description": "array with leading elision",
        "javascript": "[,1, 2,]",
        "python": "[None, 1, 2]",
        "java": "Arrays.asList(null, 1, 2)",
        "csharp": "new BsonArray {BsonNull.Value, 1, 2}"
      },
      {
        "description": "Array with one elision",
        "javascript": "[,]",
        "python": "[None]",
        "java": "Arrays.asList(null)",
        "csharp": "new BsonArray {BsonNull.Value}"
      },
      {
        "description": "Array with 2 elision",
        "javascript": "[,,]",
        "python": "[None, None]",
        "java": "Arrays.asList(null, null)",
        "csharp": "new BsonArray {BsonNull.Value, BsonNull.Value}"
      },
      {
        "description": "Array with elision in the middle",
        "javascript": "[1,,,,2]",
        "python": "[1, None, None, None, 2]",
        "java": "Arrays.asList(1, null, null, null, 2)",
        "csharp": "new BsonArray {1, BsonNull.Value, BsonNull.Value, BsonNull.Value, 2}"
      }
    ],
    "Symbol": [
      {
        "description": "Symbol from string",
        "javascript": "Symbol('2')",
        "python": "unicode('2', 'utf-8')",
        "java": "new Symbol(\"2\")",
        "csharp": "new BsonString(\"2\")"
      },
      {
        "description": "new Symbol from string",
        "javascript": "new Symbol('2')",
        "python": "unicode('2', 'utf-8')",
        "java": "new Symbol(\"2\")",
        "csharp": "new BsonString(\"2\")"
      }
    ]
  }
}
