{
  "tests": {
    "Code": [
      {
        "description": "Code with callable scope",
        "query": "Code('test code', {x: 1}).scope()",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Code with callable code",
        "query": "Code('test code').code()",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      }
    ],
    "ObjectId": [
      {
        "description": "ObjectId .toString not callable",
        "query": "ObjectId().toString",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "ObjectId .getTimestamp not callable",
        "query": "ObjectId().getTimestamp",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "ObjectId .equals not callable",
        "query": "ObjectId().equals",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "ObjectId .createFromHexString not callable",
        "query": "ObjectId.createFromHexString",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "ObjectId .createFromTime not callable",
        "query": "ObjectId.createFromTime",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "ObjectId .isValid not callable",
        "query": "ObjectId.isValid",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      }
    ],
    "Binary": [
      {
        "description": "Binary .length not callable",
        "query": "Binary(Buffer.from('0404')).length",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Binary with callable sub_type",
        "query": "Binary(Buffer.from('0001')).sub_type()",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Binary .value not callable",
        "query": "Binary(Buffer.from('0404')).value",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Binary .toString not callable",
        "query": "Binary(Buffer.from('0404')).toString",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      }
    ],
    "DBRef": [
      {
        "description": "DBRef .toString not callable",
        "query": "new DBRef('coll', new ObjectId()).toString",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "DBRef with callable db",
        "query": "new DBRef('coll', new ObjectId()).db()",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "DBRef with callable namespace",
        "query": "new DBRef('coll', new ObjectId()).namespace()",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "DBRef with callable oid",
        "query": "new DBRef('coll', new ObjectId()).oid()",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      }
    ],
    "Int32": [
      {
        "description": "Int32 .valueOf not callable",
        "query": "Int32(3).valueOf",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      }
    ],
    "Double": [
      {
        "description": "Double .valueOf not callable",
        "query": "Double(3).valueOf",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      }
    ],
    "Long": [
      {
        "description": "Long .toString not callable",
        "query": "Long(1, 100).toString",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .toInt not callable",
        "query": "Long(1, 100).toInt",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .isZero not callable",
        "query": "Long(1, 100).isZero",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .isNegative not callable",
        "query": "Long(1, 100).isNegative",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .isOdd() with extra argument",
        "query": "Long(1, 100).isOdd(10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .isOdd not callable",
        "query": "Long(1, 100).isOdd",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .equals not callable",
        "query": "Long(1, 100).equals",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .notEquals not callable",
        "query": "Long(1, 100).notEquals",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .compare not callable",
        "query": "Long(1, 100).compare",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .greaterThan not callable",
        "query": "Long(1, 100).greaterThan",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .greaterThanOrEqual not callable",
        "query": "Long(1, 100).greaterThanOrEqual",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .lessThan not callable",
        "query": "Long(1, 100).lessThan",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .lessThanOrEqual not callable",
        "query": "Long(1, 100).lessThanOrEqual",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .negate not callable",
        "query": "Long(1, 100).negate",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .add not callable",
        "query": "Long(1, 100).add",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .subtract not callable",
        "query": "Long(1, 100).subtract",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .multiply not callable",
        "query": "Long(1, 100).multiply",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .div not callable",
        "query": "Long(1, 100).div",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .div() with wrong type of argument",
        "query": "Long(1, 100).div({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .modulo() without arguments",
        "query": "Long(1, 100).modulo()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .modulo not callable",
        "query": "Long(1, 100).modulo",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .not not callable",
        "query": "Long(1, 100).not",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .and not callable",
        "query": "Long(1, 100).and",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .or not callable",
        "query": "Long(1, 100).or",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .xor not callable",
        "query": "Long(1, 100).xor",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .shiftLeft not callable",
        "query": "Long(1, 100).shiftLeft",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .shiftRight not callable",
        "query": "Long(1, 100).shiftRight",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      }
    ],
    "Decimal128": [
      {
        "description": "Decimal128 .toString not callable",
        "query": "new Decimal128(Buffer.from('5')).toString",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Decimal128 .fromString not callable",
        "query": "Decimal128.fromString",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      }
    ],
    "Timestamp": [
      {
        "description": "Timestamp .toString not callable",
        "query": "Timestamp(1, 100).toString",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Timestamp .equals not callable",
        "query": "Timestamp(1, 100).equals",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Timestamp .compare not callable",
        "query": "Timestamp(1, 100).compare",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Timestamp .notEquals not callable",
        "query": "Timestamp(1, 100).notEquals",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Timestamp .greaterThan not callable",
        "query": "Timestamp(1, 100).greaterThan",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Timestamp .greaterThanOrEqual not callable",
        "query": "Timestamp(1, 100).greaterThanOrEqual",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Timestamp .lessThan not callable",
        "query": "Timestamp(1, 100).lessThan",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Timestamp .lessThanOrEqual not callable",
        "query": "Timestamp(1, 100).lessThanOrEqual",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Timestamp .getLowBits not callable",
        "query": "Timestamp(1, 100).getLowBits",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Timestamp .getHighBits not callable",
        "query": "Timestamp(1, 100).getHighBits",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .fromInt not callable",
        "query": "Long.fromInt",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .fromString not callable",
        "query": "Long.fromString",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Long .fromBits not callable",
        "query": "Long.fromBits",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      }
    ],
    "Symbol": [
      {
        "description": "Symbol .valueOf not callable",
        "query": "Symbol('2').valueOf",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Symbol .toString not callable",
        "query": "Symbol('2').toString",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      },
      {
        "description": "Symbol .inspect not callable",
        "query": "Symbol('2').inspect",
        "errorCode": "E_BSONCOMPILERS_TYPE"
      }
    ]
  }
}
