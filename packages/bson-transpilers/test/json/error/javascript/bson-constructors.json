{
  "tests": {
    "Code": [
      {
        "description": "new Code without args",
        "query": "new Code()",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "Code with extra argument (should be 1 or 2)",
        "query": "Code('string', {x: '1'}, 3)",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "Code with wrong type of scope",
        "query": "new Code('string', 5)",
        "errorCode": "E_SEMANTIC_TYPE"
      }
    ],
    "ObjectId": [
      {
        "description": "ObjectId with wrong type of argument",
        "query": "ObjectId({})",
        "errorCode": "E_SEMANTIC_TYPE"
      },
      {
        "description": "ObjectId with extra argument (should be 0 or 1)",
        "query": "ObjectId('5a7382114ec1f67ae445f778', 5)",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      }
    ],
    "Binary": [
      {
        "description": "Binary without argumnets",
        "query": "new Binary()",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "Binary with extra argumnet",
        "query": "new Binary(Buffer.from(\"1234\"), Binary.SUBTYPE_UUID, 5)",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "Binary with wrong buffer",
        "query": "new Binary(Buffer.from(1), Binary.SUBTYPE_UUID)",
        "errorCode": "E_SEMANTIC_TYPE"
      },
      {
        "description": "Binary with empty Buffer.from()",
        "query": "new Binary(Buffer.from(), Binary.SUBTYPE_UUID)",
        "errorCode": "E_SEMANTIC_TYPE"
      },
      {
        "description": "Binary with extra argument in Buffer.from()",
        "query": "new Binary(Buffer.from('1', '2'), Binary.SUBTYPE_UUID)",
        "errorCode": "E_SEMANTIC_TYPE"
      }
    ],
    "DBRef": [
      {
        "description": "DBRef without argumnets",
        "query": "new DBRef()",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "DBRef with extra argument (should be 2 or 3)",
        "query": "new DBRef('coll', ObjectId(), 'db', 5)",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "DBRef with few arguments (should be 2 or 3)",
        "query": "new DBRef('coll')",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "DBRef with wrong oid",
        "query": "new DBRef('coll', 1)",
        "errorCode": "E_SEMANTIC_TYPE"
      },
      {
        "description": "DBRef with wrong namespace",
        "query": "new DBRef(1, ObjectId())",
        "errorCode": "E_SEMANTIC_TYPE"
      },
      {
        "description": "DBRef with wrong db",
        "query": "new DBRef('coll', ObjectId(), 5)",
        "errorCode": "E_SEMANTIC_TYPE"
      }
    ],
    "Int32": [
      {
        "description": "Int32 without argumnets",
        "query": "new Int32()",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "Int32 with extra argument (should be 1)",
        "query": "Int32(3, 4)",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "Int32 with wrong type of argument",
        "query": "Int32({})",
        "errorCode": "E_SEMANTIC_TYPE"
      }
    ],
    "Double": [
      {
        "description": "Double without argumnets",
        "query": "new Double()",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "Double with extra argument (should be 1)",
        "query": "Double(3, 4)",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "Double with wrong type of argument",
        "query": "Double({})",
        "errorCode": "E_SEMANTIC_TYPE"
      }
    ],
    "Long": [
      {
        "description": "Long without argumnets",
        "query": "new Long()",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "Long with extra argument",
        "query": "new Long(-1, 2147483647, 3)",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "Long with wrong type of argument",
        "query": "Long({})",
        "errorCode": "E_SEMANTIC_TYPE"
      }
    ],
    "Document": [
      {
        "description": "Document without colon",
        "query": "{x 1}",
        "errorCode": "E_SYNTAX_GENERIC"
      },
      {
        "description": "Document with wrong value assignment",
        "query": "{x: 1, 2}",
        "errorCode": "E_SYNTAX_GENERIC"
      }
    ],
    "BSONRegExp": [
      {
        "description": "RegExp without arguments",
        "query": "new BSONRegExp()",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "BSONRegExp with extra argument",
        "query": "new BSONRegExp('^[a-z0-9_-]{3,16}$', 'imuxls', 'extra argument')",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "RegExp with unsupported flag",
        "query": "new BSONRegExp('^[a-z0-9_-]{3,16}$', 'wrong')",
        "errorCode": "E_SEMANTIC_GENERIC"
      },
      {
        "description": "BSONRegExp with not a string pattern",
        "query": "new BSONRegExp(123, 'imuxls')",
        "errorCode": "E_SEMANTIC_TYPE"
      },
      {
        "description": "BSONRegExp with not a string flag",
        "query": "new BSONRegExp('^[a-z0-9_-]{3,16}$', 123)",
        "errorCode": "E_SEMANTIC_TYPE"
      }
    ],
    "Decimal128": [
      {
        "description": "Decimal128 without argumnets",
        "query": "new Decimal128()",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "Decimal128 with extra argumnet",
        "query": "new Decimal128(Buffer.from('5'), 5)",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "Decimal128 with wrong buffer",
        "query": "new Decimal128(Buffer.from(5))",
        "errorCode": "E_SEMANTIC_TYPE"
      },
      {
        "description": "Decimal128 with empty Buffer.from()",
        "query": "new Decimal128(Buffer.from())",
        "errorCode": "E_SEMANTIC_TYPE"
      },
      {
        "description": "Decimal128 with extra argument in Buffer.from()",
        "query": "new Decimal128(Buffer.from('1', '2'))",
        "errorCode": "E_SEMANTIC_TYPE"
      }
    ],
    "MinKeyMaxKey": [
      {
        "description": "MinKey with extra argumnet",
        "query": "MinKey(1)",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "new MinKey with extra argumnet",
        "query": "new MinKey(1)",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "MaxKey with extra argumnet",
        "query": "MaxKey(1)",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "new MaxKey with extra argumnet",
        "query": "new MaxKey(1)",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      }
    ],
    "Timestamp": [
      {
        "description": "Timestamp without argumnets",
        "query": "Timestamp()",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "Timestamp with extra argument (should be 2)",
        "query": "Timestamp(10, 100, 1000)",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "Timestamp with few arguments (should be 2)",
        "query": "Timestamp(10)",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "Timestamp with wrong type of low",
        "query": "Timestamp({}, 100)",
        "errorCode": "E_SEMANTIC_TYPE"
      },
      {
        "description": "Timestamp with wrong type of high",
        "query": "Timestamp(10, {})",
        "errorCode": "E_SEMANTIC_TYPE"
      }
    ],
    "Array": [
      {
        "description": "Array with wrong delimiter",
        "query": "[1;2;3]",
        "errorCode": "E_SYNTAX_GENERIC"
      }
    ],
    "Symbol": [
      {
        "description": "new Symbol without args",
        "query": "new Symbol()",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "Symbol with extra argument (should be 1)",
        "query": "Symbol('2', '3')",
        "errorCode": "E_SEMANTIC_ARGUMENTCOUNTMISMATCH"
      },
      {
        "description": "Symbol with wrong type of argument",
        "query": "Symbol({})",
        "errorCode": "E_SEMANTIC_TYPE"
      }
    ]
  }
}
