{
  "tests": {
    "Code": [
      {
        "description": "new Code without args",
        "query": "new Code()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Code with extra argument (should be 1 or 2)",
        "query": "Code('string', {x: '1'}, 3)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Code with wrong type of scope",
        "query": "new Code('string', 5)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "ObjectId .toString() with extra argument",
        "query": "ObjectId().toString(123)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      }
    ],
    "ObjectId": [
      {
        "description": "ObjectId with wrong type of argument",
        "query": "ObjectId({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "ObjectId with extra argument (should be 0 or 1)",
        "query": "ObjectId('5a7382114ec1f67ae445f778', 5)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "ObjectId .getTimestamp() with extra argument",
        "query": "ObjectId().getTimestamp(123)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "ObjectId .equals() without arguments",
        "query": "ObjectId().equals()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "ObjectId .equals() with extra argument",
        "query": "ObjectId().equals(ObjectId(), ObjectId())",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "ObjectId .equals() with wrong type of argument",
        "query": "ObjectId().equals([1, 2])",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "ObjectId .createFromHexString() without arguments",
        "query": "ObjectId.createFromHexString()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "ObjectId .createFromHexString() with extra argument",
        "query": "ObjectId.createFromHexString('5ab901c29ee65f5c8550c5b9', 10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "ObjectId .createFromHexString() with wrong type of argument",
        "query": "ObjectId.createFromHexString({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "ObjectId .createFromTime() without arguments",
        "query": "ObjectId.createFromTime()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "ObjectId .createFromTime() with extra argument",
        "query": "ObjectId.createFromTime('5ab901c29ee65f5c8550c5b9', 10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "ObjectId .createFromTime() with wrong type of argument",
        "query": "ObjectId.createFromTime({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "ObjectId .isValid() without arguments",
        "query": "ObjectId.isValid()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "ObjectId .isValid() with extra argument",
        "query": "ObjectId.isValid('5ab901c29ee65f5c8550c5b9', 10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "ObjectId .isValid() with wrong type of argument",
        "query": "ObjectId.isValid({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      }
    ],
    "Binary": [
      {
        "description": "Binary without arguments",
        "query": "new Binary()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Binary with extra argument",
        "query": "new Binary(Buffer.from(\"1234\"), Binary.SUBTYPE_UUID, 5)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Binary with wrong buffer",
        "query": "new Binary(Buffer.from(1), Binary.SUBTYPE_UUID)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Binary with empty Buffer.from()",
        "query": "new Binary(Buffer.from(), Binary.SUBTYPE_UUID)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Binary .length() with extra argument",
        "query": "Binary(Buffer.from('0404')).length(10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Binary .value() with extra argument",
        "query": "Binary(Buffer.from('0404')).value(12)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Binary .toString() with extra argument",
        "query": "Binary(Buffer.from('0404')).toString(10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      }
    ],
    "DBRef": [
      {
        "description": "DBRef without arguments",
        "query": "new DBRef()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "DBRef with extra argument (should be 2 or 3)",
        "query": "new DBRef('coll', ObjectId(), 'db', 5)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "DBRef with few arguments (should be 2 or 3)",
        "query": "new DBRef('coll')",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "DBRef with wrong oid",
        "query": "new DBRef('coll', 1)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "DBRef with wrong namespace",
        "query": "new DBRef(1, ObjectId())",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "DBRef with wrong db",
        "query": "new DBRef('coll', ObjectId(), 5)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "DBRef .toString() with extra argument",
        "query": "new DBRef('coll', new ObjectId()).toString(10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      }
    ],
    "Int32": [
      {
        "description": "Int32 without arguments",
        "query": "new Int32()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Int32 with extra argument (should be 1)",
        "query": "Int32(3, 4)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Int32 with wrong type of argument",
        "query": "Int32({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Int32 .valueOf() with extra argument",
        "query": "Int32(3).valueOf(10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      }
    ],
    "Double": [
      {
        "description": "Double without arguments",
        "query": "new Double()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Double with extra argument (should be 1)",
        "query": "Double(3, 4)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Double with wrong type of argument",
        "query": "Double({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Double .valueOf() with extra argument",
        "query": "Double(3).valueOf(10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      }
    ],
    "Long": [
      {
        "description": "Long without arguments",
        "query": "new Long()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long with extra argument",
        "query": "new Long(-1, 2147483647, 3)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long with wrong type of argument",
        "query": "Long({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .toString() with extra argument",
        "query": "Long(1, 100).toString(1, 2)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .toString() with wrong type of argument",
        "query": "Long(1, 100).toString({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .toInt() with extra argument",
        "query": "Long(1, 100).toInt(10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .toNumber() with extra argument",
        "query": "Long(1, 100).toNumber(10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .isZero() with extra argument",
        "query": "Long(1, 100).isZero(0)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .isOdd() with extra argument",
        "query": "Long(1, 100).isOdd(10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .isNegative() with extra argument",
        "query": "Long(1, 100).isNegative(-1)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .equals() without arguments",
        "query": "Long(1, 100).equals()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .equals() with extra argument",
        "query": "Long(1, 100).equals(Long(9, 1), 20)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .equals() with wrong type of argument",
        "query": "Long(1, 100).equals({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .notEquals() without arguments",
        "query": "Long(1, 100).notEquals()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .notEquals() with extra argument",
        "query": "Long(1, 100).notEquals(Long(9, 1), 20)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .notEquals() with wrong type of argument",
        "query": "Long(1, 100).notEquals({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .compare() without arguments",
        "query": "Long(1, 100).compare()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .compare() with extra argument",
        "query": "Long(1, 100).compare(Long(9, 1), 20)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .compare() with wrong type of argument",
        "query": "Long(1, 100).compare({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .greaterThan() without arguments",
        "query": "Long(1, 100).greaterThan()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .greaterThan() with extra argument",
        "query": "Long(1, 100).greaterThan(Long(9, 1), 20)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .greaterThan() with wrong type of argument",
        "query": "Long(1, 100).greaterThan({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .greaterThanOrEqual() without arguments",
        "query": "Long(1, 100).greaterThanOrEqual()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .greaterThanOrEqual() with extra argument",
        "query": "Long(1, 100).greaterThanOrEqual(Long(9, 1), 20)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .greaterThanOrEqual() with wrong type of argument",
        "query": "Long(1, 100).greaterThanOrEqual({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .lessThan() without arguments",
        "query": "Long(1, 100).lessThan()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .lessThan() with extra argument",
        "query": "Long(1, 100).lessThan(Long(9, 1), 20)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .lessThan() with wrong type of argument",
        "query": "Long(1, 100).lessThan({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .lessThanOrEqual() without arguments",
        "query": "Long(1, 100).lessThan()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .lessThanOrEqual() with extra argument",
        "query": "Long(1, 100).lessThanOrEqual(Long(9, 1), 20)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .lessThanOrEqual() with wrong type of argument",
        "query": "Long(1, 100).lessThanOrEqual({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .negate() with extra argument",
        "query": "Long(1, 100).negate(12)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .add() without arguments",
        "query": "Long(1, 100).add()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .add() with extra argument",
        "query": "Long(1, 100).add(Long(9, 1), 21)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .add() with wrong type of argument",
        "query": "Long(1, 100).add({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .subtract() without arguments",
        "query": "Long(1, 100).subtract()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .subtract() with extra argument",
        "query": "Long(1, 100).subtract(Long(9, 1), 21)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .subtract() with wrong type of argument",
        "query": "Long(1, 100).subtract({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .multiply() without arguments",
        "query": "Long(1, 100).multiply()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .multiply() with extra argument",
        "query": "Long(1, 100).multiply(Long(9, 1), 21)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .multiply() with wrong type of argument",
        "query": "Long(1, 100).multiply({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .div() without arguments",
        "query": "Long(1, 100).div()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .div() with extra argument",
        "query": "Long(1, 100).div(Long(9, 1), 21)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .modulo() with extra argument",
        "query": "Long(1, 100).modulo(Long(9, 1), 21)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .modulo() with wrong type of argument",
        "query": "Long(1, 100).modulo({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .not() with extra argument",
        "query": "Long(1, 100).not(12)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .and() without arguments",
        "query": "Long(1, 100).and()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .and() with extra argument",
        "query": "Long(1, 100).and(Long(9, 1), 21)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .and() with wrong type of argument",
        "query": "Long(1, 100).and({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .or() without arguments",
        "query": "Long(1, 100).or()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .or() with extra argument",
        "query": "Long(1, 100).or(Long(9, 1), 21)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .or() with wrong type of argument",
        "query": "Long(1, 100).or({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .xor() without arguments",
        "query": "Long(1, 100).xor()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .xor() with extra argument",
        "query": "Long(1, 100).xor(Long(9, 1), 21)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .xor() with wrong type of argument",
        "query": "Long(1, 100).xor({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .shiftLeft() without arguments",
        "query": "Long(1, 100).shiftLeft()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .shiftLeft() with extra argument",
        "query": "Long(1, 100).shiftLeft(10, 20)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .shiftLeft() with wrong type of argument",
        "query": "Long(1, 100).shiftLeft({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .shiftRight() without arguments",
        "query": "Long(1, 100).shiftRight()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .shiftRight() with extra argument",
        "query": "Long(1, 100).shiftRight(10, 20)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .shiftRight() with wrong type of argument",
        "query": "Long(1, 100).shiftRight({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .fromInt() without arguments",
        "query": "Long.fromInt()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .fromInt() with extra argument",
        "query": "Long.fromInt(5, 10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .fromInt() with wrong type of argument",
        "query": "Long.fromInt({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .fromString() without arguments",
        "query": "Long.fromString()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .fromString() with extra argument",
        "query": "Long.fromString('5', 10, 20)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .fromString() with wrong type of argument",
        "query": "Long.fromString(5, 10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .fromBits() without arguments",
        "query": "Long.fromBits()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .fromBits() with extra argument",
        "query": "Long.fromBits(-1, 2147483647, 20)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .fromBits() with few arguments",
        "query": "Long.fromBits(-1)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .fromBits() with wrong type of low",
        "query": "Long.fromBits({}, 2147483647)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Long .fromBits() with wrong type of high",
        "query": "Long.fromBits(-1, {})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      }
    ],
    "BSONRegExp": [
      {
        "description": "RegExp without arguments",
        "query": "new BSONRegExp()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "BSONRegExp with extra argument",
        "query": "new BSONRegExp('^[a-z0-9_-]{3,16}$', 'imuxls', 'extra argument')",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "BSONRegExp with not a string pattern",
        "query": "new BSONRegExp(123, 'imuxls')",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "BSONRegExp with not a string flag",
        "query": "new BSONRegExp('^[a-z0-9_-]{3,16}$', 123)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      }
    ],
    "Decimal128": [
      {
        "description": "Decimal128 without arguments",
        "query": "new Decimal128()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Decimal128 with extra argument",
        "query": "new Decimal128(Buffer.from('5'), 5)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Decimal128 with wrong buffer",
        "query": "new Decimal128(Buffer.from(5))",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Decimal128 with empty Buffer.from()",
        "query": "new Decimal128(Buffer.from())",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Decimal128 .fromString() without arguments",
        "query": "Decimal128.fromString()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Decimal128 .fromString() with extra argument",
        "query": "Decimal128.fromString(\"5\", 10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Decimal128 .fromString() with wrong type of argument",
        "query": "Decimal128.fromString(5)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      }
    ],
    "MinKeyMaxKey": [
      {
        "description": "MinKey with extra argument",
        "query": "MinKey(1)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "new MinKey with extra argument",
        "query": "new MinKey(1)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "MaxKey with extra argument",
        "query": "MaxKey(1)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "new MaxKey with extra argument",
        "query": "new MaxKey(1)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      }
    ],
    "Timestamp": [
      {
        "description": "Timestamp without arguments",
        "query": "Timestamp()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp with extra argument (should be 2)",
        "query": "Timestamp(10, 100, 1000)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp with few arguments (should be 2)",
        "query": "Timestamp(10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp with wrong type of low",
        "query": "Timestamp({}, 100)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp with wrong type of high",
        "query": "Timestamp(10, {})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .toString() with extra argument",
        "query": "Timestamp(1, 100).toString(10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .equals() without arguments",
        "query": "Timestamp(1, 100).equals()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .equals() with extra argument",
        "query": "Timestamp(1, 100).equals(Timestamp(2, 99), 10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .equals() with wrong type of argument",
        "query": "Timestamp(1, 100).equals({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .compare() without arguments",
        "query": "Timestamp(1, 100).compare()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .compare() with extra argument",
        "query": "Timestamp(1, 100).compare(Timestamp(2, 99), 10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .compare() with wrong type of argument",
        "query": "Timestamp(1, 100).compare({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .notEquals() without arguments",
        "query": "Timestamp(1, 100).notEquals()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .notEquals() with extra argument",
        "query": "Timestamp(1, 100).notEquals(Timestamp(2, 99), 10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .notEquals() with wrong type of argument",
        "query": "Timestamp(1, 100).notEquals({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .greaterThan() without arguments",
        "query": "Timestamp(1, 100).greaterThan()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .greaterThan() with extra argument",
        "query": "Timestamp(1, 100).greaterThan(Timestamp(2, 99), 10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .greaterThan() with wrong type of argument",
        "query": "Timestamp(1, 100).greaterThan({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .greaterThanOrEqual() without arguments",
        "query": "Timestamp(1, 100).greaterThanOrEqual()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .greaterThanOrEqual() with extra argument",
        "query": "Timestamp(1, 100).greaterThanOrEqual(Timestamp(2, 99), 10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .greaterThanOrEqual() with wrong type of argument",
        "query": "Timestamp(1, 100).greaterThanOrEqual({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .lessThan() without arguments",
        "query": "Timestamp(1, 100).lessThan()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .lessThan() with extra argument",
        "query": "Timestamp(1, 100).lessThan(Timestamp(2, 99), 10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .lessThan() with wrong type of argument",
        "query": "Timestamp(1, 100).lessThan({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .lessThanOrEqual() without arguments",
        "query": "Timestamp(1, 100).lessThanOrEqual()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .lessThanOrEqual() with extra argument",
        "query": "Timestamp(1, 100).lessThanOrEqual(Timestamp(2, 99), 10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .lessThanOrEqual() with wrong type of argument",
        "query": "Timestamp(1, 100).lessThanOrEqual({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .getLowBits() with extra argument",
        "query": "Timestamp(1, 100).getLowBits(10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Timestamp .getLowBits() with extra argument",
        "query": "Timestamp(1, 100).getLowBits(10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      }
    ],
    "Symbol": [
      {
        "description": "new Symbol without args",
        "query": "new Symbol()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Symbol with extra argument (should be 1)",
        "query": "Symbol('2', '3')",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Symbol with wrong type of argument",
        "query": "Symbol({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Symbol .valueOf() with extra argument",
        "query": "Symbol('2').valueOf(2)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Symbol .toString() with extra argument",
        "query": "Symbol('2').toString(10)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Symbol .inspect() with extra argument",
        "query": "Symbol('2').inspect('2')",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      }
    ],
    "RegExp": [
      {
        "description": "RegExp without arguments",
        "query": "RegExp()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "RegExp with extra argument",
        "query": "RegExp('^[a-z0-9_-]{3,16}$', 'imuxls', 'extra argument')",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "RegExp with not a string pattern",
        "query": "new RegExp(123, 'im')",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "RegExp with not a string flag",
        "query": "new RegExp('^[a-z0-9_-]{3,16}$', 123)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      }
    ],
    "Date": [
      {
        "description": "Date with extra argument",
        "query": "Date(1995, 11, 17, 3, 24, 0, 7, 8)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Date with wrong type of argument",
        "query": "Date({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Date with wrong type of 7th argument",
        "query": "Date(1, 2, 3, 4, 5, 'str')",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      }
    ],
    "Number": [
      {
        "description": "Number with extra argument",
        "query": "new Number(2, 2)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Number with wrong type of argument",
        "query": "new Number({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      }
    ]
  }
}
