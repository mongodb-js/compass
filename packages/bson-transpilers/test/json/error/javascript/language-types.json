{
  "tests": {
    "RegExp": [
      {
        "description": "RegExp without arguments",
        "query": "RegExp()",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "RegExp with extra argument",
        "query": "RegExp('^[a-z0-9_-]{3,16}$', 'imuxls', 'extra argument')",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "RegExp with unsupported flag",
        "query": "new RegExp('ab+c', 'wrong')",
        "errorCode": "E_BSONCOMPILERS_RUNTIME"
      },
      {
        "description": "RegExp with not a string pattern",
        "query": "new RegExp(123, 'im')",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "RegExp with not a string flag",
        "query": "new RegExp('^[a-z0-9_-]{3,16}$', 123)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      }
    ],
    "Date": [
      {
        "description": "Date with extra argument",
        "query": "Date(1995, 11, 17, 3, 24, 0, 7)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Date with wrong type of argument",
        "query": "Date({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Date with wrong type of 7th argument",
        "query": "Date(1, 2, 3, 4, 5, 'str')",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      }
    ],
    "Number": [
      {
        "description": "Number with extra argument",
        "query": "new Number(2, 2)",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      },
      {
        "description": "Number with wrong type of argument",
        "query": "new Number({})",
        "errorCode": "E_BSONCOMPILERS_ARGUMENT"
      }
    ]
  }
}
