runner: !!js/function >
    (it, expect, input, output, transpiler, test) => {
        it(`${input}: ${test.input[input]} => ${output}`, () => {
            expect(
                transpiler[input][output].compile(test.input[input], true)
            ).to.equal(test.output[output]);
        });
    }
tests: 
    Document: 
    - input: 
          javascript: "{x: '1'}"
          shell: "{x: '1'}"
          python: "{'x': '1'}"
      output: 
          javascript: "{\n  'x': '1'\n}"
          python: "{\n    'x': '1'\n}"
          java: "eq(\"x\", \"1\")"
          csharp: "new BsonDocument(\"x\", \"1\")"
          shell: "{\n  'x': '1'\n}"
    - input:
          javascript: "{x: '1',}"
          shell: "{x: '1',}"
          python: "{'x': '1',}"
      output:
          javascript: "{\n  'x': '1'\n}"
          python: "{\n    'x': '1'\n}"
          java: "eq(\"x\", \"1\")"
          csharp: "new BsonDocument(\"x\", \"1\")"
          shell: "{\n  'x': '1'\n}"
    - input:
          javascript: "{x: ['1', '2']}"
          shell: "{x: ['1', '2']}"
          python: "{'x': ['1', '2']}"
      output:
          javascript: "{\n  'x': [\n    '1', '2'\n  ]\n}"
          python: "{\n    'x': [\n        '1', '2'\n    ]\n}"
          java: "eq(\"x\", Arrays.asList(\"1\", \"2\"))"
          csharp: "new BsonDocument(\"x\", new BsonArray\n    {\n        \"1\",\n        \"2\"\n    })"
          shell: "{\n  'x': [\n    '1', '2'\n  ]\n}"
    - input:
          javascript: "{x: {y: 2}}"
          shell: "{x: {y: 2}}"
          python: "{'x': {'y': 2}}"
      output:
          javascript: "{\n  'x': {\n    'y': 2\n  }\n}"
          python: "{\n    'x': {\n        'y': 2\n    }\n}"
          java: "eq(\"x\", eq(\"y\", 2L))"
          csharp: "new BsonDocument(\"x\", new BsonDocument(\"y\", 2))"
          shell: "{\n  'x': {\n    'y': 2\n  }\n}"
    - input:
          javascript: "{}"
          shell: "{}"
          python: "{}"
      output:
          javascript: "{}"
          shell: "{}"
          python: "{}"
          java: "new Document()"
          csharp: "new BsonDocument()"
    - input:
          javascript: "{x: '1', n: '4'}"
          shell: "{x: '1', n: '4'}"
          python: "{'x': '1', 'n': '4'}"
      output:
          javascript: "{\n  'x': '1', \n  'n': '4'\n}"
          python: "{\n    'x': '1', \n    'n': '4'\n}"
          java: "and(eq(\"x\", \"1\"), eq(\"n\", \"4\"))"
          csharp: "new BsonDocument\n{\n    { \"x\", \"1\" }, \n    { \"n\", \"4\" }\n}"
          shell: "{\n  'x': '1', \n  'n': '4'\n}"
    - input:
          javascript: "Object.create({x: '1'})"
          shell: "Object.create({x: '1'})"
      output:
          javascript: "Object.create({\n  'x': '1'\n})"
          python: "{\n    'x': '1'\n}"
          java: "eq(\"x\", \"1\")"
          csharp: "new BsonDocument(\"x\", \"1\")"
          shell: "Object.create({\n  'x': '1'\n})"
    - input:
          javascript: "{ graphLookup : { \"from\" : \"raw_data\", \"startWith\" : \"$_id\", \"connectFromField\" : \"_id\", \"connectToField\" : \"manager\", \"as\" : \"reports\" } }"
          shell: "{ graphLookup : { \"from\" : \"raw_data\", \"startWith\" : \"$_id\", \"connectFromField\" : \"_id\", \"connectToField\" : \"manager\", \"as\" : \"reports\" } }"
          python: "{'graphLookup': {'from': 'raw_data', 'startWith': '$_id', 'connectFromField': '_id', 'connectToField': 'manager', 'as': 'reports'}}"
      output:
          javascript: "{\n  'graphLookup': {\n    'from': 'raw_data', \n    'startWith': '$_id', \n    'connectFromField': '_id', \n    'connectToField': 'manager', \n    'as': 'reports'\n  }\n}"
          python: "{\n    'graphLookup': {\n        'from': 'raw_data', \n        'startWith': '$_id', \n        'connectFromField': '_id', \n        'connectToField': 'manager', \n        'as': 'reports'\n    }\n}"
          java: "eq(\"graphLookup\", and(eq(\"from\", \"raw_data\"), eq(\"startWith\", \"$_id\"), eq(\"connectFromField\", \"_id\"), eq(\"connectToField\", \"manager\"), eq(\"as\", \"reports\")))"
          csharp: "new BsonDocument(\"graphLookup\", new BsonDocument\n    {\n        { \"from\", \"raw_data\" }, \n        { \"startWith\", \"$_id\" }, \n        { \"connectFromField\", \"_id\" }, \n        { \"connectToField\", \"manager\" }, \n        { \"as\", \"reports\" }\n    })"
          shell: "{\n  'graphLookup': {\n    'from': 'raw_data', \n    'startWith': '$_id', \n    'connectFromField': '_id', \n    'connectToField': 'manager', \n    'as': 'reports'\n  }\n}"
    - input:
          javascript: "{ status: 'A', $or: [{ qty: { $lt: 30 } }, { item: { $regex: '^p' } }] }"
          shell: "{ status: 'A', $or: [{ qty: { $lt: 30 } }, { item: { $regex: '^p' } }] }"
          python: "{ 'status': 'A', '$or': [{'qty': { '$lt': 30}}, {'item': { '$regex': '^p'}}]}"
      output:
          python: "{\n    'status': 'A', \n    '$or': [\n        {\n            'qty': {\n                '$lt': 30\n            }\n        }, {\n            'item': {\n                '$regex': '^p'\n            }\n        }\n    ]\n}"
          javascript: "{\n  'status': 'A', \n  '$or': [\n    {\n      'qty': {\n        '$lt': 30\n      }\n    }, {\n      'item': {\n        '$regex': '^p'\n      }\n    }\n  ]\n}"
          java: "and(eq(\"status\", \"A\"), or(Arrays.asList(lt(\"qty\", 30L), regex(\"item\", \"^p\"))))"
          csharp: "new BsonDocument\n{\n    { \"status\", \"A\" }, \n    { \"$or\", new BsonArray\n    {\n        new BsonDocument(\"qty\", \n        new BsonDocument(\"$lt\", 30)),\n        new BsonDocument(\"item\", \n        new BsonDocument(\"$regex\", \"^p\"))\n    } }\n}"
          shell: "{\n  'status': 'A', \n  '$or': [\n    {\n      'qty': {\n        '$lt': 30\n      }\n    }, {\n      'item': {\n        '$regex': '^p'\n      }\n    }\n  ]\n}"
    - input:
          python: "{ 'status': 'A', '$or': [{'qty': { '$lt': 30}}, {'item': { '$regex': '^p'}}]}"
      output:
          javascript: "{\n  'status': 'A', \n  '$or': [\n    {\n      'qty': {\n        '$lt': 30\n      }\n    }, {\n      'item': {\n        '$regex': '^p'\n      }\n    }\n  ]\n}"
          python: "{ 'status': 'A', '$or': [{'qty': { '$lt': 30}}, {'item': { '$regex': '^p'}}]}"
          java: "and(eq(\"status\", \"A\"), or(Arrays.asList(lt(\"qty\", 30L), regex(\"item\", \"^p\"))))"
          csharp: "new BsonDocument\n{\n    { \"status\", \"A\" }, \n    { \"$or\", new BsonArray\n    {\n        new BsonDocument(\"qty\", \n        new BsonDocument(\"$lt\", 30)),\n        new BsonDocument(\"item\", \n        new BsonDocument(\"$regex\", \"^p\"))\n    } }\n}"
          shell: "{\n  'status': 'A', \n  '$or': [\n    {\n      'qty': {\n        '$lt': 30\n      }\n    }, {\n      'item': {\n        '$regex': '^p'\n      }\n    }\n  ]\n}"
    Array:
    - input:
          python: "['1', '2']"
          javascript: "['1', '2']"
          shell: "['1', '2']"
      output:
          javascript: "[\n  '1', '2'\n]"
          java: "Arrays.asList(\"1\", \"2\")"
          csharp: "new BsonArray\n{\n    \"1\",\n    \"2\"\n}"
          shell: "[\n  '1', '2'\n]"
          python: "[\n    '1', '2'\n]"
    - input:
          python: "['1', '2',]"
          javascript: "['1', '2',]"
          shell: "['1', '2',]"
      output:
          javascript: "[\n  '1', '2'\n]"
          java: "Arrays.asList(\"1\", \"2\")"
          csharp: "new BsonArray\n{\n    \"1\",\n    \"2\"\n}"
          shell: "[\n  '1', '2'\n]"
          python: "[\n    '1', '2'\n]"
    - input:
          python: "['1', { 'settings': 'http2' }]"
          javascript: "['1', { settings: 'http2' }]"
          shell: "['1', { settings: 'http2' }]"
      output:
          javascript: "[\n  '1', {\n    'settings': 'http2'\n  }\n]"
          java: "Arrays.asList(\"1\", eq(\"settings\", \"http2\"))"
          csharp: "new BsonArray\n{\n    \"1\",\n    new BsonDocument(\"settings\", \"http2\")\n}"
          shell: "[\n  '1', {\n    'settings': 'http2'\n  }\n]"
          python: "[\n    '1', {\n        'settings': 'http2'\n    }\n]"
    - input:
          python: "{ 'pipeline': [{'$match': {'$expr': { '$eq': [ '$manager', '$$me' ] } } }, { '$project': { 'managers': 0}}, {'$sort': { 'startQuarter': 1, 'notes': 1, 'job_code': 1}}]}"
          javascript: "{\"pipeline\": [ { $match: { $expr: { \"$eq\": [ \"$manager\", \"$$me\" ] } } }, { $project: { managers : 0 } }, { $sort: { startQuarter: 1, notes:1, job_code: 1 } } ]}"
          shell: "{\"pipeline\": [ { $match: { $expr: { \"$eq\": [ \"$manager\", \"$$me\" ] } } }, { $project: { managers : 0 } }, { $sort: { startQuarter: 1, notes:1, job_code: 1 } } ]}"
      output:
          javascript: "{\n  'pipeline': [\n    {\n      '$match': {\n        '$expr': {\n          '$eq': [\n            '$manager', '$$me'\n          ]\n        }\n      }\n    }, {\n      '$project': {\n        'managers': 0\n      }\n    }, {\n      '$sort': {\n        'startQuarter': 1, \n        'notes': 1, \n        'job_code': 1\n      }\n    }\n  ]\n}"
          java: "eq(\"pipeline\", Arrays.asList(match(eq(\"$expr\", Arrays.asList(\"$manager\", \"$$me\"))), project(exclude(\"managers\")), sort(orderBy(ascending(\"startQuarter\"), ascending(\"notes\"), ascending(\"job_code\")))))"
          csharp: "new BsonDocument(\"pipeline\", new BsonArray\n    {\n        new BsonDocument(\"$match\", \n        new BsonDocument(\"$expr\", \n        new BsonDocument(\"$eq\", \n        new BsonArray\n                    {\n                        \"$manager\",\n                        \"$$me\"\n                    }))),\n        new BsonDocument(\"$project\", \n        new BsonDocument(\"managers\", 0)),\n        new BsonDocument(\"$sort\", \n        new BsonDocument\n            {\n                { \"startQuarter\", 1 }, \n                { \"notes\", 1 }, \n                { \"job_code\", 1 }\n            })\n    })"
          shell: "{\n  'pipeline': [\n    {\n      '$match': {\n        '$expr': {\n          '$eq': [\n            '$manager', '$$me'\n          ]\n        }\n      }\n    }, {\n      '$project': {\n        'managers': 0\n      }\n    }, {\n      '$sort': {\n        'startQuarter': 1, \n        'notes': 1, \n        'job_code': 1\n      }\n    }\n  ]\n}"
          python: "{\n    'pipeline': [\n        {\n            '$match': {\n                '$expr': {\n                    '$eq': [\n                        '$manager', '$$me'\n                    ]\n                }\n            }\n        }, {\n            '$project': {\n                'managers': 0\n            }\n        }, {\n            '$sort': {\n                'startQuarter': 1, \n                'notes': 1, \n                'job_code': 1\n            }\n        }\n    ]\n}"
    - input:
          python: "['1', ['2', '3']]"
          "javpscript": "['1', ['2', '3']]"
          shell: "['1', ['2', '3']]"
      output:
          javascript: "[\n  '1', [\n    '2', '3'\n  ]\n]"
          java: "Arrays.asList(\"1\", Arrays.asList(\"2\", \"3\"))"
          csharp: "new BsonArray\n{\n    \"1\",\n    new BsonArray\n    {\n        \"2\",\n        \"3\"\n    }\n}"
          shell: "[\n  '1', [\n    '2', '3'\n  ]\n]"
          python: "[\n    '1', [\n        '2', '3'\n    ]\n]"
    - input:
          python: "[]"
          javascript: "[]"
          shell: "[]"
      output:
          javascript: "[]"
          java: "Arrays.asList()"
          csharp: "new BsonArray()"
          shell: "[]"
          python: "[]"
    - input:
          python: "['1', ('2', '3')]"
      output:
          javascript: "[\n  '1', [\n    '2', '3'\n  ]\n]"
          java: "Arrays.asList(\"1\", Arrays.asList(\"2\", \"3\"))"
          csharp: "new BsonArray\n{\n    \"1\",\n    new BsonArray\n    {\n        \"2\",\n        \"3\"\n    }\n}"
          shell: "[\n  '1', [\n    '2', '3'\n  ]\n]"
          python: "[\n    '1', [\n        '2', '3'\n  ]\n]"
    ArrayElision:
    - input:
          javascript: "[,'1', '2',]"
          shell: "[,'1', '2',]"
      output:
          python: "[\n    None, '1', '2'\n]"
          java: "Arrays.asList(new BsonUndefined(), \"1\", \"2\")"
          csharp: "new BsonArray\n{\n    BsonUndefined.Value,\n    \"1\",\n    \"2\"\n}"
          shell: "[\n  undefined, '1', '2'\n]"
          javascript: "[\n  undefined, '1', '2'\n]"
    - input:
          javascript: "[,]"
          shell: "[,]"
      output:
          python: "[\n    None\n]"
          java: "Arrays.asList(new BsonUndefined())"
          csharp: "new BsonArray\n{\n    BsonUndefined.Value\n}"
          shell: "[\n  undefined\n]"
          javascript: "[\n  undefined\n]"
    - input:
          javascript: "[,,]"
          shell: "[,,]"
      output:
          python: "[\n    None, None\n]"
          java: "Arrays.asList(new BsonUndefined(), \n    new BsonUndefined())"
          csharp: "new BsonArray\n{\n    BsonUndefined.Value,\n    BsonUndefined.Value\n}"
          shell: "[\n  undefined, undefined\n]"
          javascript: "[\n  undefined, undefined\n]"
    - input:
          javascript: "['1',,,,'2']"
          shell: "['1',,,,'2']"
      output:
          python: "[\n    '1', None, None, None, '2'\n]"
          java: "Arrays.asList(\"1\", \n    new BsonUndefined(), \n    new BsonUndefined(), \n    new BsonUndefined(), \"2\")"
          csharp: "new BsonArray\n{\n    \"1\",\n    BsonUndefined.Value,\n    BsonUndefined.Value,\n    BsonUndefined.Value,\n    \"2\"\n}"
          shell: "[\n  '1', undefined, undefined, undefined, '2'\n]"
          javascript: "[\n  '1', undefined, undefined, undefined, '2'\n]"
    Tuple:
    - input:
          python: "()"
      output:
          python: "()"
          javascript: "[]"
          java: "Arrays.asList()"
          csharp: "new BsonArray()"
          shell: "[]"
    - input:
          python: "(1,)"
      output:
          python: "(1,)"
          javascript: "[\n  1\n]"
          java: "Arrays.asList(1L)"
          csharp: "new BsonArray\n{\n    1\n}"
          shell: "[\n  1\n]"
    - input:
          python: "(1)"
      output:
          python: "(1)"
          javascript: "(1)"
          java: "(1L)"
          csharp: "(1)"
          shell: "(1)"
    - input:
          python: "('1', { 'settings': 'http2' })"
      output:
          python: "('1', { 'settings': 'http2' })"
          javascript: "[\n  '1', {\n    'settings': 'http2'\n  }\n]"
          java: "Arrays.asList(\"1\", eq(\"settings\", \"http2\"))"
          csharp: "new BsonArray\n{\n    \"1\",\n    new BsonDocument(\"settings\", \"http2\")\n}"
          shell: "[\n  '1', {\n    'settings': 'http2'\n  }\n]"
    - input:
          python: "('1', ['2', '3'])"
      output:
          python: "('1', ['2', '3'])"
          javascript: "[\n  '1', [\n    '2', '3'\n  ]\n]"
          java: "Arrays.asList(\"1\", Arrays.asList(\"2\", \"3\"))"
          csharp: "new BsonArray\n{\n    \"1\",\n    new BsonArray\n    {\n        \"2\",\n        \"3\"\n    }\n}"
          shell: "[\n  '1', [\n    '2', '3'\n  ]\n]"
    - input:
          python: "['1', ('2', '3')]"
      output:
          python: "['1', ('2', '3')]"
          javascript: "[\n  '1', [\n    '2', '3'\n  ]\n]"
          java: "Arrays.asList(\"1\", Arrays.asList(\"2\", \"3\"))"
          csharp: "new BsonArray\n{\n    \"1\",\n    new BsonArray\n    {\n        \"2\",\n        \"3\"\n    }\n}"
          shell: "[\n  '1', [\n    '2', '3'\n  ]\n]"
    binops:
    - input:
          javascript: 2+5-1
          shell: 2+5-1
          python: 2+5-1
      output:
          javascript: 2+5-1
          shell: 2+5-1
          python: 2+5-1
          java: 2L+5L-1L
          csharp: 2+5-1
    - input:
          javascript: 2+(4*36)/3
          shell: 2+(4*36)/3
          python: 2+(4*36)/3
      output:
          javascript: 2+(4*36)/3
          shell: 2+(4*36)/3
          python: 2+(4*36)/3
          java: 2L+(4L*36L)/3L
          csharp: 2+(4*36)/3
    - input:
          python: 10 // 2 % 3
      output:
          javascript: Math.floor(10, 2)%3
          shell: Math.floor(10, 2)%3
          python: 10 // 2 % 3
          java: floor(10L, 2L)%3L
          csharp: Math.floor(10, 2)%3
    - input:
          python: 6 ** 7
      output:
          javascript: Math.pow(6, 7)
          shell: Math.pow(6, 7)
          python: 6 ** 7
          java: pow(6L, 7L)
          csharp: Math.pow(6, 7)
    - input:
          javascript: 1 | 2 ^ 3 & 4 << 6 >> 7
          shell: 1 | 2 ^ 3 & 4 << 6 >> 7
          python: 1 | 2 ^ 3 & 4 << 6 >> 7
      output:
          javascript: 1|2^3&4<<6>>7
          shell: 1|2^3&4<<6>>7
          python: 1|2^3&4<<6>>7
          java: 1L|2L^3L&4L<<6L>>7L
          csharp: 1|2^3&4<<6>>7
    - input:
          javascript: 2+ +5 - -6
          shell: 2+ +5 - -6
          python: 2+ +5- -6
      output:
          javascript: 2++5--6
          shell: 2++5--6
          python: 2++5--6
          java: 2L++5L--6L
          csharp: 2++5--6
    unaryops:
    - input:
          javascript: '+1'
          shell: '+1'
          python: '+1'
      output:
          javascript: '+1'
          shell: '+1'
          python: '+1'
          java: '+1L'
          csharp: '+1'
    - input:
          javascript: '-1'
          shell: '-1'
          python: '-1'
      output:
          javascript: '-1'
          shell: '-1'
          python: '-1'
          java: '-1L'
          csharp: '-1'
    - input:
          javascript: '~1'
          shell: '~1'
          python: '~1'
      output:
          javascript: '~1'
          shell: '~1'
          python: '~1'
          java: '~1L'
          csharp: '~1'
    Number:
    - input:
          javascript: new Number(2)
          shell: new Number(2)
      output:
          javascript: new Number(2)
          shell: new Number(2)
          python: '2'
          java: 2d
          csharp: (int) 2
    - input:
          javascript: Number(2)
          shell: Number(2)
      output:
          javascript: new Number(2)
          shell: new Number(2)
          python: '2'
          java: 2d
          csharp: (int) 2
    - input:
          javascript: Number('2')
          shell: Number('2')
      output:
          javascript: new Number('2')
          shell: new Number('2')
          python: float('2')
          java: Double.parseDouble("2")
          csharp: int.Parse("2")
    - input:
          shell: Number()
      output:
          javascript: new Number(0)
          shell: new Number(0)
          python: '0'
          java: 0d
          csharp: (int) 0
    numeric_literals:
    - input:
          javascript: '2'
          shell: '2'
          python: '2'
      output:
          javascript: '2'
          shell: '2'
          python: '2'
          java: '2L'
          csharp: '2'
    - input:
          javascript: '429496729601'
          shell: '429496729601'
          python: '429496729601'
      output:
          javascript: '429496729601'
          shell: '429496729601'
          python: '429496729601'
          java: '429496729601L'
          csharp: '429496729601'
    - input:
          javascript: '2.001'
          shell: '2.001'
          python: '2.001'
      output:
          javascript: '2.001'
          shell: '2.001'
          python: '2.001'
          java: '2.001d'
          csharp: '2.001'
    - input:
          javascript: '0X123ABC'
          shell: '0X123ABC'
          python: '0X123ABC'
      output:
          javascript: '0X123ABC'
          shell: '0X123ABC'
          python: '0X123ABC'
          java: '0X123ABC'
          csharp: '0X123ABC'
    - input:
          javascript: '0x123abc'
          shell: '0x123abc'
          python: '0x123abc'
      output:
          javascript: '0x123abc'
          shell: '0x123abc'
          python: '0x123abc'
          java: '0x123abc'
          csharp: '0x123abc'
    - input:
          javascript: '0o1234567'
          shell: '0o1234567'
          python: '0o1234567'
      output:
          javascript: '0o1234567'
          shell: '0o1234567'
          python: '0o1234567'
          java: '01234567'
          csharp: '342391'
    - input:
          javascript: '01234567'
          shell: '01234567'
      output:
          javascript: '01234567'
          shell: '01234567'
          python: '0o1234567'
          java: '01234567'
          csharp: '342391'
    - input:
          javascript: '001234567'
          shell: '001234567'
      output:
          javascript: '001234567'
          shell: '001234567'
          python: '0o1234567'
          java: '01234567'
          csharp: '342391'
    - input:
          javascript: '0O1234567'
          shell: '0O1234567'
          python: '0O1234567'
      output:
          javascript: '0O1234567'
          shell: '0O1234567'
          python: '0o1234567'
          java: '01234567'
          csharp: '342391'
    misc_literals:
    - input:
          javascript: 'true'
          shell: 'true'
          python: 'True'
      output:
          javascript: 'true'
          shell: 'true'
          python: 'True'
          java: 'true'
          csharp: 'true'
    - input:
          javascript: 'false'
          shell: 'false'
          python: 'False'
      output:
          javascript: 'false'
          shell: 'false'
          python: 'False'
          java: 'false'
          csharp: 'false'
    - input:
          javascript: 'null'
          shell: 'null'
          python: 'None'
      output:
          javascript: 'null'
          shell: 'null'
          python: 'None'
          java: 'new BsonNull()'
          csharp: 'BsonNull.Value'
    - input:
          javascript: 'undefined'
          shell: 'undefined'
      output:
          javascript: 'undefined'
          shell: 'undefined'
          python: 'None'
          java: 'new BsonUndefined()'
          csharp: 'BsonUndefined.Value'
    string_literals:
    - input:
          javascript: "'string'"
          shell: "'string'"
          python: "'string'"
      output:
          javascript: "'string'"
          shell: "'string'"
          python: "'string'"
          java: "\"string\""
          csharp: "\"string\""
    - input:
          javascript: "\"string\""
          shell: "\"string\""
          python: "\"string\""
      output:
          javascript: "'string'"
          shell: "'string'"
          python: "'string'"
          java: "\"string\""
          csharp: "\"string\""
    python_strings:
    - input:
          python: "'''string'''"
      output:
          javascript": "'string'"
          java": "\"string\""
          csharp": "\"string\""
          shell": "'string'"
    - input:
          python: "\"\"\"string\"\"\""
      output:
          javascript: "'string'"
          java: "\"string\""
          csharp: "\"string\""
          shell: "'string'"
    - input:
        python: "b'abc'"
      output:
          javascript: "'abc'"
          java: "\"abc\""
          csharp: "\"abc\""
          shell: "'abc'"
    - input:
        python: "B'abc'"
      output:
          javascript: "'abc'"
          java: "\"abc\""
          csharp: "\"abc\""
          shell: "'abc'"
    - input:
        python: "b\"abc\""
      output:
          javascript: "'abc'"
          java: "\"abc\""
          csharp: "\"abc\""
          shell: "'abc'"
    - input:
          python: "B'abc'"
      output:
          javascript: "'abc'"
          java: "\"abc\""
          csharp: "\"abc\""
          shell: "'abc'"
    - input:
          python: "u'abc'"
      output:
          javascript: "'abc'"
          java: "\"abc\""
          csharp: "\"abc\""
          shell: "'abc'"
    - input:
          python: "U'abc'"
      output:
          javascript: "'abc'"
          java: "\"abc\""
          csharp: "\"abc\""
          shell: "'abc'"
    - input:
          python: "u\"abc\""
      output:
          javascript: "'abc'"
          java: "\"abc\""
          csharp: "\"abc\""
          shell: "'abc'"
    - input:
          python: "U'abc'"
      output:
          javascript: "'abc'"
          java: "\"abc\""
          csharp: "\"abc\""
          shell: "'abc'"
    - input:
          python: "fR'abc'"
      output:
          javascript: "'abc'"
          java: "\"abc\""
          csharp: "\"abc\""
          shell: "'abc'"
    - input:
          python: "rB'abc'"
      output:
          javascript: "'abc'"
          java: "\"abc\""
          csharp: "\"abc\""
          shell: "'abc'"
    # TODO: unescape escaped quotes
    number_methods:
    - input:
          python: int(3)
      output:
          javascript: new Int32(3)
          shell: new NumberInt(3)
          python: int(3)
          java: '3'
          csharp: '3'
    - input:
          python: int('3')
      output:
          javascript: new Int32('3')
          shell: new NumberInt('3')
          python: int('3')
          java: Integer.parseInt("3")
          csharp: Convert.ToInt32("3")
    - input:
          python: int(3.001)
      output:
          javascript: new Int32(3.001)
          shell: new NumberInt(3.001)
          python: int(3.001)
          java: (int) 3.001d
          csharp: Convert.ToInt32(3.001)
    - input:
          python: int(0x3)
      output:
          javascript: new Int32(0x3)
          shell: new NumberInt(0x3)
          python: int(0x3)
          java: (int) 0x3
          csharp: Convert.ToInt32(0x3)
    - input:
          python: int(0o3)
      output:
          javascript: new Int32(0o3)
          shell: new NumberInt(0o3)
          python: int(0o3)
          java: (int) 03
          csharp: '3'
    - input:
          python: float(3)
      output:
          javascript: new Double(3)
          shell: '3'
          python: float(3)
          java: '3d'
          csharp: '3.0'
    - input:
          python: float('3')
      output:
          javascript: new Double('3')
          shell: '3'
          python: float('3')
          java: Double.parseDouble("3")
          csharp: Convert.ToDouble("3")
    - input:
          python: float(3.001)
      output:
          javascript: new Double(3.001)
          shell: '3.001'
          python: float(3.001)
          java: 3.001d
          csharp: '3.001'
    - input:
          python: float(0x3)
      output:
          javascript: new Double(0x3)
          shell: '0x3'
          python: float(0x3)
          java: (double) 0x3
          csharp: Convert.ToDouble(0x3)
    - input:
          python: float(0o3)
      output:
          javascript: new Double(0o3)
          shell: '0o3'
          python: float(0o3)
          java: (double) 03
          csharp: '3.0'
    Date:
    - input:
          javascript: new Date()
          shell: new Date()
          python: datetime()
      output:
          javascript: new Date()
          shell: new Date()
          python: datetime.utcnow()
          java: new java.util.Date()
          csharp: DateTime.Now
    - input:
          javascript: Date.now()
          shell: Date.now()
          python: datetime.utcnow()
      output:
          javascript: Date.now()
          shell: Date.now()
          python: datetime.utcnow()
          java: new java.util.Date()
          csharp: DateTime.Now
    - input:
          javascript: new Date(1995, 11, 17)
          shell: new Date(1995, 11, 17)
          python: datetime(1995, 12, 17)
      output:
          javascript: new Date('Sun, 17 Dec 1995 00:00:00 GMT')
          shell: new Date('Sun, 17 Dec 1995 00:00:00 GMT')
          python: datetime(1995, 12, 17, 0, 0, 0, tzinfo=timezone.utc)
          java: new java.util.Date(819158400000L)
          csharp: new DateTime(1995, 12, 17, 0, 0, 0)
    - input:
          javascript: new Date(1995, 11, 17, 3, 24)
          shell: new Date(1995, 11, 17, 3, 24)
          python: datetime(1995, 12, 17, 3, 24)
      output:
          javascript: new Date('Sun, 17 Dec 1995 03:24:00 GMT')
          shell: new Date('Sun, 17 Dec 1995 03:24:00 GMT')
          python: datetime(1995, 12, 17, 3, 24, 0, tzinfo=timezone.utc)
          java: new java.util.Date(819170640000L)
          csharp: new DateTime(1995, 12, 17, 3, 24, 0)
    - input:
          javascript: new Date(1995, 11, 17, 3, 24, 55)
          shell: new Date(1995, 11, 17, 3, 24, 55)
          python: datetime(1995, 12, 17, 3, 24, 55)
      output:
          javascript: new Date('Sun, 17 Dec 1995 03:24:55 GMT')
          shell: new Date('Sun, 17 Dec 1995 03:24:55 GMT')
          python: datetime(1995, 12, 17, 3, 24, 55, tzinfo=timezone.utc)
          java: new java.util.Date(819170695000L)
          csharp: new DateTime(1995, 12, 17, 3, 24, 55)
    - input:
          javascript: new Date('Sun, 17 Dec 1995 03:24:00 GMT')
          shell: new Date('Sun, 17 Dec 1995 03:24:00 GMT')
      output:
          python: datetime(1995, 12, 17, 3, 24, 0, tzinfo=timezone.utc)
          java: new java.util.Date(819170640000L)
          csharp: new DateTime(1995, 12, 17, 3, 24, 0)
          javascript: new Date('Sun, 17 Dec 1995 03:24:00 GMT')
          shell: new Date('Sun, 17 Dec 1995 03:24:00 GMT')
    - input:
          javascript: new Date(819167040000)
          shell: new Date(819167040000)
      output:
          shell: new Date('Sun, 17 Dec 1995 02:24:00 GMT')
          javascript: new Date('Sun, 17 Dec 1995 02:24:00 GMT')
          python: datetime(1995, 12, 17, 2, 24, 0, tzinfo=timezone.utc)
          java: new java.util.Date(819167040000L)
          csharp: new DateTime(1995, 12, 17, 2, 24, 0)
    date_string:
    - input:
          javascript: Date('Sun, 17 Dec 1995 03:24:00 GMT')
          shell: Date('Sun, 17 Dec 1995 03:24:00 GMT')
      output:
          python: datetime(1995, 12, 17, 3, 24, 0, tzinfo=timezone.utc).strftime('%a %b %d %Y %H:%M:%S %Z')
          java: new SimpleDateFormat("EEE MMMMM dd yyyy HH:mm:ss").format(new java.util.Date(819170640000L))
          csharp: new DateTime(1995, 12, 17, 3, 24, 0).ToString("ddd MMM dd yyyy HH':'mm':'ss UTC")
          javascript: Date('Sun, 17 Dec 1995 03:24:00 GMT')
          shell: Date('Sun, 17 Dec 1995 03:24:00 GMT')
    - input:
          javascript: Date(819167040000)
          shell: Date(819167040000)
      output:
          javascript: Date('Sun, 17 Dec 1995 02:24:00 GMT')
          shell: Date('Sun, 17 Dec 1995 02:24:00 GMT')
          python: datetime(1995, 12, 17, 2, 24, 0, tzinfo=timezone.utc).strftime('%a %b %d %Y %H:%M:%S %Z')
          java: new SimpleDateFormat("EEE MMMMM dd yyyy HH:mm:ss").format(new java.util.Date(819167040000L))
          csharp: new DateTime(1995, 12, 17, 2, 24, 0).ToString("ddd MMM dd yyyy HH':'mm':'ss UTC")
    - input:
          javascript: Date(1995, 11, 17)
          shell: Date(1995, 11, 17)
      output:
          javascript: Date('Sun, 17 Dec 1995 00:00:00 GMT')
          shell: Date('Sun, 17 Dec 1995 00:00:00 GMT')
          python: datetime(1995, 12, 17, 0, 0, 0, tzinfo=timezone.utc).strftime('%a %b %d %Y %H:%M:%S %Z')
          java: new SimpleDateFormat("EEE MMMMM dd yyyy HH:mm:ss").format(new java.util.Date(819158400000L))
          csharp: new DateTime(1995, 12, 17, 0, 0, 0).ToString("ddd MMM dd yyyy HH':'mm':'ss UTC")
    ISODate:
    - input:
          shell: new ISODate('1995-12-17T03:24:00.000Z')
      output:
          python: datetime(1995, 12, 17, 3, 24, 0, tzinfo=timezone.utc)
          java: new java.util.Date(819170640000L)
          csharp: new DateTime(1995, 12, 17, 3, 24, 0)
          javascript: new Date('Sun, 17 Dec 1995 03:24:00 GMT')
    - input:
          shell: ISODate('1995-12-17T03:24:00.000Z')
      output:
          python: datetime(1995, 12, 17, 3, 24, 0, tzinfo=timezone.utc)
          java: new java.util.Date(819170640000L)
          csharp: new DateTime(1995, 12, 17, 3, 24, 0)
          javascript: new Date('Sun, 17 Dec 1995 03:24:00 GMT')
    - input:
          shell: ISODate()
      output:
          javascript: new Date()
          python: datetime.utcnow()
          java: new java.util.Date()
          csharp: DateTime.Now
    - input:
          shell: new ISODate()
      output:
          javascript: new Date()
          python: datetime.utcnow()
          java: new java.util.Date()
          csharp: DateTime.Now
    regular_expressions:
    - description: "empty RegExp"
      input:
          javascript: "RegExp('')"
          shell: "RegExp('')"
          python: "re.compile('', re.A)"
      output:
          javascript: "new RegExp('(?:)')"
          shell: "new RegExp('(?:)')"
          python: "re.compile(r\"(?:)\")"
          java: "Pattern.compile(\"(?:)\")"
          csharp: "new Regex(\"(?:)\")"
    - description: "RegExp without options"
      input:
          javascript: "new RegExp('abc')"
          shell: "new RegExp('abc')"
          python: "re.compile('abc', re.A)"
      output:
          javascript: "new RegExp('abc')"
          python: "re.compile(r\"abc\")"
          java: "Pattern.compile(\"abc\")"
          csharp: "new Regex(\"abc\")"
          shell: "new RegExp('abc')"
    - description: "RegExp with named but only A flag"
      input:
          python: "re.compile('abc', flags=re.A)"
      output:
          javascript: "new RegExp('abc')"
          java: "Pattern.compile(\"abc\")"
          csharp: "new Regex(\"abc\")"
          shell: "new RegExp('abc')"
    - description: "regex object with im flags as args"
      input:
          javascript: "new RegExp('ab+c', 'im')"
          shell: "new RegExp('ab+c', 'im')"
          python: "re.compile('ab+c', re.I | re.M | re.A)"
      output:
          javascript: "new RegExp('ab+c', 'im')"
          python: "re.compile(r\"ab+c(?im)\")"
          java: "Pattern.compile(\"ab+c(?im)\")"
          csharp: "new Regex(\"(?im)ab+c\")"
          shell: "new RegExp('ab+c', 'im')"
    - description: "regex object with named flags as args"
      input:
          python: "re.compile('ab+c', flags=re.I | re.M | re.A)"
      output:
          javascript: "new RegExp('ab+c', 'im')"
          java: "Pattern.compile(\"ab+c(?im)\")"
          csharp: "new Regex(\"(?im)ab+c\")"
          shell: "new RegExp('ab+c', 'im')"
    - description: "regex object with ig flags as args"
      input:
          javascript: "new RegExp('ab+c', 'ig')"
          shell: "new RegExp('ab+c', 'ig')"
      output:
          javascript: "new RegExp('ab+c', 'gi')"
          python: "re.compile(r\"ab+c(?is)\")"
          java: "Pattern.compile(\"ab+c(?i)\")"
          csharp: "new Regex(\"(?i)ab+c\")"
          shell: "new RegExp('ab+c', 'gi')"
    - description: "regex object with forward slash"
      input:
          javascript: "new RegExp('ab/cd')"
          shell: "new RegExp('ab/cd')"
          python: "re.compile('ab/cd', re.A)"
      output:
          javascript: "new RegExp('ab\\/cd')"
          python: "re.compile(r\"ab\\/cd\")"
          java: "Pattern.compile(\"ab\\\\/cd\")"
          csharp: "new Regex(\"ab\\/cd\")"
          shell: "new RegExp('ab\\/cd')"
    - description: "regex object with escaped double quote"
      input:
          javascript: "new RegExp('ab\\\"ab')"
          shell: "new RegExp('ab\\\"ab')"
          python: "re.compile('ab\\\"ab', re.A)"
      output:
          javascript: "new RegExp('ab\"ab')"
          python: "re.compile(r\"ab\\\"ab\")"
          java: "Pattern.compile(\"ab\\\"ab\")"
          csharp: "new Regex(\"ab\\\"ab\")"
          shell: "new RegExp('ab\"ab')"
    - description: "regex object with nonescaped double quote"
      input:
          javascript: "new RegExp('ab\"ab')"
          shell: "new RegExp('ab\"ab')"
          python: "re.compile('ab\"ab', re.A)"
      output:
          javascript: "new RegExp('ab\"ab')"
          python: "re.compile(r\"ab\\\"ab\")"
          java: "Pattern.compile(\"ab\\\"ab\")"
          csharp: "new Regex(\"ab\\\"ab\")"
          shell: "new RegExp('ab\"ab')"
    - description: "regex object with escaped single quote"
      input:
          javascript: "new RegExp('ab\\'ab')"
          shell: "new RegExp('ab\\'ab')"
          python: "re.compile('ab\\'ab', re.A)"
      output:
          javascript: "new RegExp('ab\\'ab')"
          python: "re.compile(r\"ab'ab\")"
          java: "Pattern.compile(\"ab'ab\")"
          csharp: "new Regex(\"ab'ab\")"
          shell: "new RegExp('ab\\'ab')"
    - description: "regex object with nonescaped single quote"
      input:
          javascript: "new RegExp(\"ab'ab\")"
          shell: "new RegExp(\"ab'ab\")"
          python: "re.compile(\"ab'ab\", re.A)"
      output:
          javascript: "new RegExp('ab\\'ab')"
          shell: "new RegExp('ab\\'ab')"
          python: "re.compile(r\"ab'ab\")"
          java: "Pattern.compile(\"ab'ab\")"
          csharp: "new Regex(\"ab'ab\")"
    - description: "regex object with newline"
      input:
          javascript: "new RegExp(\"\\\\n\")"
          shell: "new RegExp(\"\\\\n\")"
          python: "re.compile('\\\\n', re.A)"
      output:
          javascript: "new RegExp('\\n')"
          shell: "new RegExp('\\n')"
          python: "re.compile(r\"\\\\n\")"
          java: "Pattern.compile(\"\\\\n\")"
          csharp: "new Regex(\"\\n\")"
    - description: "regex literal with ig flags"
      input:
          javascript: "/ab+c/ig"
          shell: "/ab+c/ig"
      output:
          javascript: "new RegExp('ab+c', 'gi')"
          python: "re.compile(r\"ab+c(?is)\")"
          java: "Pattern.compile(\"ab+c(?i)\")"
          csharp: "new Regex(\"(?i)ab+c\")"
          shell: "new RegExp('ab+c', 'gi')"
    - description: "regex object with regex literal arg"
      input:
          javascript: "new RegExp(/ab+c/, 'i')"
          shell: "new RegExp(/ab+c/, 'i')"
          python: "re.compile(r'ab+c', re.I | re.A)"
      output:
          javascript: "new RegExp('ab+c', 'i')"
          python: "re.compile(r\"ab+c(?i)\")"
          java: "Pattern.compile(\"ab+c(?i)\")"
          csharp: "new Regex(\"(?i)ab+c\")"
          shell: "new RegExp('ab+c', 'i')"
    - description: "python regex without ascii flag defaults to unicode"
      input:
          python: "re.compile('ab+c')"
      output:
          javascript: "new RegExp('ab+c', 'u')"
          python: "re.compile(r\"ab+c(?u)\")"
          java: "Pattern.compile(\"ab+c(?u)\")"
          csharp: "new Regex(\"ab+c\")"
          shell: "new RegExp('ab+c', 'u')"

