runner: !<tag:yaml.org,2002:js/function> |-
  function anonymous(it,type,expect,input,output,transpiler,test
  ) {

      it(`${input}: ${test.input[input]} => ${output}`, () => {
          expect(
              transpiler[input][output].compile(test.input[input], true)
          ).to.equal(test.output[output]);
      });

  }
tests:
  Document:
    - input:
        shell: '{x: ''1''}'
      output:
        javascript: |-
          {
            'x': '1'
          }
        python: |-
          {
              'x': '1'
          }
        java: 'eq("x", "1")'
        csharp: 'new BsonDocument("x", "1")'
        php: '[''x'' => ''1'']'
        ruby: |-
          {
            'x' => '1'
          }
        rust: |-
          doc! {
              "x": "1"
          }
        go: 'bson.D{{"x", "1"}}'
    - input:
        shell: '{x: ''1'',}'
      output:
        javascript: |-
          {
            'x': '1'
          }
        python: |-
          {
              'x': '1'
          }
        java: 'eq("x", "1")'
        csharp: 'new BsonDocument("x", "1")'
        php: '[''x'' => ''1'']'
        ruby: |-
          {
            'x' => '1'
          }
        rust: |-
          doc! {
              "x": "1"
          }
        go: 'bson.D{{"x", "1"}}'
    - input:
        shell: '{x: [''1'', ''2'']}'
      output:
        javascript: |-
          {
            'x': [
              '1', '2'
            ]
          }
        python: |-
          {
              'x': [
                  '1', '2'
              ]
          }
        java: 'eq("x", Arrays.asList("1", "2"))'
        csharp: |-
          new BsonDocument("x", new BsonArray
              {
                  "1",
                  "2"
              })
        php: '[''x'' => [''1'', ''2'']]'
        ruby: |-
          {
            'x' => [
              '1', '2'
            ]
          }
        rust: |-
          doc! {
              "x": [
                  "1",
                  "2"
              ]
          }
        go: |-
          bson.D{
              {"x",
                  bson.A{
                      "1",
                      "2",
                  },
              },
          }
    - input:
        shell: '{x: {y: 2}}'
      output:
        javascript: |-
          {
            'x': {
              'y': 2
            }
          }
        python: |-
          {
              'x': {
                  'y': 2
              }
          }
        java: 'eq("x", eq("y", 2L))'
        csharp: 'new BsonDocument("x", new BsonDocument("y", 2))'
        php: '[''x'' => [''y'' => 2]]'
        ruby: |-
          {
            'x' => {
              'y' => 2
            }
          }
        rust: |-
          doc! {
              "x": doc! {
                  "y": 2
              }
          }
        go: 'bson.D{{"x", bson.D{{"y", 2}}}}'
    - input:
        shell: '{}'
      output:
        javascript: '{}'
        python: '{}'
        java: new Document()
        csharp: new BsonDocument()
        php: '(object) []'
        ruby: '{}'
        rust: 'doc! {}'
        go: 'bson.D{}'
    - input:
        shell: '{x: ''1'', n: ''4''}'
      output:
        javascript: |-
          {
            'x': '1', 
            'n': '4'
          }
        python: |-
          {
              'x': '1', 
              'n': '4'
          }
        java: 'and(eq("x", "1"), eq("n", "4"))'
        csharp: |-
          new BsonDocument
          {
              { "x", "1" }, 
              { "n", "4" }
          }
        php: '[''x'' => ''1'', ''n'' => ''4'']'
        ruby: |-
          {
            'x' => '1',
            'n' => '4'
          }
        rust: |-
          doc! {
              "x": "1",
              "n": "4"
          }
        go: |-
          bson.D{
              {"x", "1"},
              {"n", "4"},
          }
    - input:
        shell: '{0: ''1'', 1: ''2'', 2: ''3''}'
      output:
        php: '(object) [0 => ''1'', 1 => ''2'', 2 => ''3'']'
    - input:
        shell: >-
          { graphLookup : { "from" : "raw_data", "startWith" : "$_id",
          "connectFromField" : "_id", "connectToField" : "manager", "as" :
          "reports" } }
      output:
        javascript: |-
          {
            'graphLookup': {
              'from': 'raw_data', 
              'startWith': '$_id', 
              'connectFromField': '_id', 
              'connectToField': 'manager', 
              'as': 'reports'
            }
          }
        python: |-
          {
              'graphLookup': {
                  'from': 'raw_data', 
                  'startWith': '$_id', 
                  'connectFromField': '_id', 
                  'connectToField': 'manager', 
                  'as': 'reports'
              }
          }
        java: >-
          eq("graphLookup", and(eq("from", "raw_data"), eq("startWith", "$_id"),
          eq("connectFromField", "_id"), eq("connectToField", "manager"),
          eq("as", "reports")))
        csharp: |-
          new BsonDocument("graphLookup", new BsonDocument
              {
                  { "from", "raw_data" }, 
                  { "startWith", "$_id" }, 
                  { "connectFromField", "_id" }, 
                  { "connectToField", "manager" }, 
                  { "as", "reports" }
              })
        php: >-
          ['graphLookup' => ['from' => 'raw_data', 'startWith' => '$_id',
          'connectFromField' => '_id', 'connectToField' => 'manager', 'as' =>
          'reports']]
        ruby: |-
          {
            'graphLookup' => {
              'from' => 'raw_data',
              'startWith' => '$_id',
              'connectFromField' => '_id',
              'connectToField' => 'manager',
              'as' => 'reports'
            }
          }
        rust: |-
          doc! {
              "graphLookup": doc! {
                  "from": "raw_data",
                  "startWith": "$_id",
                  "connectFromField": "_id",
                  "connectToField": "manager",
                  "as": "reports"
              }
          }
        go: |-
          bson.D{
              {"graphLookup",
                  bson.D{
                      {"from", "raw_data"},
                      {"startWith", "$_id"},
                      {"connectFromField", "_id"},
                      {"connectToField", "manager"},
                      {"as", "reports"},
                  },
              },
          }
    - input:
        shell: >-
          { status: 'A', $or: [{ qty: { $lt: 30 } }, { item: { $regex: '^p' } }]
          }
      output:
        python: |-
          {
              'status': 'A', 
              '$or': [
                  {
                      'qty': {
                          '$lt': 30
                      }
                  }, {
                      'item': {
                          '$regex': '^p'
                      }
                  }
              ]
          }
        javascript: |-
          {
            'status': 'A', 
            '$or': [
              {
                'qty': {
                  '$lt': 30
                }
              }, {
                'item': {
                  '$regex': '^p'
                }
              }
            ]
          }
        java: >-
          and(eq("status", "A"), or(Arrays.asList(lt("qty", 30L), regex("item",
          "^p"))))
        csharp: |-
          new BsonDocument
          {
              { "status", "A" }, 
              { "$or", new BsonArray
              {
                  new BsonDocument("qty", 
                  new BsonDocument("$lt", 30)),
                  new BsonDocument("item", 
                  new BsonDocument("$regex", "^p"))
              } }
          }
        php: >-
          ['status' => 'A', '$or' => [['qty' => ['$lt' => 30]], ['item' =>
          ['$regex' => '^p']]]]
        ruby: |-
          {
            'status' => 'A',
            '$or' => [
              {
                'qty' => {
                  '$lt' => 30
                }
              }, {
                'item' => {
                  '$regex' => '^p'
                }
              }
            ]
          }
        rust: |-
          doc! {
              "status": "A",
              "$or": [
                  doc! {
                      "qty": doc! {
                          "$lt": 30
                      }
                  },
                  doc! {
                      "item": doc! {
                          "$regex": "^p"
                      }
                  }
              ]
          }
        go: |-
          bson.D{
              {"status", "A"},
              {"$or",
                  bson.A{
                      bson.D{{"qty", bson.D{{"$lt", 30}}}},
                      bson.D{{"item", bson.D{{"$regex", "^p"}}}},
                  },
              },
          }
  Array:
    - input:
        shell: '[''1'', ''2'']'
      output:
        javascript: |-
          [
            '1', '2'
          ]
        java: 'Arrays.asList("1", "2")'
        csharp: |-
          new BsonArray
          {
              "1",
              "2"
          }
        python: |-
          [
              '1', '2'
          ]
        php: '[''1'', ''2'']'
        ruby: |-
          [
            '1', '2'
          ]
        rust: |-
          [
              "1",
              "2"
          ]
        go: |-
          bson.A{
              "1",
              "2",
          }
    - input:
        shell: '[''1'', ''2'',]'
      output:
        javascript: |-
          [
            '1', '2'
          ]
        java: 'Arrays.asList("1", "2")'
        csharp: |-
          new BsonArray
          {
              "1",
              "2"
          }
        python: |-
          [
              '1', '2'
          ]
        php: '[''1'', ''2'']'
        ruby: |-
          [
            '1', '2'
          ]
        rust: |-
          [
              "1",
              "2"
          ]
        go: |-
          bson.A{
              "1",
              "2",
          }
    - input:
        shell: '[''1'', { settings: ''http2'' }]'
      output:
        javascript: |-
          [
            '1', {
              'settings': 'http2'
            }
          ]
        java: 'Arrays.asList("1", eq("settings", "http2"))'
        csharp: |-
          new BsonArray
          {
              "1",
              new BsonDocument("settings", "http2")
          }
        python: |-
          [
              '1', {
                  'settings': 'http2'
              }
          ]
        php: '[''1'', [''settings'' => ''http2'']]'
        ruby: |-
          [
            '1', {
              'settings' => 'http2'
            }
          ]
        rust: |-
          [
              "1",
              doc! {
                  "settings": "http2"
              }
          ]
        go: |-
          bson.A{
              "1",
              bson.D{{"settings", "http2"}},
          }
    - input:
        shell: >-
          {"pipeline": [ { $match: { $expr: { "$eq": [ "$manager", "$$me" ] } }
          }, { $project: { managers : 0 } }, { $sort: { startQuarter: 1,
          notes:1, job_code: 1 } } ]}
      output:
        javascript: |-
          {
            'pipeline': [
              {
                '$match': {
                  '$expr': {
                    '$eq': [
                      '$manager', '$$me'
                    ]
                  }
                }
              }, {
                '$project': {
                  'managers': 0
                }
              }, {
                '$sort': {
                  'startQuarter': 1, 
                  'notes': 1, 
                  'job_code': 1
                }
              }
            ]
          }
        java: >-
          eq("pipeline", Arrays.asList(match(eq("$expr",
          Arrays.asList("$manager", "$$me"))), project(exclude("managers")),
          sort(orderBy(ascending("startQuarter"), ascending("notes"),
          ascending("job_code")))))
        csharp: |-
          new BsonDocument("pipeline", new BsonArray
              {
                  new BsonDocument("$match", 
                  new BsonDocument("$expr", 
                  new BsonDocument("$eq", 
                  new BsonArray
                              {
                                  "$manager",
                                  "$$me"
                              }))),
                  new BsonDocument("$project", 
                  new BsonDocument("managers", 0)),
                  new BsonDocument("$sort", 
                  new BsonDocument
                      {
                          { "startQuarter", 1 }, 
                          { "notes", 1 }, 
                          { "job_code", 1 }
                      })
              })
        python: |-
          {
              'pipeline': [
                  {
                      '$match': {
                          '$expr': {
                              '$eq': [
                                  '$manager', '$$me'
                              ]
                          }
                      }
                  }, {
                      '$project': {
                          'managers': 0
                      }
                  }, {
                      '$sort': {
                          'startQuarter': 1, 
                          'notes': 1, 
                          'job_code': 1
                      }
                  }
              ]
          }
        php: >-
          ['pipeline' => [['$match' => ['$expr' => ['$eq' => ['$manager',
          '$$me']]]], ['$project' => ['managers' => 0]], ['$sort' =>
          ['startQuarter' => 1, 'notes' => 1, 'job_code' => 1]]]]
        ruby: |-
          {
            'pipeline' => [
              {
                '$match' => {
                  '$expr' => {
                    '$eq' => [
                      '$manager', '$$me'
                    ]
                  }
                }
              }, {
                '$project' => {
                  'managers' => 0
                }
              }, {
                '$sort' => {
                  'startQuarter' => 1,
                  'notes' => 1,
                  'job_code' => 1
                }
              }
            ]
          }
        rust: |-
          doc! {
              "pipeline": [
                  doc! {
                      "$match": doc! {
                          "$expr": doc! {
                              "$eq": [
                                  "$manager",
                                  "$$me"
                              ]
                          }
                      }
                  },
                  doc! {
                      "$project": doc! {
                          "managers": 0
                      }
                  },
                  doc! {
                      "$sort": doc! {
                          "startQuarter": 1,
                          "notes": 1,
                          "job_code": 1
                      }
                  }
              ]
          }
        go: |-
          bson.D{
              {"pipeline",
                  bson.A{
                      bson.D{
                          {"$match",
                              bson.D{
                                  {"$expr",
                                      bson.D{
                                          {"$eq",
                                              bson.A{
                                                  "$manager",
                                                  "$$me",
                                              },
                                          },
                                      },
                                  },
                              },
                          },
                      },
                      bson.D{{"$project", bson.D{{"managers", 0}}}},
                      bson.D{
                          {"$sort",
                              bson.D{
                                  {"startQuarter", 1},
                                  {"notes", 1},
                                  {"job_code", 1},
                              },
                          },
                      },
                  },
              },
          }
    - input:
        shell: '[''1'', [''2'', ''3'']]'
      output:
        javascript: |-
          [
            '1', [
              '2', '3'
            ]
          ]
        java: 'Arrays.asList("1", Arrays.asList("2", "3"))'
        csharp: |-
          new BsonArray
          {
              "1",
              new BsonArray
              {
                  "2",
                  "3"
              }
          }
        python: |-
          [
              '1', [
                  '2', '3'
              ]
          ]
        php: '[''1'', [''2'', ''3'']]'
        ruby: |-
          [
            '1', [
              '2', '3'
            ]
          ]
        rust: |-
          [
              "1",
              [
                  "2",
                  "3"
              ]
          ]
        go: |-
          bson.A{
              "1",
              bson.A{
                  "2",
                  "3",
              },
          }
    - input:
        shell: '[]'
      output:
        javascript: '[]'
        java: Arrays.asList()
        csharp: new BsonArray()
        python: '[]'
        php: '[]'
        ruby: '[]'
        rust: '[]'
        go: 'bson.A{}'
  ArrayElision:
    - input:
        shell: '[,''1'', ''2'',]'
      output:
        python: |-
          [
              None, '1', '2'
          ]
        java: 'Arrays.asList(new BsonUndefined(), "1", "2")'
        csharp: |-
          new BsonArray
          {
              BsonUndefined.Value,
              "1",
              "2"
          }
        javascript: |-
          [
            undefined, '1', '2'
          ]
        php: '[null, ''1'', ''2'']'
        ruby: |-
          [
            nil, '1', '2'
          ]
        rust: |-
          [
              Bson::Undefined,
              "1",
              "2"
          ]
        go: |-
          bson.A{
              primitive.Undefined{},
              "1",
              "2",
          }
    - input:
        shell: '[,]'
      output:
        python: |-
          [
              None
          ]
        java: Arrays.asList(new BsonUndefined())
        csharp: |-
          new BsonArray
          {
              BsonUndefined.Value
          }
        javascript: |-
          [
            undefined
          ]
        php: '[null]'
        ruby: |-
          [
            nil
          ]
        rust: |-
          [
              Bson::Undefined
          ]
        go: |-
          bson.A{
              primitive.Undefined{},
          }
    - input:
        shell: '[,,]'
      output:
        python: |-
          [
              None, None
          ]
        java: |-
          Arrays.asList(new BsonUndefined(), 
              new BsonUndefined())
        csharp: |-
          new BsonArray
          {
              BsonUndefined.Value,
              BsonUndefined.Value
          }
        javascript: |-
          [
            undefined, undefined
          ]
        php: '[null, null]'
        ruby: |-
          [
            nil, nil
          ]
        rust: |-
          [
              Bson::Undefined,
              Bson::Undefined
          ]
        go: |-
          bson.A{
              primitive.Undefined{},
              primitive.Undefined{},
          }
    - input:
        shell: '[''1'',,,,''2'']'
      output:
        python: |-
          [
              '1', None, None, None, '2'
          ]
        java: |-
          Arrays.asList("1", 
              new BsonUndefined(), 
              new BsonUndefined(), 
              new BsonUndefined(), "2")
        csharp: |-
          new BsonArray
          {
              "1",
              BsonUndefined.Value,
              BsonUndefined.Value,
              BsonUndefined.Value,
              "2"
          }
        javascript: |-
          [
            '1', undefined, undefined, undefined, '2'
          ]
        php: '[''1'', null, null, null, ''2'']'
        ruby: |-
          [
            '1', nil, nil, nil, '2'
          ]
        rust: |-
          [
              "1",
              Bson::Undefined,
              Bson::Undefined,
              Bson::Undefined,
              "2"
          ]
        go: |-
          bson.A{
              "1",
              primitive.Undefined{},
              primitive.Undefined{},
              primitive.Undefined{},
              "2",
          }
  Tuple: []
  binops:
    - input:
        shell: 2 + 5 - 1
      output:
        javascript: 2 + 5 - 1
        python: 2 + 5 - 1
        java: 2L + 5L - 1L
        csharp: 2 + 5 - 1
        php: 2 + 5 - 1
        ruby: 2 + 5 - 1
        rust: 2 + 5 - 1
        go: 2 + 5 - 1
    - input:
        shell: 2 + (4 * 36) / 3
      output:
        javascript: 2 + (4 * 36) / 3
        python: 2 + (4 * 36) / 3
        java: 2L + (4L * 36L) / 3L
        csharp: 2 + (4 * 36) / 3
        php: 2 + (4 * 36) / 3
        ruby: 2 + (4 * 36) / 3
        rust: 2 + (4 * 36) / 3
        go: 2 + (4 * 36) / 3
    - input:
        shell: 1 | 2 ^ 3 & 4 << 6 >> 7
      output:
        javascript: 1 | 2 ^ 3 & 4 << 6 >> 7
        python: 1 | 2 ^ 3 & 4 << 6 >> 7
        java: 1L | 2L ^ 3L & 4L << 6L >> 7L
        csharp: 1 | 2 ^ 3 & 4 << 6 >> 7
        php: 1 | 2 ^ 3 & 4 << 6 >> 7
        ruby: 1 | 2 ^ 3 & 4 << 6 >> 7
        rust: 1 | 2 ^ 3 & 4 << 6 >> 7
        go: 1 | 2 ^ 3 & 4 << 6 >> 7
    - input:
        shell: 2 + +5- -6
      output:
        javascript: 2 + +5 - -6
        python: 2 + +5 - -6
        java: 2L + +5L - -6L
        csharp: 2 + +5 - -6
        php: 2 + +5 - -6
        ruby: 2 + +5 - -6
        rust: 2 + 5 - -6
        go: 2 + 5 - -6
  unaryops:
    - input:
        shell: '+1'
      output:
        javascript: '+1'
        python: '+1'
        java: +1L
        csharp: '+1'
        php: '+1'
        ruby: '+1'
        rust: '1'
        go: '1'
    - input:
        shell: '-1'
      output:
        javascript: '-1'
        python: '-1'
        java: '-1L'
        csharp: '-1'
        php: '-1'
        ruby: '-1'
        rust: '-1'
        go: '-1'
    - input:
        shell: ~1
      output:
        javascript: ~1
        python: ~1
        java: ~1L
        csharp: ~1
        php: ~1
        ruby: ~1
        rust: '!1'
        go: '!1'
  Number:
    - input:
        shell: new Number(2)
      output:
        javascript: new Number(2)
        python: '2'
        java: 2d
        csharp: (int) 2
        php: '2'
        ruby: 2.to_f
        rust: '2'
        go: '2'
    - input:
        shell: Number(2)
      output:
        javascript: new Number(2)
        python: '2'
        java: 2d
        csharp: (int) 2
        php: '2'
        ruby: 2.to_f
        go: '2'
    - input:
        shell: Number('2')
      output:
        javascript: new Number('2')
        python: float('2')
        java: Double.parseDouble("2")
        csharp: int.Parse("2")
        php: (int) '2'
        ruby: '''2''.to_f'
        rust: '"2".parse::<i32>()?'
        go: |-
          var parseInt = func(str string) int64 {
            i64, err := strconv.ParseInt(str, 10, 64)
            if err != nil {
              log.Fatal(err)
            }
            return i64
          }

          parseInt64("2")
    - input:
        shell: Number()
      output:
        javascript: new Number(0)
        python: '0'
        java: 0d
        csharp: (int) 0
        php: '0'
        ruby: 0.to_f
        rust: '0'
        go: '0'
  numeric_literals:
    - input:
        shell: '2'
      output:
        javascript: '2'
        python: '2'
        java: 2L
        csharp: '2'
        php: '2'
        ruby: '2'
        rust: '2'
        go: '2'
    - input:
        shell: '429496729601'
      output:
        javascript: '429496729601'
        python: '429496729601'
        java: 429496729601L
        csharp: '429496729601'
        php: '429496729601'
        ruby: '429496729601'
        rust: '429496729601'
        go: '429496729601'
    - input:
        shell: '2.001'
      output:
        javascript: '2.001'
        python: '2.001'
        java: 2.001d
        csharp: '2.001'
        php: '2.001'
        ruby: '2.001'
        rust: '2.001'
        go: '2.001'
    - input:
        shell: 0X123ABC
      output:
        javascript: 0X123ABC
        python: 0X123ABC
        java: 0X123ABC
        csharp: 0X123ABC
        php: 0X123ABC
        ruby: 0X123ABC
        rust: '0x123ABC'
        go: 0X123ABC
    - input:
        shell: '0x123abc'
      output:
        javascript: '0x123abc'
        python: '0x123abc'
        java: '0x123abc'
        csharp: '0x123abc'
        php: '0x123abc'
        ruby: '0x123abc'
        rust: '0x123abc'
    - input:
        shell: 0o1234567
      output:
        javascript: 0o1234567
        python: 0o1234567
        java: '01234567'
        csharp: '342391'
        php: '01234567'
        ruby: 0o1234567
        rust: 0o1234567
        go: 0o1234567
    - input:
        shell: '01234567'
      output:
        javascript: '01234567'
        python: 0o1234567
        java: '01234567'
        csharp: '342391'
        php: '01234567'
        ruby: 0o1234567
        rust: 0o1234567
        go: '01234567'
    - input:
        shell: '001234567'
      output:
        javascript: '001234567'
        python: 0o1234567
        java: '01234567'
        csharp: '342391'
        php: '01234567'
        ruby: 0o1234567
        rust: 0o1234567
        go: '001234567'
    - input:
        shell: 0O1234567
      output:
        javascript: 0O1234567
        python: 0o1234567
        java: '01234567'
        csharp: '342391'
        php: '01234567'
        ruby: 0o1234567
        rust: 0o1234567
        go: 0O1234567
  misc_literals:
    - input:
        shell: 'true'
      output:
        javascript: 'true'
        python: 'True'
        java: 'true'
        csharp: 'true'
        php: 'true'
        ruby: 'true'
        rust: 'true'
        go: 'true'
    - input:
        shell: 'false'
      output:
        javascript: 'false'
        python: 'False'
        java: 'false'
        csharp: 'false'
        php: 'false'
        ruby: 'false'
        rust: 'false'
        go: 'false'
    - input:
        shell: 'null'
      output:
        javascript: 'null'
        python: None
        java: new BsonNull()
        csharp: BsonNull.Value
        php: 'null'
        ruby: nil
        rust: 'Bson::Null'
        go: 'primitive.Null{}'
    - input:
        shell: undefined
      output:
        javascript: undefined
        python: None
        java: new BsonUndefined()
        csharp: BsonUndefined.Value
        php: 'null'
        ruby: nil
        rust: 'Bson::Undefined'
        go: 'primitive.Undefined{}'
  string_literals:
    - input:
        shell: '''string'''
      output:
        javascript: '''string'''
        python: '''string'''
        java: '"string"'
        csharp: '"string"'
        php: '''string'''
        ruby: '''string'''
        rust: '"string"'
        go: '"string"'
    - input:
        shell: '"string"'
      output:
        javascript: '''string'''
        python: '''string'''
        java: '"string"'
        csharp: '"string"'
        php: '''string'''
        ruby: '''string'''
        rust: '"string"'
        go: '"string"'
  python_strings: []
  number_methods: []
  Date:
    - description: now date
      input:
        shell: new Date()
      output:
        javascript: new Date()
        python: datetime.utcnow()
        java: new java.util.Date()
        csharp: DateTime.Now
        php: new UTCDateTime()
        ruby: Time.new.utc
        rust: 'DateTime::now()'
        go: time.Now()
    - description: date.now
      input:
        shell: Date.now()
      output:
        javascript: Date.now()
        python: datetime.utcnow()
        java: new java.util.Date().getTime()
        csharp: DateTime.Now
        php: new UTCDateTime()
        ruby: Time.now.utc
        rust: 'DateTime::now()'
        go: time.Now()
    - input:
        shell: 'new Date(1995, 11, 17)'
      output:
        javascript: 'new Date(''Sun, 17 Dec 1995 00:00:00 GMT'')'
        python: 'datetime(1995, 12, 17, 0, 0, 0, tzinfo=timezone.utc)'
        java: new java.util.Date(819158400000L)
        csharp: 'new DateTime(1995, 12, 17, 0, 0, 0)'
        php: new UTCDateTime(819158400000)
        ruby: 'Time.utc(1995, 12, 17, 0, 0, 0)'
        rust: 'DateTime::parse_rfc3339_str("1995-12-17T00:00:00.000Z")?'
        go: 'time.Date(1995, 12, 17, 0, 0, 0, 0, time.UTC)'
    - input:
        shell: 'new Date(1995, 11, 17, 3, 24)'
      output:
        javascript: 'new Date(''Sun, 17 Dec 1995 03:24:00 GMT'')'
        python: 'datetime(1995, 12, 17, 3, 24, 0, tzinfo=timezone.utc)'
        java: new java.util.Date(819170640000L)
        csharp: 'new DateTime(1995, 12, 17, 3, 24, 0)'
        php: new UTCDateTime(819170640000)
        ruby: 'Time.utc(1995, 12, 17, 3, 24, 0)'
        rust: 'DateTime::parse_rfc3339_str("1995-12-17T03:24:00.000Z")?'
        go: 'time.Date(1995, 12, 17, 3, 24, 0, 0, time.UTC)'
    - input:
        shell: 'new Date(1995, 11, 17, 3, 24, 55)'
      output:
        javascript: 'new Date(''Sun, 17 Dec 1995 03:24:55 GMT'')'
        python: 'datetime(1995, 12, 17, 3, 24, 55, tzinfo=timezone.utc)'
        java: new java.util.Date(819170695000L)
        csharp: 'new DateTime(1995, 12, 17, 3, 24, 55)'
        php: new UTCDateTime(819170695000)
        ruby: 'Time.utc(1995, 12, 17, 3, 24, 55)'
        rust: 'DateTime::parse_rfc3339_str("1995-12-17T03:24:55.000Z")?'
        go: 'time.Date(1995, 12, 17, 3, 24, 55, 0, time.UTC)'
    - input:
        shell: 'new Date(''Sun, 17 Dec 1995 03:24:00 GMT'')'
      output:
        python: 'datetime(1995, 12, 17, 3, 24, 0, tzinfo=timezone.utc)'
        java: new java.util.Date(819170640000L)
        csharp: 'new DateTime(1995, 12, 17, 3, 24, 0)'
        javascript: 'new Date(''Sun, 17 Dec 1995 03:24:00 GMT'')'
        php: new UTCDateTime(819170640000)
        ruby: 'Time.utc(1995, 12, 17, 3, 24, 0)'
        rust: 'DateTime::parse_rfc3339_str("1995-12-17T03:24:00.000Z")?'
        go: 'time.Date(1995, 12, 17, 3, 24, 0, 0, time.UTC)'
    - input:
        shell: new Date(819167040000)
      output:
        javascript: 'new Date(''Sun, 17 Dec 1995 02:24:00 GMT'')'
        python: 'datetime(1995, 12, 17, 2, 24, 0, tzinfo=timezone.utc)'
        java: new java.util.Date(819167040000L)
        csharp: 'new DateTime(1995, 12, 17, 2, 24, 0)'
        php: new UTCDateTime(819167040000)
        ruby: 'Time.utc(1995, 12, 17, 2, 24, 0)'
        rust: 'DateTime::parse_rfc3339_str("1995-12-17T02:24:00.000Z")?'
        go: 'time.Date(1995, 12, 17, 2, 24, 0, 0, time.UTC)'
  date_string:
    - input:
        shell: 'Date(''Sun, 17 Dec 1995 03:24:00 GMT'')'
      output:
        python: >-
          datetime(1995, 12, 17, 3, 24, 0, tzinfo=timezone.utc).strftime('%a %b
          %d %Y %H:%M:%S %Z')
        java: >-
          new SimpleDateFormat("EEE MMMMM dd yyyy HH:mm:ss").format(new
          java.util.Date(819170640000L))
        csharp: >-
          new DateTime(1995, 12, 17, 3, 24, 0).ToString("ddd MMM dd yyyy
          HH':'mm':'ss UTC")
        javascript: 'Date(''Sun, 17 Dec 1995 03:24:00 GMT'')'
        php: >-
          (new
          UTCDateTime(819170640000))->toDateTime()->format(\DateTimeInterface::RFC3339_EXTENDED)
        ruby: 'Time.utc(1995, 12, 17, 3, 24, 0).strftime(''%a %b %d %Y %H:%M:%S %Z'')'
        rust: >-
          DateTime::parse_rfc3339_str("1995-12-17T03:24:00.000Z")?.to_rfc3339_string()
        go: 'time.Date(1995, 12, 17, 3, 24, 0, 0, time.UTC)'
    - input:
        shell: Date(819167040000)
      output:
        javascript: 'Date(''Sun, 17 Dec 1995 02:24:00 GMT'')'
        python: >-
          datetime(1995, 12, 17, 2, 24, 0, tzinfo=timezone.utc).strftime('%a %b
          %d %Y %H:%M:%S %Z')
        java: >-
          new SimpleDateFormat("EEE MMMMM dd yyyy HH:mm:ss").format(new
          java.util.Date(819167040000L))
        csharp: >-
          new DateTime(1995, 12, 17, 2, 24, 0).ToString("ddd MMM dd yyyy
          HH':'mm':'ss UTC")
        php: >-
          (new
          UTCDateTime(819167040000))->toDateTime()->format(\DateTimeInterface::RFC3339_EXTENDED)
        ruby: 'Time.utc(1995, 12, 17, 2, 24, 0).strftime(''%a %b %d %Y %H:%M:%S %Z'')'
        rust: >-
          DateTime::parse_rfc3339_str("1995-12-17T02:24:00.000Z")?.to_rfc3339_string()
        go: 'time.Date(1995, 12, 17, 2, 24, 0, 0, time.UTC)'
    - input:
        shell: 'Date(1995, 11, 17)'
      output:
        javascript: 'Date(''Sun, 17 Dec 1995 00:00:00 GMT'')'
        python: >-
          datetime(1995, 12, 17, 0, 0, 0, tzinfo=timezone.utc).strftime('%a %b
          %d %Y %H:%M:%S %Z')
        java: >-
          new SimpleDateFormat("EEE MMMMM dd yyyy HH:mm:ss").format(new
          java.util.Date(819158400000L))
        csharp: >-
          new DateTime(1995, 12, 17, 0, 0, 0).ToString("ddd MMM dd yyyy
          HH':'mm':'ss UTC")
        php: >-
          (new
          UTCDateTime(819158400000))->toDateTime()->format(\DateTimeInterface::RFC3339_EXTENDED)
        ruby: 'Time.utc(1995, 12, 17, 0, 0, 0).strftime(''%a %b %d %Y %H:%M:%S %Z'')'
        rust: >-
          DateTime::parse_rfc3339_str("1995-12-17T00:00:00.000Z")?.to_rfc3339_string()
        go: 'time.Date(1995, 12, 17, 0, 0, 0, 0, time.UTC)'
  ISODate:
    - input:
        shell: 'new ISODate(''1995-12-17T03:24:00.000Z'')'
      output:
        python: 'datetime(1995, 12, 17, 3, 24, 0, tzinfo=timezone.utc)'
        java: new java.util.Date(819170640000L)
        csharp: 'new DateTime(1995, 12, 17, 3, 24, 0)'
        javascript: 'new Date(''Sun, 17 Dec 1995 03:24:00 GMT'')'
        php: new UTCDateTime(819170640000)
        ruby: 'Time.utc(1995, 12, 17, 3, 24, 0)'
        rust: 'DateTime::parse_rfc3339_str("1995-12-17T03:24:00.000Z")?'
        go: 'time.Date(1995, 12, 17, 3, 24, 0, 0, time.UTC)'
    - input:
        shell: 'ISODate(''1995-12-17T03:24:00.000Z'')'
      output:
        python: 'datetime(1995, 12, 17, 3, 24, 0, tzinfo=timezone.utc)'
        java: new java.util.Date(819170640000L)
        csharp: 'new DateTime(1995, 12, 17, 3, 24, 0)'
        javascript: 'new Date(''Sun, 17 Dec 1995 03:24:00 GMT'')'
        php: new UTCDateTime(819170640000)
        ruby: 'Time.utc(1995, 12, 17, 3, 24, 0)'
        rust: 'DateTime::parse_rfc3339_str("1995-12-17T03:24:00.000Z")?'
        go: 'time.Date(1995, 12, 17, 3, 24, 0, 0, time.UTC)'
    - description: now date
      input:
        shell: ISODate()
      output:
        javascript: new Date()
        python: datetime.utcnow()
        java: new java.util.Date()
        csharp: DateTime.Now
        php: new UTCDateTime()
        ruby: Time.new.utc
        rust: 'DateTime::now()'
        go: time.Now()
    - description: now date
      input:
        shell: new ISODate()
      output:
        javascript: new Date()
        python: datetime.utcnow()
        java: new java.util.Date()
        csharp: DateTime.Now
        php: new UTCDateTime()
        ruby: Time.new.utc
        rust: 'DateTime::now()'
        go: time.Now()
  regular_expressions:
    - description: empty RegExp
      input:
        shell: RegExp('')
      output:
        javascript: 'new RegExp(''(?:)'')'
        python: 're.compile(r"(?:)")'
        java: 'Pattern.compile("(?:)")'
        csharp: 'new Regex("(?:)")'
        php: 'new Regex("(?:)")'
        ruby: '/(?:)/'
        rust: 'Regex { pattern: "(?:)".to_string(), options: "".to_string() }'
        go: 'primitive.Regex{Pattern: "(?:)"}'
    - description: RegExp without options
      input:
        shell: new RegExp('abc')
      output:
        javascript: new RegExp('abc')
        python: re.compile(r"abc")
        java: Pattern.compile("abc")
        csharp: new Regex("abc")
        php: new Regex("abc")
        ruby: /abc/
        rust: 'Regex { pattern: "abc".to_string(), options: "".to_string() }'
        go: 'primitive.Regex{Pattern: "abc"}'
    - description: regex object with im flags as args
      input:
        shell: 'new RegExp(''ab+c'', ''im'')'
      output:
        javascript: 'new RegExp(''ab+c'', ''im'')'
        python: re.compile(r"ab+c(?im)")
        java: Pattern.compile("ab+c(?im)")
        csharp: new Regex("(?im)ab+c")
        php: 'new Regex("ab+c", "im")'
        ruby: /ab+c/im
        rust: 'Regex { pattern: "ab+c".to_string(), options: "im".to_string() }'
        go: 'primitive.Regex{Pattern: "ab+c", Options: "im"}'
    - description: regex object with ig flags as args
      input:
        shell: 'new RegExp(''ab+c'', ''ig'')'
      output:
        javascript: 'new RegExp(''ab+c'', ''gi'')'
        python: re.compile(r"ab+c(?is)")
        java: Pattern.compile("ab+c(?i)")
        csharp: new Regex("(?i)ab+c")
        php: 'new Regex("ab+c", "i")'
        ruby: /ab+c/i
        rust: 'Regex { pattern: "ab+c".to_string(), options: "i".to_string() }'
        go: 'primitive.Regex{Pattern: "ab+c", Options: "gi"}'
    - description: regex object with forward slash
      input:
        shell: new RegExp('ab/cd')
      output:
        javascript: new RegExp('ab\/cd')
        python: re.compile(r"ab\/cd")
        java: Pattern.compile("ab\\/cd")
        csharp: new Regex("ab\/cd")
        php: new Regex("ab\/cd")
        ruby: /ab\/cd/
        rust: 'Regex { pattern: "ab\/cd".to_string(), options: "".to_string() }'
        go: 'primitive.Regex{Pattern: "ab\/cd"}'
    - description: regex object with escaped double quote
      input:
        shell: new RegExp('ab\"ab')
      output:
        javascript: new RegExp('ab"ab')
        python: re.compile(r"ab\"ab")
        java: Pattern.compile("ab\"ab")
        csharp: new Regex("ab\"ab")
        php: new Regex("ab\"ab")
        ruby: /ab"ab/
        rust: 'Regex { pattern: "ab\"ab".to_string(), options: "".to_string() }'
        go: 'primitive.Regex{Pattern: "ab\"ab"}'
    - description: regex object with nonescaped double quote
      input:
        shell: new RegExp('ab"ab')
      output:
        javascript: new RegExp('ab"ab')
        python: re.compile(r"ab\"ab")
        java: Pattern.compile("ab\"ab")
        csharp: new Regex("ab\"ab")
        php: new Regex("ab\"ab")
        ruby: /ab"ab/
        rust: 'Regex { pattern: "ab\"ab".to_string(), options: "".to_string() }'
        go: 'primitive.Regex{Pattern: "ab\"ab"}'
    - description: regex object with escaped single quote
      input:
        shell: new RegExp('ab\'ab')
      output:
        javascript: new RegExp('ab\'ab')
        python: re.compile(r"ab'ab")
        java: Pattern.compile("ab'ab")
        csharp: new Regex("ab'ab")
        php: new Regex("ab'ab")
        ruby: /ab'ab/
        rust: 'Regex { pattern: "ab''ab".to_string(), options: "".to_string() }'
        go: 'primitive.Regex{Pattern: "ab''ab"}'
    - description: regex object with nonescaped single quote
      input:
        shell: new RegExp("ab'ab")
      output:
        javascript: new RegExp('ab\'ab')
        python: re.compile(r"ab'ab")
        java: Pattern.compile("ab'ab")
        csharp: new Regex("ab'ab")
        php: new Regex("ab'ab")
        ruby: /ab'ab/
        rust: 'Regex { pattern: "ab''ab".to_string(), options: "".to_string() }'
        go: 'primitive.Regex{Pattern: "ab''ab"}'
    - description: regex object with newline
      input:
        shell: new RegExp("\\n")
      output:
        javascript: new RegExp('\n')
        python: re.compile(r"\\n")
        java: Pattern.compile("\\n")
        csharp: new Regex("\n")
        php: new Regex("\n")
        ruby: /\n/
        rust: 'Regex { pattern: "\n".to_string(), options: "".to_string() }'
        go: 'primitive.Regex{Pattern: "\n"}'
    - description: regex literal with ig flags
      input:
        shell: /ab+c/ig
      output:
        javascript: 'new RegExp(''ab+c'', ''gi'')'
        python: re.compile(r"ab+c(?is)")
        java: Pattern.compile("ab+c(?i)")
        csharp: new Regex("(?i)ab+c")
        php: 'new Regex("ab+c", "i")'
        ruby: /ab+c/i
        rust: 'Regex { pattern: "ab+c".to_string(), options: "i".to_string() }'
        go: 'primitive.Regex{Pattern: "ab+c", Options: "gi"}'
    - description: regex object with regex literal arg
      input:
        shell: 'new RegExp(/ab+c/, ''i'')'
      output:
        javascript: 'new RegExp(''ab+c'', ''i'')'
        python: re.compile(r"ab+c(?i)")
        java: Pattern.compile("ab+c(?i)")
        csharp: new Regex("(?i)ab+c")
        php: 'new Regex("ab+c", "i")'
        ruby: /ab+c/i
        rust: 'Regex { pattern: "ab+c".to_string(), options: "i".to_string() }'
        go: 'primitive.Regex{Pattern: "ab+c", Options: "i"}'
