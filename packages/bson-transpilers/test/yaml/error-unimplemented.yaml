runner: !<tag:yaml.org,2002:js/function> |-
  function anonymous(it,type,expect,input,output,transpiler,test
  ) {

      it(`${input}: ${test.input[input]} => ${output}`, () => {
          let thrown = false;
          try {
            transpiler[input][output].compile(test.input[input]);
          } catch (error) {
            thrown = true;
            expect(error.code).to.equal(test.errorCode);
            if (test.message) {
              expect(error.message).to.be.a('string');
              expect(
                error.message.includes(test.message),
                `Expected error message to contain ${test.message} but got ${error.message}`
              ).to.be.true;
            }
          } finally {
            if (!thrown) {
              expect.fail(0, 0, `Expected error with code ${test.errorCode} to throw`);
            }
          }
      });

  }
tests:
  Binary: []
  this: []
  delete: []
  void: []
  typeof: []
  instanceof: []
  in: []
  assignment: []
  function def: []
  async: []
  class def: []
  variable statement: []
  import statement: []
  if statement: []
  iteration statement: []
  continue statement: []
  break statement: []
  return statement: []
  with statement: []
  label statement: []
  switch statement: []
  yield statement: []
  throw statement: []
  try statement: []
  debugger statement: []
  attributes: []
  ternary: []
  comprehensions: []
  inline_if: []
  spread: []
