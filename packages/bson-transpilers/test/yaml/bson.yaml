runner: !<tag:yaml.org,2002:js/function> |-
  function anonymous(it,type,expect,input,output,transpiler,test
  ) {

      it(`${input}: ${test.input[input]} => ${output}`, () => {
          expect(
              transpiler[input][output].compile(test.input[input], true)
          ).to.equal(test.output[output]);
      });

  }
tests:
  Code:
    - description: NEW with string code
      input:
        shell: Code('some code')
      output:
        javascript: new Code('some code')
        python: Code('some code')
        java: new Code("some code")
        csharp: new BsonJavaScript("some code")
        php: new Javascript('some code')
        ruby: 'BSON::Code.new(''some code'')'
        go: 'primitive.CodeWithScope{Code: primitive.JavaScript("some code")}'
        rust: 'Bson::JavaScriptCode("some code".to_string())'
    - description: string code
      input:
        shell: Code('some code')
      output:
        javascript: new Code('some code')
        python: Code('some code')
        java: new Code("some code")
        csharp: new BsonJavaScript("some code")
        php: new Javascript('some code')
        ruby: 'BSON::Code.new(''some code'')'
        go: 'primitive.CodeWithScope{Code: primitive.JavaScript("some code")}'
        rust: 'Bson::JavaScriptCode("some code".to_string())'
    - description: string code and object scope
      input:
        shell: 'Code(''string'', {x: ''1''})'
      output:
        javascript: |-
          new Code('string', {
            'x': '1'
          })
        python: |-
          Code('string', {
              'x': '1'
          })
        java: 'new CodeWithScope("string", new Document("x", "1"))'
        csharp: 'new BsonJavaScriptWithScope("string", new BsonDocument("x", "1"))'
        php: 'new Javascript(''string'', [''x'' => ''1''])'
        ruby: |-
          BSON::CodeWithScope.new('string', {
            'x' => '1'
          })
        go: >-
          primitive.CodeWithScope{Code: primitive.JavaScript("string"), Scope:
          bson.D{{"x", "1"}}}
        rust: |-
          JavaScriptCodeWithScope { code: "string".to_string(), scope: doc! {
              "x": "1"
          } }
    - description: no args
      input:
        shell: Code()
      output:
        javascript: new Code('')
        python: Code('')
        java: new Code("")
        csharp: new BsonJavaScript("")
        php: new Javascript('')
        ruby: 'BSON::Code.new'
        go: 'primitive.CodeWithScope{}'
        rust: 'Bson::JavaScriptCode("".to_string())'
  ObjectId:
    - description: no arg
      input:
        shell: ObjectId()
      output:
        javascript: new ObjectId()
        python: ObjectId()
        java: new ObjectId()
        csharp: new ObjectId()
        php: new ObjectId()
        ruby: 'BSON::ObjectId.new'
        go: primitive.NewObjectID()
        rust: 'ObjectId::new()'
    - description: NEW no arg
      input:
        shell: new ObjectId()
      output:
        javascript: new ObjectId()
        python: ObjectId()
        java: new ObjectId()
        csharp: new ObjectId()
        php: new ObjectId()
        ruby: 'BSON::ObjectId.new'
        go: primitive.NewObjectID()
        rust: 'ObjectId::new()'
    - description: hex string arg
      input:
        shell: new ObjectId('5a7382114ec1f67ae445f778')
      output:
        javascript: new ObjectId('5a7382114ec1f67ae445f778')
        python: ObjectId('5a7382114ec1f67ae445f778')
        java: new ObjectId("5a7382114ec1f67ae445f778")
        csharp: new ObjectId("5a7382114ec1f67ae445f778")
        php: new ObjectId('5a7382114ec1f67ae445f778')
        ruby: 'BSON::ObjectId(''5a7382114ec1f67ae445f778'')'
        go: |-
          var objectIDFromHex = func(hex string) primitive.ObjectID {
            objectID, err := primitive.ObjectIDFromHex(hex)
            if err != nil {
              log.Fatal(err)
            }
            return objectID
          }

          objectIDFromHex("5a7382114ec1f67ae445f778")
        rust: 'ObjectId::parse_str("5a7382114ec1f67ae445f778")?'
  DBRef:
    - description: 'NEW (string, ObjectID) args'
      input:
        shell: 'new DBRef(''coll'', new ObjectId())'
      output:
        javascript: 'new DBRef(''coll'', new ObjectId())'
        python: 'DBRef(''coll'', ObjectId())'
        java: 'new DBRef("coll", new ObjectId())'
        csharp: 'new MongoDBRef("coll", new ObjectId())'
        php: '[''$ref'' => ''coll'', ''$id'' => new ObjectId(), ''$db'' => null]'
        ruby: |-
          BSON::DBRef.new(
            '$ref' => 'coll',
            '$id' => BSON::ObjectId.new
          )
    - description: '(string, ObjectID) args'
      input:
        shell: 'DBRef(''coll'', new ObjectId())'
      output:
        javascript: 'new DBRef(''coll'', new ObjectId())'
        python: 'DBRef(''coll'', ObjectId())'
        java: 'new DBRef("coll", new ObjectId())'
        csharp: 'new MongoDBRef("coll", new ObjectId())'
        php: '[''$ref'' => ''coll'', ''$id'' => new ObjectId(), ''$db'' => null]'
        ruby: |-
          BSON::DBRef.new(
            '$ref' => 'coll',
            '$id' => BSON::ObjectId.new
          )
    - description: '(string, ObjectId, string) args'
      input:
        shell: 'new DBRef(''coll'', new ObjectId(), ''db'')'
      output:
        javascript: 'new DBRef(''coll'', new ObjectId(), ''db'')'
        python: 'DBRef(''coll'', ObjectId(), ''db'')'
        java: 'new DBRef("db", "coll", new ObjectId())'
        csharp: 'new MongoDBRef("coll", new ObjectId(), "db")'
        php: '[''$ref'' => ''coll'', ''$id'' => new ObjectId(), ''$db'' => ''db'']'
        ruby: |-
          BSON::DBRef.new(
            '$ref' => 'coll',
            '$id' => BSON::ObjectId.new,
            '$db' => 'db'
          )
  32-bit integer:
    - description: NEW number arg
      input:
        shell: new NumberInt(3)
      output:
        javascript: new Int32(3)
        python: int(3)
        java: '3'
        csharp: '3'
        php: '3'
        ruby: '3'
        go: int32(3)
        rust: '3'
    - description: number arg
      input:
        shell: NumberInt(3)
      output:
        javascript: new Int32(3)
        python: int(3)
        java: '3'
        csharp: '3'
        php: '3'
        ruby: '3'
        go: int32(3)
        rust: '3'
    - description: string arg
      input:
        shell: NumberInt('3')
      output:
        javascript: new Int32('3')
        python: int('3')
        java: Integer.parseInt("3")
        csharp: Convert.ToInt32("3")
        php: (int) '3'
        ruby: '''3''.to_i'
        go: |-
          var parseInt32 = func(str string) int32 {
          i64, err := strconv.ParseInt(str, 10, 32)
            if err != nil {
              log.Fatal(err)
            }
            return int32(i64)
          }

          parseInt32("3")
        rust: '"3".parse::<i32>()?'
    - description: no arg
      input:
        shell: NumberInt()
      output:
        javascript: new Int32(0)
        python: int(0)
        java: '0'
        csharp: '0'
        php: '0'
        ruby: '0'
        go: int32(0)
        rust: '0'
    - description: hex arg
      input:
        shell: NumberInt(0x3)
      output:
        javascript: new Int32(0x3)
        python: int(0x3)
        java: (int) 0x3
        csharp: Convert.ToInt32(0x3)
        php: '0x3'
        ruby: 0x3.to_i
        go: int32(0x3)
        rust: '0x3'
    - description: decimal arg
      input:
        shell: NumberInt(3.0001)
      output:
        javascript: new Int32(3.0001)
        python: int(3.0001)
        java: (int) 3.0001d
        csharp: Convert.ToInt32(3.0001)
        php: (int) 3.0001
        ruby: 3.0001.to_i
        go: int32(3.0001)
        rust: 'i32::try_from(3.0001)?'
    - description: octal arg
      input:
        shell: NumberInt(0o3)
      output:
        javascript: new Int32(0o3)
        python: int(0o3)
        java: (int) 03
        csharp: '3'
        php: '03'
        ruby: 0o3.to_i
        go: int32(0o3)
        rust: 0o3
  Double: []
  Long:
    - description: number arg
      input:
        shell: NumberLong(9223372036854775807)
      output:
        javascript: Long.fromNumber(9223372036854775807)
        python: Int64(9223372036854775807)
        java: 9223372036854775807L
        csharp: 9223372036854775807L
        php: '9223372036854775807'
        ruby: '9223372036854775807'
        go: int64(9223372036854775807)
        rust: 9223372036854775807i64
    - description: NEW number arg
      input:
        shell: NumberLong(9223372036854775807)
      output:
        javascript: Long.fromNumber(9223372036854775807)
        python: Int64(9223372036854775807)
        java: 9223372036854775807L
        csharp: 9223372036854775807L
        php: '9223372036854775807'
        ruby: '9223372036854775807'
        go: int64(9223372036854775807)
        rust: 9223372036854775807i64
    - description: no arg
      input:
        shell: NumberLong()
      output:
        javascript: Long.fromNumber(0)
        python: Int64(0)
        java: 0L
        csharp: 0L
        php: '0'
        ruby: '0'
        go: int64(0)
        rust: 0i64
    - description: string arg
      input:
        shell: NumberLong('9223372036854775807')
      output:
        javascript: Long.fromString('9223372036854775807')
        python: Int64('9223372036854775807')
        java: Long.parseLong("9223372036854775807")
        csharp: Convert.ToInt64("9223372036854775807")
        php: (int) '9223372036854775807'
        ruby: '''9223372036854775807''.to_i'
        go: |-
          var parseInt = func(str string) int64 {
            i64, err := strconv.ParseInt(str, 10, 64)
            if err != nil {
              log.Fatal(err)
            }
            return i64
          }

          parseInt64("9223372036854775807")
        rust: '"9223372036854775807".parse::<i64>()?'
  Decimal128:
    - description: string arg
      input:
        shell: NumberDecimal('5')
      output:
        javascript: Decimal128.fromString('5')
        python: Decimal128('5')
        java: Decimal128.parse("5")
        csharp: Decimal128.Parse("5")
        php: new Decimal128('5')
        ruby: 'BSON::Decimal128.new(''5'')'
    - description: NEW
      input:
        shell: new NumberDecimal('5.3E-6175')
      output:
        python: Decimal128('5.3E-6175')
        java: Decimal128.parse("5.3E-6175")
        csharp: Decimal128.Parse("5.3E-6175")
        php: new Decimal128('5.3E-6175')
        ruby: 'BSON::Decimal128.new(''5.3E-6175'')'
    - description: number arg
      input:
        shell: NumberDecimal(5)
      output:
        javascript: Decimal128.fromString('5')
        python: Decimal128('5')
        java: Decimal128.parse("5")
        csharp: Decimal128.Parse("5")
        php: new Decimal128('5')
        ruby: 'BSON::Decimal128.new(''5'')'
    - description: no arg
      input:
        shell: NumberDecimal()
      output:
        javascript: Decimal128.fromString('0')
        python: Decimal128('0')
        java: Decimal128.parse("0")
        csharp: Decimal128.Parse("0")
        php: new Decimal128('0')
        ruby: 'BSON::Decimal128.new(''0'')'
  MinKey/MaxKey:
    - description: MinKey
      input:
        shell: MinKey()
      output:
        javascript: new MinKey()
        python: MinKey()
        java: new MinKey()
        csharp: BsonMinKey.Value
        php: new MinKey()
        ruby: 'BSON::MinKey.new'
        go: 'primitive.MinKey{}'
        rust: 'Bson::MinKey'
    - description: NEW MinKey
      input:
        shell: new MinKey()
      output:
        javascript: new MinKey()
        python: MinKey()
        java: new MinKey()
        csharp: BsonMinKey.Value
        php: new MinKey()
        ruby: 'BSON::MinKey.new'
        go: 'primitive.MinKey{}'
        rust: 'Bson::MinKey'
    - description: MaxKey
      input:
        shell: MaxKey()
      output:
        javascript: new MaxKey()
        python: MaxKey()
        java: new MaxKey()
        csharp: BsonMaxKey.Value
        php: new MaxKey()
        ruby: 'BSON::MaxKey.new'
        go: 'primitive.MaxKey{}'
        rust: 'Bson::MaxKey'
    - description: NEW MaxKey
      input:
        shell: new MaxKey()
      output:
        javascript: new MaxKey()
        python: MaxKey()
        java: new MaxKey()
        csharp: BsonMaxKey.Value
        php: new MaxKey()
        ruby: 'BSON::MaxKey.new'
        go: 'primitive.MaxKey{}'
        rust: 'Bson::MaxKey'
  Timestamp:
    - description: NEW Timestamp
      input:
        shell: 'new Timestamp(10, 100)'
      output:
        javascript: 'new Timestamp(10, 100)'
        python: 'Timestamp(10, 100)'
        java: 'new BSONTimestamp(10, 100)'
        csharp: 'new BsonTimestamp(10, 100)'
        php: 'new Timestamp(100, 10)'
        ruby: 'BSON::Timestamp.new(10, 100)'
        go: 'primitive.Timestamp{T: 10, I: 100}'
        rust: 'Timestamp { time: 10, increment: 100 }'
    - description: Timestamp
      input:
        shell: 'Timestamp(10, 100)'
      output:
        javascript: 'new Timestamp(10, 100)'
        python: 'Timestamp(10, 100)'
        java: 'new BSONTimestamp(10, 100)'
        csharp: 'new BsonTimestamp(10, 100)'
        php: 'new Timestamp(100, 10)'
        ruby: 'BSON::Timestamp.new(10, 100)'
        go: 'primitive.Timestamp{T: 10, I: 100}'
        rust: 'Timestamp { time: 10, increment: 100 }'
  BSONRegExp: []
  Symbol:
    - description: from string
      input:
        shell: Symbol('abc')
      output:
        javascript: new BSONSymbol('abc')
        python: '''abc'''
        java: new Symbol("abc")
        csharp: '"abc"'
        php: '''abc'''
        ruby: ':''abc'''
        go: primitive.Symbol("abc")
        rust: 'Bson::Symbol("abc")'
    - description: from shell symbol
      input:
        shell: Symbol('abc')
      output:
        javascript: new BSONSymbol('abc')
        python: '''abc'''
        java: new Symbol("abc")
        csharp: '"abc"'
        php: '''abc'''
        ruby: ':''abc'''
        go: primitive.Symbol("abc")
        rust: 'Bson::Symbol("abc")'
