runner: !<tag:yaml.org,2002:js/function> |-
  function anonymous(it,type,expect,input,output,transpiler,test
  ) {

      it(`${input}: ${test.input[input]} => ${output}`, () => {
          expect(
              transpiler[input][output].compile(test.input[input], true)
          ).to.equal(test.output[output]);
      });

  }
tests:
  bson:
    - input:
        shell: new Long
      output:
        javascript: ''
        python: Int64
        java: ''
        csharp: ''
        php: ''
        ruby: ''
        go: ''
        rust: ''
    - input:
        shell: new Decimal128
      output:
        javascript: Decimal128
        python: Decimal128
        java: Decimal128
        csharp: Decimal128
        php: new Decimal128
        ruby: 'BSON::Decimal128'
        go: ''
    - input:
        shell: Double
      output:
        javascript: Double
        python: float
        java: ''
        csharp: ''
        php: ''
        ruby: ''
        go: ''
        rust: ''
    - input:
        shell: Int32
      output:
        javascript: Int32
        python: int
        java: ''
        csharp: ''
        php: ''
        ruby: ''
        go: ''
        rust: ''
    - input:
        shell: Long
      output:
        javascript: ''
        python: Int64
        java: ''
        csharp: ''
        php: ''
        ruby: ''
        go: ''
        rust: ''
    - input:
        shell: Decimal128
      output:
        javascript: Decimal128
        python: Decimal128
        java: Decimal128
        csharp: Decimal128
        php: new Decimal128
        ruby: 'BSON::Decimal128'
        go: ''
    - input:
        shell: ObjectId
      output:
        javascript: ObjectId
        python: ObjectId
        java: ObjectId
        csharp: ObjectId
        php: new ObjectId
        ruby: 'BSON::ObjectId'
        go: ''
        rust: ObjectId
    - input:
        shell: Code
      output:
        javascript: Code
        python: Code
        java: Code
        csharp: BsonJavaScript
        php: new Javascript
        ruby: 'BSON::Code'
        go: primitive.CodeWithScope
        rust: ''
    - input:
        shell: DBRef
      output:
        javascript: DBRef
        python: DBRef
        java: DBRef
        csharp: MongoDBRef
        php: ''
        ruby: 'BSON::DBRef'
    - input:
        shell: Timestamp
      output:
        javascript: Timestamp
        python: Timestamp
        java: BSONTimestamp
        csharp: BsonTimestamp
        php: new Timestamp
        ruby: 'BSON::Timestamp'
        go: primitive.Timestamp
        rust: Timestamp
    - input:
        shell: BSONSymbol
      output:
        javascript: BSONSymbol
        python: ''
        java: Symbol
        csharp: ''
        php: ''
        ruby: ''
        go: primitive.Symbol
        rust: 'Bson::Symbol'
    - input:
        shell: MinKey
      output:
        javascript: MinKey
        python: MinKey
        java: MinKey
        csharp: BsonMinKey
        php: new MinKey
        ruby: 'BSON::MinKey'
        go: primitive.MinKey
        rust: 'Bson::MinKey'
    - input:
        shell: MaxKey
      output:
        javascript: MaxKey
        python: MaxKey
        java: MaxKey
        csharp: BsonMaxKey
        php: new MaxKey
        ruby: 'BSON::MaxKey'
        go: primitive.MaxKey
        rust: 'Bson::MaxKey'
    - input:
        shell: BSONRegExp
      output:
        javascript: BSONRegExp
        python: Regex
        java: BsonRegularExpression
        csharp: BsonRegularExpression
        php: new Regex
        ruby: ''
        go: primitive.Regex
        rust: Regex
    - input:
        shell: RegExp
      output:
        javascript: RegExp
        python: re
        java: Pattern
        csharp: Regex
        php: new Regex
        ruby: ''
        go: regex
        rust: Regex
    - input:
        shell: Date
      output:
        javascript: Date
        python: datetime
        java: java.util.Date
        csharp: DateTime
        php: UTCDateTime
        ruby: Time
        go: time.Date
        rust: DateTime
    - input:
        shell: ObjectId.createFromTime
      output:
        javascript: ObjectId.createFromTime
        python: ObjectId.from_datetime
        java: new ObjectId
        csharp: new ObjectId.GenerateNewId
        php: new ObjectId
        ruby: 'BSON::ObjectId.from_time'
        go: primitive.NewObjectIDFromTimestamp
    - input:
        shell: ObjectId.isValid
      output:
        javascript: ObjectId.isValid
        python: ObjectId.is_valid
        java: ObjectId.isValid
        csharp: new ObjectId
        php: ''
        ruby: 'BSON::ObjectId.legal?'
        go: primitive.IsValidObjectID
    - input:
        shell: ObjectId().toString
      output:
        javascript: new ObjectId().toString
        python: str(ObjectId())
        java: new ObjectId().toHexString()
        csharp: new ObjectId().ToString()
        php: (string) new ObjectId()
        ruby: 'BSON::ObjectId.new.to_s'
        go: primitive.NewObjectID().String()
        rust: 'ObjectId::new().to_hex()'
    - input:
        shell: ObjectId().getTimestamp
      output:
        javascript: new ObjectId().getTimestamp
        python: ObjectId().generation_time
        java: new ObjectId().getTimestamp()
        csharp: new ObjectId().Timestamp
        php: (new ObjectId())->getTimestamp()
        ruby: 'BSON::ObjectId.new.to_time'
        go: primitive.NewObjectID().Timestamp()
        rust: 'ObjectId::new().timestamp()'
    - input:
        shell: ObjectId().equals
      output:
        javascript: new ObjectId().equals
        python: ObjectId() ==
        java: new ObjectId().equals
        csharp: new ObjectId().Equals
        php: new ObjectId() ==
        ruby: 'BSON::ObjectId.new =='
        go: ''
        rust: 'ObjectId::new() =='
    - input:
        shell: 'Long(1, 100).toInt'
      output:
        javascript: Long.fromNumber(429496729601).toInt
        python: int(Int64(429496729601))
        java: (int) 429496729601L
        csharp: (int) 429496729601L
        php: '429496729601'
        ruby: '429496729601'
        go: int(int64(429496729601))
        rust: 429496729601i64 as i32
    - input:
        shell: 'Long(1, 100).toNumber'
      output:
        javascript: Long.fromNumber(429496729601).toNumber
        python: float(Int64(429496729601))
        java: (double) 429496729601L
        csharp: (double) 429496729601L
        php: (float) 429496729601
        ruby: 429496729601.to_f
        go: float64(int64(429496729601))
        rust: 429496729601i64 as f64
    - input:
        shell: 'Long(1, 100).toString'
      output:
        javascript: Long.fromNumber(429496729601).toString
        python: str
        java: 429496729601L
        csharp: 429496729601L
        php: (string) 429496729601
        ruby: 429496729601.to_s
        go: strconv.Itoa(int64(429496729601))
        rust: 429496729601i64
    - input:
        shell: 'Long(1, 100).isZero'
      output:
        javascript: Long.fromNumber(429496729601).isZero
        python: Int64(429496729601) == 0
        java: 429496729601L == 0
        csharp: 429496729601L == 0
        php: 429496729601 === 0
        ruby: 429496729601 == 0
        go: int64(429496729601) == int64(0)
        rust: 429496729601i64 == 0
    - input:
        shell: 'Long(1, 100).isNegative'
      output:
        javascript: Long.fromNumber(429496729601).isNegative
        python: Int64(429496729601) < 0
        java: 429496729601L < 0
        csharp: 429496729601L < 0
        php: 429496729601 < 0
        ruby: 429496729601 < 0
        go: int64(429496729601) < int64(0)
        rust: 429496729601i64 < 0
    - input:
        shell: 'Long(1, 100).isOdd()'
      output:
        javascript: Long.fromNumber(429496729601).isOdd()
        python: (Int64(429496729601) % 2) == 1
        java: (429496729601L % 2) == 1
        csharp: 429496729601L % 2 == 1
        php: (429496729601 % 2) === 1
        ruby: (429496729601 % 2) == 1
        go: int64(429496729601) % 2 == 1
        rust: 429496729601i64 % 2 == 1
    - input:
        shell: 'Long(1, 100).equals'
      output:
        javascript: Long.fromNumber(429496729601).equals
        python: Int64(429496729601) ==
        java: 429496729601L ==
        csharp: 429496729601L ==
        php: 429496729601 ==
        ruby: 429496729601 ==
        go: int64(429496729601) ==
        rust: 429496729601i64 ==
    - input:
        shell: 'Long(1, 100).notEquals'
      output:
        javascript: Long.fromNumber(429496729601).notEquals
        python: Int64(429496729601) !=
        java: 429496729601L !=
        csharp: 429496729601L !=
        php: 429496729601 !=
        ruby: 429496729601 !=
        go: int64(429496729601) !=
        rust: 429496729601i64 !=
    - input:
        shell: 'Long(1, 100).compare'
      output:
        javascript: Long.fromNumber(429496729601).compare
        python: Int64(429496729601) -
        java: 429496729601L -
        csharp: 429496729601L -
        php: 429496729601 <=>
        ruby: 429496729601 -
        go: int64(429496729601) -
        rust: 429496729601i64 -
    - input:
        shell: 'Long(1, 100).greaterThan'
      output:
        javascript: Long.fromNumber(429496729601).greaterThan
        python: Int64(429496729601) >
        java: 429496729601L >
        csharp: 429496729601L >
        php: 429496729601 >
        ruby: 429496729601 >
        go: int64(429496729601) >
        rust: 429496729601i64 >
    - input:
        shell: 'Long(1, 100).greaterThanOrEqual'
      output:
        javascript: Long.fromNumber(429496729601).greaterThanOrEqual
        python: Int64(429496729601) >=
        java: 429496729601L >=
        csharp: 429496729601L >=
        php: 429496729601 >=
        ruby: 429496729601 >=
        go: int64(429496729601) >=
        rust: 429496729601i64 >=
    - input:
        shell: 'Long(1, 100).lessThan'
      output:
        javascript: Long.fromNumber(429496729601).lessThan
        python: Int64(429496729601) <
        java: 429496729601L <
        csharp: 429496729601L <
        php: 429496729601 <
        ruby: 429496729601 <
        go: int64(429496729601) <
        rust: 429496729601i64 <
    - input:
        shell: 'Long(1, 100).lessThanOrEqual'
      output:
        javascript: Long.fromNumber(429496729601).lessThanOrEqual
        python: Int64(429496729601) <=
        java: 429496729601L <=
        csharp: 429496729601L <=
        php: 429496729601 <=
        ruby: 429496729601 <=
        go: int64(429496729601) <=
        rust: 429496729601i64 <=
    - input:
        shell: 'Long(1, 100).negate'
      output:
        javascript: Long.fromNumber(429496729601).negate
        python: '-'
        java: '-'
        csharp: '-'
        php: '-'
        ruby: '-'
        go: '-'
        rust: '-'
    - input:
        shell: 'Long(1, 100).add'
      output:
        javascript: Long.fromNumber(429496729601).add
        python: Int64(429496729601) +
        java: 429496729601L +
        csharp: 429496729601L +
        php: 429496729601 +
        ruby: 429496729601 +
        go: int64(429496729601) +
        rust: 429496729601i64 +
    - input:
        shell: 'Long(1, 100).subtract'
      output:
        javascript: Long.fromNumber(429496729601).subtract
        python: Int64(429496729601) -
        java: 429496729601L -
        csharp: 429496729601L -
        php: 429496729601 -
        ruby: 429496729601 -
        go: int64(429496729601) -
        rust: 429496729601i64 -
    - input:
        shell: 'Long(1, 100).multiply'
      output:
        javascript: Long.fromNumber(429496729601).multiply
        python: Int64(429496729601) *
        java: 429496729601L *
        csharp: 429496729601L *
        php: 429496729601 *
        ruby: 429496729601 *
        go: int64(429496729601) *
        rust: 429496729601i64 *
    - input:
        shell: 'Long(1, 100).div'
      output:
        javascript: Long.fromNumber(429496729601).div
        python: Int64(429496729601) /
        java: 429496729601L /
        csharp: 429496729601L /
        php: 429496729601 /
        ruby: 429496729601 /
        go: int64(429496729601) /
        rust: 429496729601i64 /
    - input:
        shell: 'Long(1, 100).modulo'
      output:
        javascript: Long.fromNumber(429496729601).modulo
        python: Int64(429496729601) %
        java: 429496729601L %
        csharp: 429496729601L %
        php: 429496729601 %
        ruby: 429496729601 %
        go: int64(429496729601) %
        rust: 429496729601i64 %
    - input:
        shell: 'Long(1, 100).not'
      output:
        javascript: Long.fromNumber(429496729601).not
        python: '~'
        java: '~'
        csharp: '~'
        php: '~'
        ruby: '~'
        go: ^
        rust: '~'
    - input:
        shell: 'Long(1, 100).and'
      output:
        javascript: Long.fromNumber(429496729601).and
        python: Int64(429496729601) &
        java: 429496729601L &
        csharp: 429496729601L &
        php: 429496729601 &
        ruby: 429496729601 &
        go: int64(429496729601) &
        rust: 429496729601i64 &
    - input:
        shell: 'Long(1, 100).or'
      output:
        javascript: Long.fromNumber(429496729601).or
        python: Int64(429496729601) |
        java: 429496729601L |
        csharp: 429496729601L |
        php: 429496729601 |
        ruby: 429496729601 |
        go: int64(429496729601) |
        rust: 429496729601i64 |
    - input:
        shell: 'Long(1, 100).xor'
      output:
        javascript: Long.fromNumber(429496729601).xor
        python: Int64(429496729601) ^
        java: 429496729601L ^
        csharp: 429496729601L ^
        php: 429496729601 ^
        ruby: 429496729601 ^
        go: int64(429496729601) ^
        rust: 429496729601i64 ^
    - input:
        shell: 'Long(1, 100).shiftLeft'
      output:
        javascript: Long.fromNumber(429496729601).shiftLeft
        python: Int64(429496729601) <<
        java: Long.rotateLeft
        csharp: 429496729601L <<
        php: 429496729601 <<
        ruby: 429496729601 <<
        go: int64(429496729601) <<
        rust: 429496729601i64 <<
    - input:
        shell: 'Long(1, 100).shiftRight'
      output:
        javascript: Long.fromNumber(429496729601).shiftRight
        python: Int64(429496729601) >>
        java: Long.rotateRight
        csharp: 429496729601L >>
        php: 429496729601 >>
        ruby: 429496729601 >>
        go: int64(429496729601) >>
        rust: 429496729601i64 >>
    - input:
        shell: >-
          new
          Decimal128(Buffer.from('5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0')).toString
      output:
        javascript: Decimal128.fromString('5.3E-6175').toString
        python: str
        java: Decimal128.parse("5.3E-6175").toString
        csharp: Decimal128.Parse("5.3E-6175").ToString
        php: (string) new Decimal128('5.3E-6175')
        ruby: 'BSON::Decimal128.new(''5.3E-6175'').to_s'
        go: |-
          var parseDecimal128 = func(str string) primitive.Decimal128 {
            d128, err := primitive.ParseDecimal128(str)
            if err != nil {
              log.Fatal(err)
            }
            return d128
          }

          parseDecimal128("5.3E-6175").String()
    - input:
        shell: 'Timestamp(1, 100).toString'
      output:
        javascript: 'new Timestamp(1, 100).toString'
        python: str
        java: 'new BSONTimestamp(1, 100).toString'
        csharp: 'new BsonTimestamp(1, 100).ToString'
        php: '(string) new Timestamp(100, 1)'
        ruby: 'BSON::Timestamp.new(1, 100).to_s'
        go: 'time.Unix(primitive.Timestamp{T: 1, I: 100}.T, 0).String'
        rust: 'Timestamp { time: 1, increment: 100 }.to_string()'
    - input:
        shell: 'Timestamp(1, 100).equals'
      output:
        javascript: 'new Timestamp(1, 100).equals'
        python: 'Timestamp(1, 100) =='
        java: 'new BSONTimestamp(1, 100).equals'
        csharp: 'new BsonTimestamp(1, 100).Equals'
        php: 'new Timestamp(100, 1) =='
        ruby: 'BSON::Timestamp.new(1, 100) =='
        go: 'primitive.Timestamp{T: 1, I: 100}.Equal'
        rust: 'Timestamp { time: 1, increment: 100 } =='
    - input:
        shell: 'Timestamp(1, 100).compare'
      output:
        javascript: 'new Timestamp(1, 100).compare'
        python: '(Timestamp(1, 100).as_datetime() -'
        java: 'new BSONTimestamp(1, 100).compareTo'
        csharp: 'new BsonTimestamp(1, 100).CompareTo'
        php: 'new Timestamp(100, 1) <=>'
        ruby: 'BSON::Timestamp.new(1, 100) <=>'
        go: primitive.CompareTimestamp
        rust: 'Timestamp { time: 1, increment: 100 }.cmp'
    - input:
        shell: 'Timestamp(1, 100).notEquals'
      output:
        javascript: 'new Timestamp(1, 100).notEquals'
        python: 'Timestamp(1, 100) !='
        java: 'new BSONTimestamp(1, 100).compareTo'
        csharp: 'new BsonTimestamp(1, 100) !='
        php: 'new Timestamp(100, 1) !='
        ruby: 'BSON::Timestamp.new(1, 100) !='
        go: '!primitive.Timestamp{T: 1, I: 100}.Equal'
        rust: 'Timestamp { time: 1, increment: 100 } !='
    - input:
        shell: 'Timestamp(1, 100).greaterThan'
      output:
        javascript: 'new Timestamp(1, 100).greaterThan'
        python: 'Timestamp(1, 100) >'
        java: 'new BSONTimestamp(1, 100).compareTo'
        csharp: 'new BsonTimestamp(1, 100) >'
        php: 'new Timestamp(100, 1) >'
        ruby: 'BSON::Timestamp.new(1, 100) >'
        go: ''
        rust: 'Timestamp { time: 1, increment: 100 } >'
    - input:
        shell: 'Timestamp(1, 100).greaterThanOrEqual'
      output:
        javascript: 'new Timestamp(1, 100).greaterThanOrEqual'
        python: 'Timestamp(1, 100) >='
        java: 'new BSONTimestamp(1, 100).compareTo'
        csharp: 'new BsonTimestamp(1, 100) >='
        php: 'new Timestamp(100, 1) >='
        ruby: 'BSON::Timestamp.new(1, 100) >='
        go: ''
        rust: 'Timestamp { time: 1, increment: 100 } >='
    - input:
        shell: 'Timestamp(1, 100).lessThan'
      output:
        javascript: 'new Timestamp(1, 100).lessThan'
        python: 'Timestamp(1, 100) <'
        java: 'new BSONTimestamp(1, 100).compareTo'
        csharp: 'new BsonTimestamp(1, 100) <'
        php: 'new Timestamp(100, 1) <'
        ruby: 'BSON::Timestamp.new(1, 100) <'
        go: ''
        rust: 'Timestamp { time: 1, increment: 100 } <'
    - input:
        shell: 'Timestamp(1, 100).lessThanOrEqual'
      output:
        javascript: 'new Timestamp(1, 100).lessThanOrEqual'
        python: 'Timestamp(1, 100) <='
        java: 'new BSONTimestamp(1, 100).compareTo'
        csharp: 'new BsonTimestamp(1, 100) <='
        php: 'new Timestamp(100, 1) <='
        ruby: 'BSON::Timestamp.new(1, 100) <='
        go: ''
        rust: 'Timestamp { time: 1, increment: 100 } <='
    - input:
        shell: 'Timestamp(1, 100).getLowBits'
      output:
        javascript: 'new Timestamp(1, 100).getLowBits'
        python: 'Timestamp(1, 100).time'
        java: 'new BSONTimestamp(1, 100).getTime'
        csharp: 'new BsonTimestamp(1, 100).ToUniversalTime'
        php: '(new Timestamp(100, 1))->getTimestamp()'
        ruby: 'BSON::Timestamp.new(1, 100).seconds'
        go: 'primitive.Timestamp{T: 1, I: 100}.T'
        rust: 'Timestamp { time: 1, increment: 100 }.time'
    - input:
        shell: 'Timestamp(1, 100).getHighBits'
      output:
        javascript: 'new Timestamp(1, 100).getHighBits'
        python: 'Timestamp(1, 100).inc'
        java: 'new BSONTimestamp(1, 100).getInc'
        csharp: 'new BsonTimestamp(1, 100).Increment'
        php: '(new Timestamp(100, 1))->getIncrement()'
        ruby: 'BSON::Timestamp.new(1, 100).increment'
        go: 'primitive.Timestamp{T: 1, I: 100}.I'
        rust: 'Timestamp { time: 1, increment: 100 }.increment'
    - input:
        shell: BSONSymbol('2').valueOf
      output:
        javascript: new BSONSymbol('2').valueOf
        python: '''2'''
        java: new Symbol("2").getSymbol
        csharp: '"2"'
        php: '''2'''
        ruby: ':''2'''
        go: ''
        rust: 'Bson::Symbol("2").as_symbol().unwrap()'
    - input:
        shell: BSONSymbol('2').toString
      output:
        javascript: new BSONSymbol('2').toString
        python: '''2'''
        java: new Symbol("2").toString
        csharp: '"2"'
        php: '''2'''
        ruby: '''2'''
        go: ''
        rust: 'Bson::Symbol("2").as_symbol().unwrap()'
    - input:
        shell: BSONSymbol('2').inspect
      output:
        javascript: new BSONSymbol('2').inspect
        python: '''2'''
        java: new Symbol("2").getSymbol
        csharp: '"2"'
        php: '''2'''
        ruby: ':''2''.inspect'
        go: ''
        rust: 'format!("{:?}", Bson::Symbol("2"))'
