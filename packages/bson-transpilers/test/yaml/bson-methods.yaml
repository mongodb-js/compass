runner: !!js/function >
    (it, expect, input, output, transpiler, test) => {
        it(`${input}: ${test.input[input]} => ${output}`, () => {
            expect(
                transpiler[input][output].compile(test.input[input], true)
            ).to.equal(test.output[output]);
        });
    }
tests:
    Code-methods:
    -   input:
            javascript: 'Code(''test code'', {x: 1}).scope'
            python: |-
                Code('test code', {
                    'x': 1
                }).scope
            shell: 'Code(''test code'', {x: 1}).scope'
        output:
            javascript: |-
                new Code('test code', {
                  'x': 1
                }).scope
            python: |-
                Code('test code', {
                    'x': 1
                }).scope
            java: new CodeWithScope("test code", new Document("x", 1L)).getScope()
            csharp: new BsonJavaScriptWithScope("test code", new BsonDocument("x", 1)).Scope
            shell: |-
                new Code('test code', {
                  'x': 1
                }).scope
    -   input:
            javascript: Code('test code').code
            shell: Code('test code').code
        output:
            javascript: new Code('test code').code
            python: str(Code('test code'))
            java: new Code("test code").getCode()
            csharp: new BsonJavaScript("test code").Code
            shell: new Code('test code').code
    ObjectId-methods:
    -   input:
            javascript: ObjectId().toString()
            python: ObjectId().binary
            shell: ObjectId().toString()
        output:
            javascript: new ObjectId().toString()
            python: str(ObjectId())
            java: new ObjectId().toHexString()
            csharp: new ObjectId().ToString()
            shell: new ObjectId().toString()
    -   input:
            javascript: ObjectId('5ab901c29ee65f5c8550c5b9').toString()
        output:
            python: str(ObjectId('5ab901c29ee65f5c8550c5b9'))
            java: new ObjectId("5ab901c29ee65f5c8550c5b9").toHexString()
            csharp: new ObjectId("5ab901c29ee65f5c8550c5b9").ToString()
            shell: new ObjectId('5ab901c29ee65f5c8550c5b9').toString()
    -   input:
            javascript: ObjectId('5ab901c29ee65f5c8550c5b9').getTimestamp()
            python: ObjectId('5ab901c29ee65f5c8550c5b9').generation_time
            shell: ObjectId('5ab901c29ee65f5c8550c5b9').getTimestamp()
        output:
            python: ObjectId('5ab901c29ee65f5c8550c5b9').generation_time
            java: new ObjectId("5ab901c29ee65f5c8550c5b9").getTimestamp()
            csharp: new ObjectId("5ab901c29ee65f5c8550c5b9").Timestamp
            shell: new ObjectId('5ab901c29ee65f5c8550c5b9').getTimestamp()
    -   input:
            javascript: ObjectId().equals(ObjectId())
            shell: ObjectId().equals(ObjectId())
        output:
            python: ObjectId() == ObjectId()
            java: new ObjectId().equals(new ObjectId())
            csharp: new ObjectId().Equals(new ObjectId())
            shell: new ObjectId().equals(new ObjectId())
    DBRef-methods:
    -   input:
            javascript: new DBRef('coll', new ObjectId()).toString()
            shell: new DBRef('coll', new ObjectId()).toString()
        output:
            python: str(DBRef('coll', ObjectId()))
            java: new DBRef("coll", new ObjectId()).toString()
            csharp: new MongoDBRef("coll", new ObjectId()).ToString()
            shell: new DBRef('coll', new ObjectId()).toString()
    -   input:
            shell: new DBRef('coll', new ObjectId()).$db
        output:
            python: DBRef('coll', ObjectId()).database
            java: new DBRef("coll", new ObjectId()).getDatabaseName()
            csharp: new MongoDBRef("coll", new ObjectId()).DatabaseName
            shell: new DBRef('coll', new ObjectId()).getDb()
    -   input:
            javascript: new DBRef('coll', new ObjectId()).db
            python: DBRef('coll', ObjectId()).database
            shell: new DBRef('coll', new ObjectId()).getDb()
        output:
            python: DBRef('coll', ObjectId()).database
            java: new DBRef("coll", new ObjectId()).getDatabaseName()
            csharp: new MongoDBRef("coll", new ObjectId()).DatabaseName
            shell: new DBRef('coll', new ObjectId()).getDb()
    -   input:
            shell: new DBRef('coll', new ObjectId()).getRef()
        output:
            python: DBRef('coll', ObjectId()).collection
            java: new DBRef("coll", new ObjectId()).getCollectionName()
            csharp: new MongoDBRef("coll", new ObjectId()).CollectionName
            shell: new DBRef('coll', new ObjectId()).getCollection()
    -   input:
            shell: new DBRef('coll', new ObjectId()).$ref
        output:
            python: DBRef('coll', ObjectId()).collection
            java: new DBRef("coll", new ObjectId()).getCollectionName()
            csharp: new MongoDBRef("coll", new ObjectId()).CollectionName
            shell: new DBRef('coll', new ObjectId()).getCollection()
    -   input:
            javascript: new DBRef('coll', new ObjectId()).namespace
            python: DBRef('coll', ObjectId()).collection
            shell: new DBRef('coll', new ObjectId()).getCollection()
        output:
            python: DBRef('coll', ObjectId()).collection
            java: new DBRef("coll", new ObjectId()).getCollectionName()
            csharp: new MongoDBRef("coll", new ObjectId()).CollectionName
            shell: new DBRef('coll', new ObjectId()).getCollection()
    -   input:
            shell: new DBRef('coll', new ObjectId()).$id
        output:
            python: DBRef('coll', ObjectId()).id
            java: new DBRef("coll", new ObjectId()).getId()
            csharp: new MongoDBRef("coll", new ObjectId()).Id
            shell: new DBRef('coll', new ObjectId()).getId()
    -   input:
            javascript: new DBRef('coll', new ObjectId()).oid
            python: DBRef('coll', ObjectId()).id
            shell: new DBRef('coll', new ObjectId()).getId()
        output:
            python: DBRef('coll', ObjectId()).id
            java: new DBRef("coll", new ObjectId()).getId()
            csharp: new MongoDBRef("coll", new ObjectId()).Id
            shell: new DBRef('coll', new ObjectId()).getId()
    32-int-methods:
    -   input:
            javascript: Int32(3).valueOf()
        output:
            python: int(3)
            java: '3'
            csharp: '3'
            shell: new NumberInt(3).valueOf()
    -   input:
            javascript: Int32('3').valueOf()
            shell: NumberInt('3').valueOf()
        output:
            python: int('3')
            java: Integer.parseInt("3")
            csharp: Convert.ToInt32("3")
            shell: new NumberInt('3').valueOf()
    -   input:
            shell: NumberInt(3).toString()
        output:
            javascript: new Int32(3).toString()
            java: Integer.toString(3)
            csharp: 3.ToString()
            python: str(int(3))
    Double-methods:
    -   input:
            javascript: Double(3).valueOf()
        output:
            python: float(3)
            java: 3d
            csharp: '3.0'
            shell: '3'
    -   input:
            javascript: Double('3').valueOf()
        output:
            python: float('3')
            java: Double.parseDouble("3")
            csharp: Convert.ToDouble("3")
            shell: '3'
    Long-methods:
    -   input:
            shell: NumberLong(429496729601).top
        output:
            javascript: Long.fromNumber(429496729601).getHighBits()
            java: 429496729601L >> 32
            csharp: 429496729601L >> 32
            python: Int64(429496729601) >> 32
    -   input:
            shell: NumberLong(429496729601).bottom
        output:
            javascript: Long.fromNumber(429496729601).getLowBits()
            java: 429496729601L & 0x0000ffff
            csharp: 429496729601L & 0x0000ffff
            python: Int64(429496729601) & 0x0000ffff
    -  input:
            shell: NumberLong(429496729601).valueOf()
       output:
            javascript: Long.fromNumber(429496729601).toInt()
            java: "(int) 429496729601L"
            csharp: "(int) 429496729601L"
            python: long(Int64(429496729601))
    -  input:
            shell: NumberLong(429496729601).floatApprox
       output:
            javascript: Long.fromNumber(429496729601).toNumber()
            java: "(float) 429496729601L"
            csharp: "(float) 429496729601L"
            python: float(Int64(429496729601))
    -   input:
            javascript: Long(1, 100).toInt()
        output:
            python: int(Int64(429496729601))
            java: "(int) 429496729601L"
            csharp: "(int) 429496729601L"
            shell: new NumberLong(429496729601).valueOf()
    -   input:
            javascript: Long(1, 100).toNumber()
        output:
            python: float(Int64(429496729601))
            java: "(double) 429496729601L"
            csharp: "(double) 429496729601L"
            shell: new NumberLong(429496729601).floatApprox
    -   input:
            javascript: Long(1, 100).toString()
            shell: NumberLong(429496729601).toString()
        output:
            python: "'429496729601'"
            java: '"429496729601"'
            csharp: '"429496729601"'
            shell: "'429496729601'"
    -   input:
            javascript: Long(1, 100).toString(10)
        output:
            python: "'429496729601'"
            java: '"429496729601"'
            csharp: '"429496729601"'
            shell: "'429496729601'"
    -   input:
            javascript: Long(1, 100).isZero()
        output:
            python: Int64(429496729601) == 0
            java: 429496729601L == 0
            csharp: 429496729601L == 0
            shell: new NumberLong(429496729601) === 0
    -   input:
            javascript: Long(1, 100).isNegative()
        output:
            python: Int64(429496729601) < 0
            java: 429496729601L < 0
            csharp: 429496729601L < 0
            shell: new NumberLong(429496729601) < 0
    -   input:
            javascript: Long(1, 100).isOdd()
        output:
            python: "(Int64(429496729601) % 2) == 1"
            java: "(429496729601L % 2) == 1"
            csharp: 429496729601L % 2 == 1
            shell: "(new NumberLong(429496729601) % 2) === 1"
    -   input:
            javascript: Long(1, 100).equals(Long(9, 1))
        output:
            python: Int64(429496729601) == Int64(4294967305)
            java: 429496729601L == 4294967305L
            csharp: 429496729601L == 4294967305L
            shell: new NumberLong(429496729601) === new NumberLong(4294967305)
    -   input:
            javascript: Long(1, 100).notEquals(Long(9, 1))
        output:
            python: Int64(429496729601) != Int64(4294967305)
            java: 429496729601L != 4294967305L
            csharp: 429496729601L != 4294967305L
            shell: new NumberLong(429496729601) !== new NumberLong(4294967305)
    -   input:
            javascript: Long(1, 100).compare(Long(9, 1))
        output:
            python: Int64(429496729601) - Int64(4294967305)
            java: 429496729601L - 4294967305L
            csharp: 429496729601L - 4294967305L
            shell: new NumberLong(429496729601) - new NumberLong(4294967305)
    -   input:
            javascript: Long(1, 100).greaterThan(Long(9, 1))
        output:
            python: Int64(429496729601) > Int64(4294967305)
            java: 429496729601L > 4294967305L
            csharp: 429496729601L > 4294967305L
            shell: new NumberLong(429496729601) > new NumberLong(4294967305)
    -   input:
            javascript: Long(1, 100).greaterThanOrEqual(Long(9, 1))
        output:
            python: Int64(429496729601) >= Int64(4294967305)
            java: 429496729601L >= 4294967305L
            csharp: 429496729601L >= 4294967305L
            shell: new NumberLong(429496729601) >= new NumberLong(4294967305)
    -   input:
            javascript: Long(1, 100).lessThan(Long(9, 1))
        output:
            python: Int64(429496729601) < Int64(4294967305)
            java: 429496729601L < 4294967305L
            csharp: 429496729601L < 4294967305L
            shell: new NumberLong(429496729601) < new NumberLong(4294967305)
    -   input:
            javascript: Long(1, 100).lessThanOrEqual(Long(9, 1))
        output:
            python: Int64(429496729601) <= Int64(4294967305)
            java: 429496729601L <= 4294967305L
            csharp: 429496729601L <= 4294967305L
            shell: new NumberLong(429496729601) <= new NumberLong(4294967305)
    -   input:
            javascript: Long(1, 100).negate()
        output:
            python: "-Int64(429496729601)"
            java: "-429496729601L"
            csharp: "-429496729601L"
            shell: "-new NumberLong(429496729601)"
    -   input:
            javascript: Long(1, 100).add(Long(9, 1))
        output:
            python: Int64(429496729601) + Int64(4294967305)
            java: 429496729601L + 4294967305L
            csharp: 429496729601L + 4294967305L
            shell: new NumberLong(429496729601) + new NumberLong(4294967305)
    -   input:
            javascript: Long(1, 100).subtract(Long(9, 1))
        output:
            python: Int64(429496729601) - Int64(4294967305)
            java: 429496729601L - 4294967305L
            csharp: 429496729601L - 4294967305L
            shell: new NumberLong(429496729601) - new NumberLong(4294967305)
    -   input:
            javascript: Long(1, 100).multiply(Long(9, 1))
        output:
            python: Int64(429496729601) * Int64(4294967305)
            java: 429496729601L * 4294967305L
            csharp: 429496729601L * 4294967305L
            shell: new NumberLong(429496729601) * new NumberLong(4294967305)
    -   input:
            javascript: Long(1, 100).div(Long(9, 1))
        output:
            python: Int64(429496729601) / Int64(4294967305)
            java: 429496729601L / 4294967305L
            csharp: 429496729601L / 4294967305L
            shell: new NumberLong(429496729601) / new NumberLong(4294967305)
    -   input:
            javascript: Long(1, 100).modulo(Long(9, 1))
        output:
            python: Int64(429496729601) % Int64(4294967305)
            java: 429496729601L % 4294967305L
            csharp: 429496729601L % 4294967305L
            shell: new NumberLong(429496729601) % new NumberLong(4294967305)
    -   input:
            javascript: Long(1, 100).not()
        output:
            python: "~Int64(429496729601)"
            java: "~429496729601L"
            csharp: "~429496729601L"
            shell: "~new NumberLong(429496729601)"
    -   input:
            javascript: Long(1, 100).and(Long(9, 1))
        output:
            python: Int64(429496729601) & Int64(4294967305)
            java: 429496729601L & 4294967305L
            csharp: 429496729601L & 4294967305L
            shell: new NumberLong(429496729601) & new NumberLong(4294967305)
    -   input:
            javascript: Long(1, 100).or(Long(9, 1))
        output:
            python: Int64(429496729601) | Int64(4294967305)
            java: 429496729601L | 4294967305L
            csharp: 429496729601L | 4294967305L
            shell: new NumberLong(429496729601) | new NumberLong(4294967305)
    -   input:
            javascript: Long(1, 100).xor(Long(9, 1))
        output:
            python: Int64(429496729601) ^ Int64(4294967305)
            java: 429496729601L ^ 4294967305L
            csharp: 429496729601L ^ 4294967305L
            shell: new NumberLong(429496729601) ^ new NumberLong(4294967305)
    -   input:
            javascript: Long(1, 100).shiftLeft(10)
        output:
            python: Int64(429496729601) << 10
            java: Long.rotateLeft(429496729601L, 10)
            csharp: 429496729601L << 10
            shell: new NumberLong(429496729601) << 10
    -   input:
            javascript: Long(1, 100).shiftRight(10)
        output:
            python: Int64(429496729601) >> 10
            java: Long.rotateRight(429496729601L, 10)
            csharp: 429496729601L >> 10
            shell: new NumberLong(429496729601) >> 10
    Decimal128-methods:
    -   input:
            javascript: new Decimal128(Buffer.from('5')).toString()
            shell: NumberDecimal('5.3E-6175').toString()
        output:
            python: str(Decimal128('5.3E-6175'))
            java: Decimal128.parse("5.3E-6175").toString()
            csharp: Decimal128.Parse("5.3E-6175").ToString()
            shell: new NumberDecimal(5.3E-6175).toString()
    Timestamp-methods:
    -   input:
            javascript: Timestamp(1, 100).toString()
            shell: Timestamp(1, 100).toString()
        output:
            python: str(Timestamp(1, 100))
            java: new BSONTimestamp(1, 100).toString()
            csharp: new BsonTimestamp(1, 100).ToString()
            shell: new Timestamp(1, 100).toString()
    -   input:
            javascript: Timestamp(1, 100).equals(Timestamp(2, 99))
        output:
            python: Timestamp(1, 100) == Timestamp(2, 99)
            java: new BSONTimestamp(1, 100).equals(new BSONTimestamp(2, 99))
            csharp: new BsonTimestamp(1, 100).Equals(new BsonTimestamp(2, 99))
            shell: new Timestamp(1, 100) === new Timestamp(2, 99)
    -   input:
            javascript: Timestamp(1, 100).compare(Timestamp(2, 99))
        output:
            python: "(Timestamp(1, 100).as_datetime() - Timestamp(2, 99).as_datetime()).total_seconds()"
            java: new BSONTimestamp(1, 100).compareTo(new BSONTimestamp(2, 99))
            csharp: new BsonTimestamp(1, 100).CompareTo(new BsonTimestamp(2, 99))
            shell: new Timestamp(1, 100) - new Timestamp(2, 99)
    -   input:
            javascript: Timestamp(1, 100).notEquals(Timestamp(2, 99))
        output:
            python: Timestamp(1, 100) != Timestamp(2, 99)
            java: new BSONTimestamp(1, 100).compareTo(new BSONTimestamp(2, 99)) != 0
            csharp: new BsonTimestamp(1, 100) != new BsonTimestamp(2, 99)
            shell: new Timestamp(1, 100) !== new Timestamp(2, 99)
    -   input:
            javascript: Timestamp(1, 100).greaterThan(Timestamp(2, 99))
        output:
            python: Timestamp(1, 100) > Timestamp(2, 99)
            java: new BSONTimestamp(1, 100).compareTo(new BSONTimestamp(2, 99)) > 0
            csharp: new BsonTimestamp(1, 100) > new BsonTimestamp(2, 99)
            shell: new Timestamp(1, 100) > new Timestamp(2, 99)
    -   input:
            javascript: Timestamp(1, 100).greaterThanOrEqual(Timestamp(2, 99))
        output:
            python: Timestamp(1, 100) >= Timestamp(2, 99)
            java: new BSONTimestamp(1, 100).compareTo(new BSONTimestamp(2, 99)) >= 0
            csharp: new BsonTimestamp(1, 100) >= new BsonTimestamp(2, 99)
            shell: new Timestamp(1, 100) >= new Timestamp(2, 99)
    -   input:
            javascript: Timestamp(1, 100).lessThan(Timestamp(2, 99))
        output:
            python: Timestamp(1, 100) < Timestamp(2, 99)
            java: new BSONTimestamp(1, 100).compareTo(new BSONTimestamp(2, 99)) < 0
            csharp: new BsonTimestamp(1, 100) < new BsonTimestamp(2, 99)
            shell: new Timestamp(1, 100) < new Timestamp(2, 99)
    -   input:
            javascript: Timestamp(1, 100).lessThanOrEqual(Timestamp(2, 99))
        output:
            python: Timestamp(1, 100) <= Timestamp(2, 99)
            java: new BSONTimestamp(1, 100).compareTo(new BSONTimestamp(2, 99)) <= 0
            csharp: new BsonTimestamp(1, 100) <= new BsonTimestamp(2, 99)
            shell: new Timestamp(1, 100) <= new Timestamp(2, 99)
    -   input:
            javascript: Timestamp(1, 100).getLowBits()
            python: Timestamp(1, 100).time
            shell: Timestamp(1, 100).getTime()
        output:
            python: Timestamp(1, 100).time
            java: new BSONTimestamp(1, 100).getTime()
            csharp: new BsonTimestamp(1, 100).ToUniversalTime()
            shell: new Timestamp(1, 100).getTime()
    -   input:
            javascript: Timestamp(1, 100).getHighBits()
            python: Timestamp(1, 100).inc
            shell: Timestamp(1, 100).getInc()
        output:
            python: Timestamp(1, 100).inc
            java: new BSONTimestamp(1, 100).getInc()
            csharp: new BsonTimestamp(1, 100).Increment
            shell: new Timestamp(1, 100).getInc()
    -   input:
            shell: Timestamp(1, 100).t
        output:
            python: Timestamp(1, 100).time
            java: new BSONTimestamp(1, 100).getTime()
            csharp: new BsonTimestamp(1, 100).ToUniversalTime()
            shell: new Timestamp(1, 100).getTime()
    -   input:
            shell: Timestamp(1, 100).i
        output:
            python: Timestamp(1, 100).inc
            java: new BSONTimestamp(1, 100).getInc()
            csharp: new BsonTimestamp(1, 100).Increment
            shell: new Timestamp(1, 100).getInc()
    - input:
          python: Timestamp(1, 100).as_datetime
      output:
          javascript: new Date(new Timestamp(1, 100).getHighBits() * 1000)
          java: new Date(new BSONTimestamp(1, 100).getTime())
          csharp: new DateTime(1970, 1, 1).AddSeconds(new BsonTimestamp(1, 100).Timestamp)
          shell: new Date(new Timestamp(1, 100).getHighBits() * 1000)
    Symbol-methods:
    -   input:
            javascript: Symbol('2').valueOf()
        output:
            python: "'2'"
            java: new Symbol("2").getSymbol()
            csharp: '"2"'
            shell: "'2'"
    -   input:
            javascript: Symbol('2').toString()
        output:
            python: "'2'"
            java: new Symbol("2").toString()
            csharp: '"2"'
            shell: "'2'"
    -   input:
            javascript: Symbol('2').inspect()
        output:
            python: "'2'"
            java: new Symbol("2").getSymbol()
            csharp: '"2"'
            shell: "'2'"
    ObjectId-utils:
    - input:
          javascript: ObjectId.createFromHexString('5ab901c29ee65f5c8550c5b9')
      output:
          shell: new ObjectId('5ab901c29ee65f5c8550c5b9')
          java: new ObjectId("5ab901c29ee65f5c8550c5b9")
          csharp: new ObjectId("5ab901c29ee65f5c8550c5b9")
          python: ObjectId('5ab901c29ee65f5c8550c5b9')
    - input:
          python: ObjectId.from_datetime(datetime(1, 2, 3))
          shell: ObjectId.fromDate(new Date('Sun, 03 Feb 1901 00:00:00 GMT'))
      output:
          javascript: ObjectId.createFromTime(new Date('Sun, 03 Feb 1901 00:00:00 GMT').getTime() / 1000)
          java: new ObjectId(new java.util.Date(-2174601600000L))
          csharp: new ObjectId.GenerateNewId(new DateTime(1901, 2, 3, 0, 0, 0))
          shell: ObjectId.fromDate(new Date('Sun, 03 Feb 1901 00:00:00 GMT'))
    - input:
          javascript: ObjectId.createFromTime(1522075031642)
      output:
          shell: ObjectId.fromDate(new Date(1522075031642))
          javascript: ObjectId.createFromTime(1522075031642)
          java: new ObjectId(new java.util.Date(1522075031642L))
          csharp: new ObjectId.GenerateNewId(Convert.ToInt32(1522075031642))
          python: ObjectId.from_datetime(datetime.fromtimestamp(1522075031642))
    - input:
          javascript: ObjectId.isValid('5ab901c29ee65f5c8550c5b9')
          python: ObjectId.is_valid('5ab901c29ee65f5c8550c5b9')
      output:
          shell: new ObjectId('5ab901c29ee65f5c8550c5b9')
          java: ObjectId.isValid("5ab901c29ee65f5c8550c5b9")
          csharp: new ObjectId("5ab901c29ee65f5c8550c5b9")
          python: ObjectId.is_valid('5ab901c29ee65f5c8550c5b9')
    Binary-utils:
    - input:
          javascript: Binary.SUBTYPE_DEFAULT
      output:
          shell: '0'
          java: BsonBinarySubType.BINARY
          csharp: BsonBinarySubType.Binary
          python: binary.BINARY_SUBTYPE
    - input:
          javascript: Binary.SUBTYPE_FUNCTION
      output:
          shell: '1'
          java: BsonBinarySubType.FUNCTION
          csharp: BsonBinarySubType.Function
          python: binary.FUNCTION_SUBTYPE
    - input:
          javascript: Binary.SUBTYPE_BYTE_ARRAY
      output:
          shell: '2'
          java: BsonBinarySubType.BINARY
          csharp: BsonBinarySubType.OldBinary
          python: binary.BINARY_SUBTYPE
    - input:
          javascript: Binary.SUBTYPE_UUID_OLD
      output:
          shell: '3'
          java: BsonBinarySubType.UUID_LEGACY
          csharp: BsonBinarySubType.UuidLegacy
          python: binary.OLD_UUID_SUBTYPE
    - input:
          javascript: Binary.SUBTYPE_UUID
      output:
          shell: '4'
          java: BsonBinarySubType.UUID_STANDARD
          csharp: BsonBinarySubType.UuidStandard
          python: binary.UUID_SUBTYPE
    - input:
          javascript: Binary.SUBTYPE_MD5
      output:
          shell: '5'
          java: BsonBinarySubType.MD5
          csharp: BsonBinarySubType.MD5
          python: binary.MD5_SUBTYPE
    - input:
          javascript: Binary.SUBTYPE_USER_DEFINED
      output:
          shell: '80'
          java: BsonBinarySubType.USER_DEFINED
          csharp: BsonBinarySubType.UserDefined
          python: binary.USER_DEFINED_SUBTYPE
    Long-utils:
    - input:
          javascript: Long.MAX_VALUE
      output:
          shell: Math.max()
          java: Long.MAX_VALUE
          csharp: Int64.MaxValue
          python: sys.maxsize
    - input:
          javascript: Long.MIN_VALUE
      output:
          shell: Math.min()
          java: Long.MIN_VALUE
          csharp: Int64.MinValue
          python: "-sys.maxsize -1"
    - input:
          javascript: Long.ZERO
      output:
          shell: '0'
          java: 0L
          csharp: 0L
          python: Int64(0)
    - input:
          javascript: Long.ONE
      output:
          shell: '1'
          java: 1L
          csharp: 1L
          python: Int64(1)
    - input:
          javascript: Long.NEG_ONE
      output:
          shell: "-1"
          java: "-1L"
          csharp: "-1L"
          python: Int64(-1)
    - input:
          javascript: Long.fromInt(5)
      output:
          shell: new NumberLong(5)
          java: 5L
          csharp: 5L
          python: Int64(5)
    - input:
          javascript: Long.fromString('5')
      output:
          shell: new NumberLong('5')
          java: Long.parseLong("5")
          csharp: Convert.ToInt64("5", 10)
          python: Int64(int('5'))
    - input:
          javascript: Long.fromString('5', 10)
      output:
          shell: new NumberLong('5')
          java: Long.parseLong("5", 10)
          csharp: Convert.ToInt64("5", 10)
          python: Int64(int('5'))
    - input:
          javascript: Long.fromBits(-1, 2147483647)
      output:
          shell: new NumberLong(9223372036854775807)
          java: 9223372036854775807L
          csharp: 9223372036854775807L
          python: Int64(9223372036854775807)
    Decimal128-utils:
    - input:
          javascript: Decimal128.fromString("5")
      output:
          shell: new NumberDecimal('5')
          java: Decimal128.parse("5")
          csharp: Decimal128.Parse("5")
          python: Decimal128('5')
    BSONRegex-utils:
    - input:
          python: Regex.from_native(re.compile('^[a-z0-9_-]{3,16}$', re.I | re.M | re.X | re.S | re.L))
      output:
          javascript: new BSONRegExp('^[a-z0-9_-]{3,16}$', 'ilmsux')
          shell: new RegExp('^[a-z0-9_-]{3,16}$', 'ilmsux')
          java: new BsonRegularExpression("^[a-z0-9_-]{3,16}$", "ilmsux")
          csharp: new BsonRegularExpression("^[a-z0-9_-]{3,16}$", "imsx")
    - input:
          python: Regex.from_native(re.compile('^[a-z0-9_-]{3,16}$', re.I | re.M | re.X | re.S | re.L | re.A))
      output:
          javascript: new BSONRegExp('^[a-z0-9_-]{3,16}$', 'ilmsx')
          shell: new RegExp('^[a-z0-9_-]{3,16}$', 'ilmsx')
          java: new BsonRegularExpression("^[a-z0-9_-]{3,16}$", "ilmsx")
          csharp: new BsonRegularExpression("^[a-z0-9_-]{3,16}$", "imsx")



