runner: !<tag:yaml.org,2002:js/function> |-
  function anonymous(it,type,expect,input,output,transpiler,test
  ) {

      it(`${input}: ${test.input[input]} => ${output}`, () => {
          expect(
              transpiler[input][output].compile(test.input[input], true)
          ).to.equal(test.output[output]);
      });

  }
tests:
  Code-methods:
    - input:
        shell: 'Code(''test code'', {x: 1}).scope'
      output:
        javascript: |-
          new Code('test code', {
            'x': 1
          }).scope
        python: |-
          Code('test code', {
              'x': 1
          }).scope
        java: 'new CodeWithScope("test code", new Document("x", 1L)).getScope()'
        csharp: >-
          new BsonJavaScriptWithScope("test code", new BsonDocument("x",
          1)).Scope
        shell: |-
          new Code('test code', {
            'x': 1
          }).scope
        object: '{''x'': 1}'
        php: '(new Javascript(''test code'', [''x'' => 1]))->getScope()'
        ruby: |-
          BSON::CodeWithScope.new('test code', {
            'x' => 1
          }).scope
        go: >-
          primitive.CodeWithScope{Code: primitive.JavaScript("test code"),
          Scope: bson.D{{"x", 1}}}
        rust: |-
          JavaScriptCodeWithScope { code: "test code".to_string(), scope: doc! {
              "x": 1
          } }.scope
    - input:
        shell: Code('test code').code
      output:
        javascript: new Code('test code').code
        python: str(Code('test code'))
        java: new Code("test code").getCode()
        csharp: new BsonJavaScript("test code").Code
        shell: new Code('test code').code
        object: '''test code'''
        php: (new Javascript('test code'))->getCode()
        ruby: 'BSON::Code.new(''test code'').javascript'
        go: 'primitive.CodeWithScope{Code: primitive.JavaScript("test code")}.Code'
    - input:
        shell: ObjectId('5ab901c29ee65f5c8550c5b9').toString()
      output:
        javascript: new ObjectId('5ab901c29ee65f5c8550c5b9').toString()
        python: str(ObjectId('5ab901c29ee65f5c8550c5b9'))
        java: new ObjectId("5ab901c29ee65f5c8550c5b9").toHexString()
        csharp: new ObjectId("5ab901c29ee65f5c8550c5b9").ToString()
        shell: new ObjectId('5ab901c29ee65f5c8550c5b9').toString()
        object: '''5ab901c29ee65f5c8550c5b9'''
        php: (string) new ObjectId('5ab901c29ee65f5c8550c5b9')
        ruby: 'BSON::ObjectId(''5ab901c29ee65f5c8550c5b9'').to_s'
        go: |-
          var objectIDFromHex = func(hex string) primitive.ObjectID {
            objectID, err := primitive.ObjectIDFromHex(hex)
            if err != nil {
              log.Fatal(err)
            }
            return objectID
          }

          objectIDFromHex("5ab901c29ee65f5c8550c5b9").String()
        rust: 'ObjectId::parse_str("5ab901c29ee65f5c8550c5b9")?.to_hex()'
    - input:
        shell: ObjectId('5ab901c29ee65f5c8550c5b9').getTimestamp()
      output:
        python: ObjectId('5ab901c29ee65f5c8550c5b9').generation_time
        java: new ObjectId("5ab901c29ee65f5c8550c5b9").getTimestamp()
        csharp: new ObjectId("5ab901c29ee65f5c8550c5b9").Timestamp
        shell: new ObjectId('5ab901c29ee65f5c8550c5b9').getTimestamp()
        object: 'new Date(''2018-03-26T14:20:50.000Z'')'
        php: (new ObjectId('5ab901c29ee65f5c8550c5b9'))->getTimestamp()
        ruby: 'BSON::ObjectId(''5ab901c29ee65f5c8550c5b9'').to_time'
        go: |-
          var objectIDFromHex = func(hex string) primitive.ObjectID {
            objectID, err := primitive.ObjectIDFromHex(hex)
            if err != nil {
              log.Fatal(err)
            }
            return objectID
          }

          objectIDFromHex("5ab901c29ee65f5c8550c5b9").Timestamp()
        rust: 'ObjectId::parse_str("5ab901c29ee65f5c8550c5b9")?.timestamp()'
    - input:
        shell: >-
          ObjectId('5ab901c29ee65f5c8550c5b9').equals(ObjectId('5ab901c29ee65f5c8550c5b9'))
      output:
        python: >-
          ObjectId('5ab901c29ee65f5c8550c5b9') ==
          ObjectId('5ab901c29ee65f5c8550c5b9')
        java: >-
          new ObjectId("5ab901c29ee65f5c8550c5b9").equals(new
          ObjectId("5ab901c29ee65f5c8550c5b9"))
        csharp: >-
          new ObjectId("5ab901c29ee65f5c8550c5b9").Equals(new
          ObjectId("5ab901c29ee65f5c8550c5b9"))
        shell: >-
          new ObjectId('5ab901c29ee65f5c8550c5b9').equals(new
          ObjectId('5ab901c29ee65f5c8550c5b9'))
        object: true
        php: >-
          new ObjectId('5ab901c29ee65f5c8550c5b9') == new
          ObjectId('5ab901c29ee65f5c8550c5b9')
        ruby: >-
          BSON::ObjectId('5ab901c29ee65f5c8550c5b9') ==
          BSON::ObjectId('5ab901c29ee65f5c8550c5b9')
        go: >-
          var objectIDFromHex = func(hex string) primitive.ObjectID {
            objectID, err := primitive.ObjectIDFromHex(hex)
            if err != nil {
              log.Fatal(err)
            }
            return objectID
          }


          objectIDFromHex("5ab901c29ee65f5c8550c5b9") ==
          objectIDFromHex("5ab901c29ee65f5c8550c5b9")
    - input:
        shell: >-
          ObjectId('6ab901c29ee65f5c8550c5b9').equals(ObjectId('5ab901c29ee65f5c8550c5b9'))
      output:
        go: >-
          var objectIDFromHex = func(hex string) primitive.ObjectID {
            objectID, err := primitive.ObjectIDFromHex(hex)
            if err != nil {
              log.Fatal(err)
            }
            return objectID
          }


          objectIDFromHex("6ab901c29ee65f5c8550c5b9") ==
          objectIDFromHex("5ab901c29ee65f5c8550c5b9")
        rust: >-
          ObjectId::parse_str("6ab901c29ee65f5c8550c5b9")? ==
          ObjectId::parse_str("5ab901c29ee65f5c8550c5b9")?
    - input:
        shell: ObjectId().equals(ObjectId())
      output:
        object: false
  DBRef-methods:
    - input:
        shell: 'new DBRef(''coll'', new ObjectId(), ''db'').$db'
      output:
        python: 'DBRef(''coll'', ObjectId(), ''db'').database'
        java: 'new DBRef("db", "coll", new ObjectId()).getDatabaseName()'
        csharp: 'new MongoDBRef("coll", new ObjectId(), "db").DatabaseName'
        shell: 'new DBRef(''coll'', new ObjectId(), "db").getDb()'
        object: '''db'''
        php: '[''$ref'' => ''coll'', ''$id'' => new ObjectId(), ''$db'' => ''db''][''$db'']'
        ruby: |-
          BSON::DBRef.new(
            '$ref' => 'coll',
            '$id' => BSON::ObjectId.new,
            '$db' => 'db'
          ).database
    - input:
        shell: 'new DBRef(''coll'', new ObjectId(), ''db'').getDb()'
      output:
        python: 'DBRef(''coll'', ObjectId(), ''db'').database'
        java: 'new DBRef("db", "coll", new ObjectId()).getDatabaseName()'
        csharp: 'new MongoDBRef("coll", new ObjectId(), "db").DatabaseName'
        shell: 'new DBRef(''coll'', new ObjectId(), ''db'').getDb()'
        object: '''db'''
        php: '[''$ref'' => ''coll'', ''$id'' => new ObjectId(), ''$db'' => ''db''][''$db'']'
        ruby: |-
          BSON::DBRef.new(
            '$ref' => 'coll',
            '$id' => BSON::ObjectId.new,
            '$db' => 'db'
          ).database
    - input:
        shell: 'new DBRef(''coll'', new ObjectId(''5bfeee5ffa63a31985db9e5e'')).getRef()'
      output:
        python: 'DBRef(''coll'', ObjectId(''5bfeee5ffa63a31985db9e5e'')).collection'
        java: >-
          new DBRef("coll", new
          ObjectId("5bfeee5ffa63a31985db9e5e")).getCollectionName()
        csharp: >-
          new MongoDBRef("coll", new
          ObjectId("5bfeee5ffa63a31985db9e5e")).CollectionName
        shell: >-
          new DBRef('coll', new
          ObjectId('5bfeee5ffa63a31985db9e5e')).getCollection()
        object: '''coll'''
        php: >-
          ['$ref' => 'coll', '$id' => new ObjectId('5bfeee5ffa63a31985db9e5e'),
          '$db' => null]['$ref']
    - input:
        shell: 'new DBRef(''coll'', new ObjectId(''5bfeee5ffa63a31985db9e5e'')).$ref'
      output:
        python: 'DBRef(''coll'', ObjectId(''5bfeee5ffa63a31985db9e5e'')).collection'
        java: >-
          new DBRef("coll", new
          ObjectId("5bfeee5ffa63a31985db9e5e")).getCollectionName()
        csharp: >-
          new MongoDBRef("coll", new
          ObjectId("5bfeee5ffa63a31985db9e5e")).CollectionName
        shell: >-
          new DBRef('coll', new
          ObjectId('5bfeee5ffa63a31985db9e5e')).getCollection()
        object: '''coll'''
        php: >-
          ['$ref' => 'coll', '$id' => new ObjectId('5bfeee5ffa63a31985db9e5e'),
          '$db' => null]['$ref']
        ruby: |-
          BSON::DBRef.new(
            '$ref' => 'coll',
            '$id' => BSON::ObjectId('5bfeee5ffa63a31985db9e5e')
          ).collection
    - input:
        shell: 'new DBRef(''coll'', new ObjectId()).getCollection()'
      output:
        python: 'DBRef(''coll'', ObjectId()).collection'
        java: 'new DBRef("coll", new ObjectId()).getCollectionName()'
        csharp: 'new MongoDBRef("coll", new ObjectId()).CollectionName'
        shell: 'new DBRef(''coll'', new ObjectId()).getCollection()'
        object: '''coll'''
        php: '[''$ref'' => ''coll'', ''$id'' => new ObjectId(), ''$db'' => null][''$ref'']'
        ruby: |-
          BSON::DBRef.new(
            '$ref' => 'coll',
            '$id' => BSON::ObjectId.new
          ).collection
    - input:
        shell: 'new DBRef(''coll'', new ObjectId(''5bfeee5ffa63a31985db9e5e'')).$id'
      output:
        python: 'DBRef(''coll'', ObjectId(''5bfeee5ffa63a31985db9e5e'')).id'
        java: 'new DBRef("coll", new ObjectId("5bfeee5ffa63a31985db9e5e")).getId()'
        csharp: 'new MongoDBRef("coll", new ObjectId("5bfeee5ffa63a31985db9e5e")).Id'
        shell: 'new DBRef(''coll'', new ObjectId(''5bfeee5ffa63a31985db9e5e'')).getId()'
        object: new ObjectId('5bfeee5ffa63a31985db9e5e')
        php: >-
          ['$ref' => 'coll', '$id' => new ObjectId('5bfeee5ffa63a31985db9e5e'),
          '$db' => null]['$id']
        ruby: |-
          BSON::DBRef.new(
            '$ref' => 'coll',
            '$id' => BSON::ObjectId('5bfeee5ffa63a31985db9e5e')
          ).id
    - input:
        shell: 'new DBRef(''coll'', new ObjectId(''5bfeee5ffa63a31985db9e5e'')).getId()'
      output:
        python: 'DBRef(''coll'', ObjectId(''5bfeee5ffa63a31985db9e5e'')).id'
        java: 'new DBRef("coll", new ObjectId("5bfeee5ffa63a31985db9e5e")).getId()'
        csharp: 'new MongoDBRef("coll", new ObjectId("5bfeee5ffa63a31985db9e5e")).Id'
        shell: 'new DBRef(''coll'', new ObjectId(''5bfeee5ffa63a31985db9e5e'')).getId()'
        object: new ObjectId('5bfeee5ffa63a31985db9e5e')
        php: >-
          ['$ref' => 'coll', '$id' => new ObjectId('5bfeee5ffa63a31985db9e5e'),
          '$db' => null]['$id']
        ruby: |-
          BSON::DBRef.new(
            '$ref' => 'coll',
            '$id' => BSON::ObjectId('5bfeee5ffa63a31985db9e5e')
          ).id
  Long-methods:
    - input:
        shell: NumberLong(429496729601).top
      output:
        javascript: Long.fromNumber(429496729601).getHighBits()
        java: 429496729601L >> 32
        csharp: 429496729601L >> 32
        python: Int64(429496729601) >> 32
        object: '100'
        php: 429496729601 >> 32
        ruby: 429496729601 >> 32
        go: int64(429496729601) >> 32
        rust: 429496729601i64 >> 32
    - input:
        shell: NumberLong(429496729601).bottom
      output:
        javascript: Long.fromNumber(429496729601).getLowBits()
        java: 429496729601L & 0x0000ffff
        csharp: 429496729601L & 0x0000ffff
        python: Int64(429496729601) & 0x0000ffff
        object: '1'
        php: 429496729601 & 0x00000000ffffffff
        ruby: 429496729601 & 0x0000ffff
        go: int64(429496729601) & 0x0000ffff
        rust: 429496729601i64 & 0x0000ffff
    - input:
        shell: NumberLong(429496729601).floatApprox
      output:
        javascript: Long.fromNumber(429496729601).toNumber()
        java: (float) 429496729601L
        csharp: (float) 429496729601L
        python: float(Int64(429496729601))
        object: '429496729601'
        php: (float) 429496729601
        ruby: 429496729601.to_f
        go: float64(int64(429496729601))
        rust: 429496729601i64 as f32
    - input:
        shell: NumberLong(429496729601).toString()
      output:
        python: '''429496729601'''
        java: '"429496729601"'
        csharp: '"429496729601"'
        shell: '''429496729601'''
        object: '''429496729601'''
        php: '''429496729601'''
        ruby: '''429496729601'''
        go: '"429496729601"'
        rust: '"429496729601"'
  Decimal128-methods: []
  Timestamp-methods:
    - input:
        shell: 'Timestamp(1, 100).toString()'
      output:
        python: 'str(Timestamp(1, 100))'
        java: 'new BSONTimestamp(1, 100).toString()'
        csharp: 'new BsonTimestamp(1, 100).ToString()'
        shell: 'new Timestamp(1, 100).toString()'
        object: '''429496729601'''
        php: '(string) new Timestamp(100, 1)'
        ruby: 'BSON::Timestamp.new(1, 100).to_s'
        rust: 'Timestamp { time: 1, increment: 100 }.to_string()'
    - input:
        shell: 'Timestamp(1, 100).getTime()'
      output:
        python: 'Timestamp(1, 100).time'
        java: 'new BSONTimestamp(1, 100).getTime()'
        csharp: 'new BsonTimestamp(1, 100).ToUniversalTime()'
        shell: 'new Timestamp(1, 100).getTime()'
        object: '1'
        php: '(new Timestamp(100, 1))->getTimestamp()'
        ruby: 'BSON::Timestamp.new(1, 100).seconds'
        go: 'primitive.Timestamp{T: 1, I: 100}.T'
        rust: 'Timestamp { time: 1, increment: 100 }.time'
    - input:
        shell: 'Timestamp(1, 100).getInc()'
      output:
        python: 'Timestamp(1, 100).inc'
        java: 'new BSONTimestamp(1, 100).getInc()'
        csharp: 'new BsonTimestamp(1, 100).Increment'
        shell: 'new Timestamp(1, 100).getInc()'
        object: '100'
        php: '(new Timestamp(100, 1))->getIncrement()'
        ruby: 'BSON::Timestamp.new(1, 100).increment'
        go: 'primitive.Timestamp{T: 1, I: 100}.I'
        rust: 'Timestamp { time: 1, increment: 100 }.increment'
    - input:
        shell: 'Timestamp(1, 100).t'
      output:
        python: 'Timestamp(1, 100).time'
        java: 'new BSONTimestamp(1, 100).getTime()'
        csharp: 'new BsonTimestamp(1, 100).ToUniversalTime()'
        shell: 'new Timestamp(1, 100).getTime()'
        object: '1'
        php: '(new Timestamp(100, 1))->getTimestamp()'
        ruby: 'BSON::Timestamp.new(1, 100).seconds'
        go: 'primitive.Timestamp{T: 1, I: 100}.T'
        rust: 'Timestamp { time: 1, increment: 100 }.time'
    - input:
        shell: 'Timestamp(1, 100).i'
      output:
        python: 'Timestamp(1, 100).inc'
        java: 'new BSONTimestamp(1, 100).getInc()'
        csharp: 'new BsonTimestamp(1, 100).Increment'
        shell: 'new Timestamp(1, 100).getInc()'
        object: '100'
        php: '(new Timestamp(100, 1))->getIncrement()'
        ruby: 'BSON::Timestamp.new(1, 100).increment'
        go: 'primitive.Timestamp{T: 1, I: 100}.I'
        rust: 'Timestamp { time: 1, increment: 100 }.increment'
  Symbol-methods: []
  ObjectId-utils:
    - input:
        shell: 'ObjectId.fromDate(new Date(''Thu, 03 Feb 1972 00:00:00 GMT''))'
      output:
        javascript: >-
          ObjectId.createFromTime(new Date('Thu, 03 Feb 1972 00:00:00
          GMT').getTime() / 1000)
        java: new ObjectId(new java.util.Date(65923200000L))
        csharp: 'new ObjectId.GenerateNewId(new DateTime(1972, 2, 3, 0, 0, 0))'
        shell: 'ObjectId.fromDate(new Date(''Thu, 03 Feb 1972 00:00:00 GMT''))'
        php: >-
          new ObjectId(\str_pad(\bin2hex(\pack('N', (new
          UTCDateTime(65923200000))->toDateTime()->getTimestamp())), 24, '0'))
        ruby: 'BSON::ObjectId.from_time(Time.utc(1972, 2, 3, 0, 0, 0))'
  Long-utils: []
  Decimal128-utils: []
  BSONRegex-utils: []
