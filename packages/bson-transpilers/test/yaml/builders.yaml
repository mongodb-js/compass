runner: !<tag:yaml.org,2002:js/function> |-
  function anonymous(it,type,expect,input,output,transpiler,test
  ) {

      describe(`${input} => ${output}`, () => {
          it(`${test.input[input]} equals expected`, () => {
              expect(
                  transpiler[input][output].compile(test.input[input], true)
              ).to.equal(test.output[output]);
          });
          it(`${test.input[input]} imports correctly`, () => {
              const mode = type === 'query' ? 'Query' : 'Pipeline';
              expect(
                  transpiler[input][output].getImports(mode)
              ).to.equal(test.imports);
          });
      });

  }
tests:
  default doc: []
  nested doc: []
  unknown_op: []
  eq: []
  gt: []
  lt: []
  gte: []
  lte: []
  ne: []
  in: []
  nin: []
  and: []
  or: []
  not: []
  nor: []
  all: []
  bitsAllSet: []
  bitsAllClear: []
  bitsAnySet: []
  bitsAnyClear: []
  elemMatch: []
  size: []
  exists: []
  type: []
  mod: []
  regex: []
  text: []
  where: []
  geometry: []
  geoWithin: []
  geoWithinBox: []
  geoWithinPolygon: []
  geoWithinCenter: []
  geoWithinCenterSphere: []
  geoIntersects: []
  near: []
  nearSphere: []
  sum: []
  avg: []
  first: []
  last: []
  max: []
  min: []
  push: []
  addToSet: []
  stdDevPop: []
  stdDevSamp: []
  match: []
  project: []
  sample: []
  sort: []
  skip: []
  limit: []
  lookup: []
  group: []
  unwind: []
  out: []
  graphLookup: []
  sortByCount: []
  replaceRoot: []
  addFields: []
  count: []
  bucket: []
  bucketAuto: []
  facet: []
  collStats: []
  currentOp: []
  geoNear: []
  indexStats: []
  listLocalSessions: []
  listSessions: []
  redact: []
