runner: !<tag:yaml.org,2002:js/function> |-
  function anonymous(it,type,expect,input,output,transpiler,test
  ) {

      it(test.description, () => {
          expect(
              transpiler[input][output].compile(test.input[input], false)
          ).to.equal(test.output[output]);
      });

  }
tests:
  all:
    - description: '{x: 1}'
      input:
        shell: '{x: 1}'
      output:
        java: 'new Document("x", 1L)'
        go: 'bson.D{{"x", 1}}'
    - description: Doc with trailing comma
      input:
        shell: '{x: ''x''}'
      output:
        java: 'new Document("x", "x")'
        go: 'bson.D{{"x", "x"}}'
    - description: Doc with array
      input:
        shell: '{x: [''x'', ''y'']}'
      output:
        java: 'new Document("x", Arrays.asList("x", "y"))'
        go: |-
          bson.D{
              {"x",
                  bson.A{
                      "x",
                      "y",
                  },
              },
          }
    - description: Doc with subdoc
      input:
        shell: '{x: {y: ''x''}}'
      output:
        java: 'new Document("x", new Document("y", "x"))'
        go: 'bson.D{{"x", bson.D{{"y", "x"}}}}'
    - description: Empty object
      input:
        shell: '{}'
      output:
        java: new Document()
        go: 'bson.D{}'
    - description: Doc with declaration
      input:
        shell: '{x: ObjectId(''5ab901c29ee65f5c8550c5b9'')}'
      output:
        go: |-
          var objectIDFromHex = func(hex string) primitive.ObjectID {
            objectID, err := primitive.ObjectIDFromHex(hex)
            if err != nil {
              log.Fatal(err)
            }
            return objectID
          }

          bson.D{{"x", objectIDFromHex("5ab901c29ee65f5c8550c5b9")}}
    - description: Two items in document
      input:
        shell: '{x: ''x'', n: ''4''}'
      output:
        java: |-
          new Document("x", "x")
              .append("n", "4")
        go: |-
          bson.D{
              {"x", "x"},
              {"n", "4"},
          }
    - description: nested document
      input:
        shell: >-
          { graphLookup : { 'from' : 'raw_data', 'startWith' : '$_id',
          'connectFromField' : '_id', 'connectToField' : 'manager', 'as' :
          'reports' } }
      output:
        java: |-
          new Document("graphLookup", new Document("from", "raw_data")
                  .append("startWith", "$_id")
                  .append("connectFromField", "_id")
                  .append("connectToField", "manager")
                  .append("as", "reports"))
        go: |-
          bson.D{
              {"graphLookup",
                  bson.D{
                      {"from", "raw_data"},
                      {"startWith", "$_id"},
                      {"connectFromField", "_id"},
                      {"connectToField", "manager"},
                      {"as", "reports"},
                  },
              },
          }
    - description: nested document with array
      input:
        shell: >-
          { status: 'A', $or: [{ qty: { $lt: 30 } }, { item: { $regex: '^p' } }]
          }
      output:
        java: |-
          new Document("status", "A")
              .append("$or", Arrays.asList(new Document("qty", 
                  new Document("$lt", 30L)), 
                  new Document("item", 
                  new Document("$regex", "^p"))))
        go: |-
          bson.D{
              {"status", "A"},
              {"$or",
                  bson.A{
                      bson.D{{"qty", bson.D{{"$lt", 30}}}},
                      bson.D{{"item", bson.D{{"$regex", "^p"}}}},
                  },
              },
          }
    - description: Array with subdoc
      input:
        shell: '[''x'', { settings: ''http2'' }]'
      output:
        java: |-
          Arrays.asList("x", 
              new Document("settings", "http2"))
    - description: nested array with nested subdoc
      input:
        shell: >-
          {'pipeline': [ { $match: { $expr: { '$eq': [ '$manager', '$$me' ] } }
          }, { $project: { managers : 0 } }, { $sort: { startQuarter: 1,
          notes:1, job_code: 1 } } ]}
      output:
        java: |-
          new Document("pipeline", Arrays.asList(new Document("$match", 
                  new Document("$expr", 
                  new Document("$eq", Arrays.asList("$manager", "$$me")))), 
                  new Document("$project", 
                  new Document("managers", 0L)), 
                  new Document("$sort", 
                  new Document("startQuarter", 1L)
                          .append("notes", 1L)
                          .append("job_code", 1L))))
        go: |-
          bson.D{
              {"pipeline",
                  bson.A{
                      bson.D{
                          {"$match",
                              bson.D{
                                  {"$expr",
                                      bson.D{
                                          {"$eq",
                                              bson.A{
                                                  "$manager",
                                                  "$$me",
                                              },
                                          },
                                      },
                                  },
                              },
                          },
                      },
                      bson.D{{"$project", bson.D{{"managers", 0}}}},
                      bson.D{
                          {"$sort",
                              bson.D{
                                  {"startQuarter", 1},
                                  {"notes", 1},
                                  {"job_code", 1},
                              },
                          },
                      },
                  },
              },
          }
