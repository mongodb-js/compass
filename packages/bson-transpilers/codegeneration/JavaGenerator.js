const CodeGenerator = require('./CodeGenerator.js');

/**
 * This Visitor walks the tree generated by parsers and produces Java code.
 *
 * @returns {object}
 */
function Visitor() {
  CodeGenerator.call(this);
  return this;
}
Visitor.prototype = Object.create(CodeGenerator.prototype);
Visitor.prototype.constructor = Visitor;

/////////////////////////////////
// Nodes that differ in syntax //
/////////////////////////////////

Visitor.prototype.visitStringLiteral = function(ctx) {
  return this.doubleQuoteStringify(this.visitChildren(ctx));
};

Visitor.prototype.visitObjectLiteral = function(ctx) {
  let doc = 'new Document()';
  
  for (let i = 1; i < ctx.getChildCount() - 1; i++) {
    doc += this.visit(ctx.getChild(i));
  }
  return doc;
};

Visitor.prototype.visitPropertyNameAndValueList = function(ctx) {
  return this.visitChildren(ctx, {step: 2});
};

Visitor.prototype.visitPropertyExpressionAssignment = function(ctx) {
  const key = this.doubleQuoteStringify(this.visit(ctx.getChild(0)));
  const value = this.visit(ctx.getChild(2));
  return `.append(${key}, ${value})`;
};

// Arrays.asList(1, 2))
Visitor.prototype.visitArrayLiteral = function(ctx) {
  return 'Arrays.asList(' + this.visit(ctx.getChild(1)) + ')';
};
module.exports = Visitor;
