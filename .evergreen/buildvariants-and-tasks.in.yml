<%
const UNIT_TESTS_BUILD_VARIANTS = [
  {
    name: 'unit-tests-ubuntu',
    display_name: 'Unit Tests Ubuntu',
    run_on: 'ubuntu2004-large',
  },
  {
    name: 'unit-tests-windows',
    display_name: 'Unit Tests Windows',
    run_on: 'windows-vsCurrent-large',
  },
  {
    name: 'unit-tests-rhel',
    display_name: 'Unit Tests RHEL',
    run_on: 'rhel80-large',
  },
  {
    name: 'unit-tests-macos',
    display_name: 'Unit Tests MacOS',
    run_on: 'macos-14-arm64',
    run_on_gui: 'macos-14-arm64-gui'
  }
];

const PACKAGE_BUILD_VARIANTS = [
  {
    name: 'package-ubuntu',
    display_name: 'Package Ubuntu',
    run_on: 'ubuntu1604-large',
  },
  {
    name: 'package-windows',
    display_name: 'Package Windows',
    run_on: 'windows-vsCurrent-large',
  },
  {
    name: 'package-rhel',
    display_name: 'Package RHEL',
    run_on: 'rhel80-large',
  },
  {
    name: 'package-macos-x64',
    display_name: 'Package MacOS Intel',
    run_on: 'macos-1100'
  },
  {
    name: 'package-macos-arm',
    display_name: 'Package MacOS Arm64',
    run_on: 'macos-1100-arm64'
  }
];

const TEST_PACKAGED_APP_BUILD_VARIANTS = [
  {
    name: 'test-packaged-app-ubuntu',
    display_name: 'Ubuntu 20.04',
    run_on: 'ubuntu2004-large',
    depends_on: 'package-ubuntu',
  },
  {
    name: 'test-packaged-app-windows',
    display_name: 'Windows 10',
    run_on: 'windows-vsCurrent-large',
    depends_on: 'package-windows',
  },
  {
    name: 'test-packaged-app-rhel',
    display_name: 'RHEL 8.0',
    run_on: 'rhel80-large',
    depends_on: 'package-rhel',
  },
  {
    name: 'test-packaged-app-macos-11-arm',
    display_name: 'MacOS arm64 11',
    run_on: 'macos-1100-arm64-gui',
    depends_on: 'package-macos-arm'
  },
  {
    name: 'test-packaged-app-macos-11-x64',
    display_name: 'MacOS x64 11',
    run_on: 'macos-1100-gui',
    patchable: false,
    depends_on: 'package-macos-x64'
  }
];

const EOL_SERVER_VERSIONS = [
  { name: '40x-community', version: '4.0.x' },
  { name: '40x-enterprise', version: '4.0.x-enterprise' },
  { name: '42x-community', version: '4.2.x' },
  { name: '42x-enterprise', version: '4.2.x-enterprise' },
  { name: '44x-community', version: '4.4.x' },
  { name: '44x-enterprise', version: '4.4.x-enterprise' },
  { name: '5x-community', version: '5.x.x' },
  { name: '5x-enterprise', version: '5.x.x-enterprise' }
];

// NOTE: the order matters here. The latest element of this array is used
// to test the packaged app.
const MAINTAINED_SERVER_VERSIONS = [
  { name: '60x-community', version: '6.0.x' },
  { name: '60x-enterprise', version: '6.0.x-enterprise' },
  { name: '70x-community', version: '7.0.x' },
  { name: '70x-enterprise', version: '7.0.x-enterprise' },
  { name: '80x-community', version: '>= 8.0.0-rc4' },
  { name: '80x-enterprise', version: '>= 8.0.0-rc4-enterprise' },
];

const TEST_LATEST_ALPHA_SERVER_VERSION = { name: 'latest-alpha', version: 'latest-alpha-enterprise' };

const SERVER_VERSIONS = [
 ...EOL_SERVER_VERSIONS,
 ...MAINTAINED_SERVER_VERSIONS,
 TEST_LATEST_ALPHA_SERVER_VERSION
];

const COMPASS_DISTRIBUTIONS = ["compass", "compass-isolated", "compass-readonly"];
%>

#
# Build Variants
#
buildvariants:
  - name: connectivity-tests

    display_name: Connectivity Tests
    run_on: ubuntu2004-large
    tasks:
      - name: test-connectivity

  - name: generate-vulnerability-report
    display_name: Vulnerability Report
    run_on: ubuntu2004-large
    tasks:
      - name: generate-vulnerability-report

  - name: coverage
    display_name: E2E Coverage
    run_on: ubuntu2004-large
    tasks:
      - name: e2e-coverage

  - name: csfle-tests
    display_name: CSFLE Tests
    run_on: ubuntu2004-large
    tasks:
      - name: test-csfle

  - name: test-web-sandbox
    display_name: Test Web Sandbox
    run_on: ubuntu2004-large
    tasks:
      - name: test-web-sandbox-chrome
      - name: test-web-sandbox-firefox

  - name: check
    display_name: Check
    run_on: ubuntu2004-large
    tasks:
      - name: check

  # unit-tests
<% for (const buildVariant of UNIT_TESTS_BUILD_VARIANTS) { %>
  - name: <%= buildVariant.name %>

    display_name: <%= buildVariant.display_name %>
    run_on: <%= buildVariant.run_on %>
    tasks:
    - name: test
    - name: test-electron
      <% if (buildVariant.run_on_gui) { %>
      run_on: <%= buildVariant.run_on_gui %>
      <% } %>
<% } %>

  # package
<% for (const buildVariant of PACKAGE_BUILD_VARIANTS) { %>
  - name: <%= buildVariant.name %>

    display_name: <%= buildVariant.display_name %>
    run_on: <%= buildVariant.run_on %>
    tasks:
    <% for (const distribution of COMPASS_DISTRIBUTIONS) { %>
    - name: package-<%= distribution %>
    <% } %>
<% } %>

  - name: test-eol-servers
    display_name: Test EoL Servers
    run_on: ubuntu1804-large
    patchable: false
    depends_on:
      - name: package-compass
        variant: package-ubuntu
    tasks:
      <% for (const serverVersion of EOL_SERVER_VERSIONS) { %>
      - name: test-packaged-app-<%= serverVersion.name %>
      <% } %>

  - name: test-maintained-servers
    display_name: Test Maintained Servers
    run_on: ubuntu2004-large
    patchable: true
    depends_on:
      - name: package-compass
        variant: package-ubuntu
    tasks:
      <% for (const serverVersion of MAINTAINED_SERVER_VERSIONS) { %>
      - name: test-packaged-app-<%= serverVersion.name %>
      <% } %>

  - name: test-latest-alpha
    display_name: Test Latest Alpha Server
    run_on: ubuntu2004-large
    patchable: false
    depends_on:
      - name: package-compass
        variant: package-ubuntu
    tasks:
      - name: test-packaged-app-<%= TEST_LATEST_ALPHA_SERVER_VERSION.name %>

  # test-packaged-app
<% for (const buildVariant of TEST_PACKAGED_APP_BUILD_VARIANTS) { %>
  - name: <%= buildVariant.name %>
    display_name: Test Packaged App <%= buildVariant.display_name %>
    run_on: <%= buildVariant.run_on %>
    patchable: <%= buildVariant.patchable ?? true %>
    depends_on:
      - name: package-compass
        variant: <%= buildVariant.depends_on %>
    tasks:
      - name: test-packaged-app-<%= MAINTAINED_SERVER_VERSIONS[MAINTAINED_SERVER_VERSIONS.length - 1].name %>
<% } %>

  - name: publish
    display_name: Publish Artifacts
    run_on: ubuntu2004-large
    tasks:
      - name: publish
      - name: publish-packages-next
      - name: publish-dev-release-info
      - name: create_static_analysis_report

#
# Tasks
#
tasks:
  - name: check
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
      - func: check

  - name: test
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
      - func: test
        vars:
          debug: 'hadron*,mongo*'

  - name: test-electron
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
      - func: test-electron
        vars:
          debug: 'hadron*,mongo*'

  - name: test-connectivity
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: clone
      - func: test-connectivity
        vars:
          debug: 'compass*,electron*,hadron*,mongo*'

  - name: test-csfle
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
      - func: test-csfle
        vars:
          debug: 'compass*,electron*,hadron*,mongo*'

  - name: e2e-coverage
    tags: ['run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
      - func: e2e-coverage
        vars:
          debug: 'compass-e2e-tests*,electron*,hadron*,mongo*'

  - name: generate-vulnerability-report
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
      - func: generate-vulnerability-report
        vars:
          debug: 'compass*,electron*,hadron*,mongo*'

  # Publish happens in one go to make sure we are not creating multiple github
  # releases in parallel
  - name: publish
    # Does a dry-run: doesn't actually publishes, but checks that all files
    # exist and we are not trying to do a "broken" publish
    tags: ['run-on-pr']
    depends_on:
      - name: '.required-for-publish'
        variant: '*'
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
        vars:
          scope: mongodb-compass
      - func: get-all-artifacts
      - func: publish

  - name: publish-packages-next
    tags: []
    depends_on:
      - name: '.required-for-publish'
        variant: '*'
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
      - func: publish-packages-next

  - name: publish-dev-release-info
    tags: []
    depends_on:
      - name: 'publish'
        variant: '*'
    commands:
      - func: prepare
      - func: publish-dev-release-info

  - name: test-web-sandbox-chrome
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
        vars:
          scope: 'compass-e2e-tests'
      - func: apply-compass-target-expansion
        vars:
          compass_distribution: compass
      - func: test-web-sandbox
        vars:
          mongodb_version: 'latest-alpha-enterprise'
          browser_name: 'chrome'
          compass_distribution: compass
          debug: 'compass-e2e-tests*,electron*,hadron*,mongo*'

  - name: test-web-sandbox-firefox
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
        vars:
          scope: 'compass-e2e-tests'
      - func: apply-compass-target-expansion
        vars:
          compass_distribution: compass
      - func: test-web-sandbox
        vars:
          mongodb_version: 'latest-alpha-enterprise'
          browser_name: 'firefox'
          compass_distribution: compass
          debug: 'compass-e2e-tests*,electron*,hadron*,mongo*'

<% for (const distribution of COMPASS_DISTRIBUTIONS) { %>
  - name: package-<%= distribution %>
    tags: ['required-for-publish', 'run-on-pr', 'package-task']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
        vars:
          scope: '@mongodb-js/webpack-config-compass'
      - func: apply-compass-target-expansion
        vars:
          compass_distribution: <%= distribution %>
      - func: spawn-signing-server
      - func: package
        vars:
          debug: 'hadron*,mongo*,compass*,electron*,sign*'
          compass_distribution: <%= distribution %>
      - func: verify-artifacts
      - func: save-all-artifacts
        vars:
          compass_distribution: <%= distribution %>
<% } %>

<%
for (const serverVersion of SERVER_VERSIONS) { %>
  - name: test-packaged-app-<%= serverVersion.name %>
    tags:
    - required-for-publish
    - run-on-pr
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
        vars:
          scope: 'compass-e2e-tests'
      - func: apply-compass-target-expansion
        vars:
          compass_distribution: compass
      - func: get-packaged-app
        vars:
          compass_distribution: compass
      - func: test-packaged-app
        vars:
          mongodb_version: '<%= serverVersion.version %>'
          compass_distribution: compass
          debug: 'compass-e2e-tests*,electron*,hadron*,mongo*'
<% } %>

  - name: create_static_analysis_report
    tags: ['required-for-publish', 'run-on-pr']
    depends_on:
      - name: ".package-task"
        variant: "*"
    commands:
      - func: prepare
      - func: install
<%
let firstPartyDepsFilenames = [];
for (const compassDistribution of COMPASS_DISTRIBUTIONS) {
  const filenames = PACKAGE_BUILD_VARIANTS.map(
    (variant) => `first-party-deps-${compassDistribution}-${variant.name}.json`
  );

  for (const filename of filenames) {
    firstPartyDepsFilenames.push(filename); %>
      - func: get_first_party_dependency_list
        vars:
          filename: <%= filename %>
<%  } } %>
      - func: create_static_analysis_report
        vars:
          first_party_dependency_filenames: <%= firstPartyDepsFilenames.map(f => '.sbom/' + f).join(',') %>
