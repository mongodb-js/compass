# The variables are with the functions because they are only used by the
# functions and also because you can't use variables across includes.
variables:
  - &save-artifact-params-private
    aws_key: ${aws_key}
    aws_secret: ${aws_secret}
    bucket: mciuploads
    content_type: application/octet-stream
    permissions: private
    visibility: signed
  - &save-artifact-params-public
    aws_key: ${aws_key}
    aws_secret: ${aws_secret}
    bucket: mciuploads
    content_type: application/octet-stream
    permissions: public-read
  - &get-artifact-params
    aws_key: ${aws_key}
    aws_secret: ${aws_secret}
    bucket: mciuploads
    content_type: application/octet-stream
    # NOTE: anything added here should probably also be added to the list
  - &compass-env
    WORKDIR: ${workdir}
    CI: '1'
    MONGODB_COMPASS_TEST_USE_PLAIN_SAFE_STORAGE: 'true'
    EVERGREEN: '1'
    EVERGREEN_AUTHOR: ${author}
    EVERGREEN_BRANCH_NAME: ${branch_name}
    EVERGREEN_BUILD_ID: ${build_id}
    EVERGREEN_BUILD_VARIANT: ${build_variant}
    EVERGREEN_EXECUTION: ${execution}
    EVERGREEN_IS_PATCH: ${is_patch}
    EVERGREEN_PROJECT: ${project}
    EVERGREEN_REVISION: ${revision}
    EVERGREEN_REVISION_ORDER_ID: ${revision_order_id}
    EVERGREEN_TASK_ID: ${task_id}
    EVERGREEN_TASK_NAME: ${task_name}
    EVERGREEN_TASK_URL: https://evergreen.mongodb.com/task/${task_id}
    EVERGREEN_VERSION_ID: ${version_id}
    EVERGREEN_WORKDIR: ${workdir}
    EVERGREEN_CREATED_AT: ${created_at}
    NODE_JS_VERSION: '20.16.0'
    NPM_VERSION: '10.2.4'
    # secrets
    HADRON_METRICS_INTERCOM_APP_ID: ${metrics_intercom_app_id}
    HADRON_METRICS_SEGMENT_API_KEY: ${metrics_segment_api_key}
    E2E_TESTS_METRICS_URI: ${e2e_tests_metrics_string}
    E2E_TESTS_ATLAS_HOST: ${e2e_tests_atlas_host}
    E2E_TESTS_DATA_LAKE_HOST: ${e2e_tests_data_lake_host}
    E2E_TESTS_SERVERLESS_HOST: ${e2e_tests_serverless_host}
    E2E_TESTS_ANALYTICS_NODE_HOST: ${e2e_tests_analytics_node_host}
    E2E_TESTS_FREE_TIER_HOST: ${e2e_tests_free_tier_host}
    E2E_TESTS_ATLAS_USERNAME: ${e2e_tests_atlas_username}
    E2E_TESTS_ATLAS_PASSWORD: ${e2e_tests_atlas_password}
    E2E_TESTS_ATLAS_X509_PEM: ${e2e_tests_atlas_x509_pem}
    E2E_TESTS_ATLAS_IAM_ACCESS_KEY_ID: ${e2e_tests_atlas_iam_aws_access_key_id}
    E2E_TESTS_ATLAS_IAM_SECRET_ACCESS_KEY: ${e2e_tests_atlas_iam_aws_secret_access_key}
    E2E_TESTS_ATLAS_IAM_TEMP_ROLE_ARN: ${e2e_tests_atlas_iam_temp_role_arn}
    E2E_TESTS_ATLAS_IAM_USER_ARN: ${e2e_tests_atlas_iam_user_arn}
    E2E_TESTS_ATLAS_READWRITEANY_STRING: ${e2e_tests_atlas_readwriteany_string}
    E2E_TESTS_ATLAS_READANYDATABASE_STRING: ${e2e_tests_atlas_readanydatabase_string}
    E2E_TESTS_ATLAS_CUSTOMROLE_STRING: ${e2e_tests_atlas_customrole_string}
    E2E_TESTS_ATLAS_SPECIFICPERMISSION_STRING: ${e2e_tests_atlas_specificpermission_string}
    MACOS_NOTARY_KEY: ${macos_notary_key}
    MACOS_NOTARY_SECRET: ${macos_notary_secret}
    MACOS_NOTARY_CLIENT_URL: 'https://macos-notary-1628249594.s3.amazonaws.com/releases/client/latest/darwin_amd64.zip'
    MACOS_NOTARY_API_URL: 'https://dev.macos-notary.build.10gen.cc/api'
    GITHUB_TOKEN: ${devtoolsbot_github_token}
    DOWNLOAD_CENTER_AWS_ACCESS_KEY_ID: ${aws_key_evergreen_integrations}
    DOWNLOAD_CENTER_AWS_SECRET_ACCESS_KEY: ${aws_secret_evergreen_integrations}
    EVERGREEN_BUCKET_NAME: mciuploads
    EVERGREEN_BUCKET_KEY_PREFIX: ${project}/${revision}_${revision_order_id}
    MONGODB_RUNNER_LOG_DIR: ${workdir}/src/.testserver/
    E2E_TESTS_ATLAS_CS_WITHOUT_SEARCH: ${e2e_tests_atlas_cs_without_search}
    E2E_TESTS_ATLAS_CS_WITH_SEARCH: ${e2e_tests_atlas_cs_with_search}
    GARASIGN_USERNAME: ${garasign_username}
    GARASIGN_PASSWORD: ${garasign_password}
    ARTIFACTORY_USERNAME: ${artifactory_username}
    ARTIFACTORY_PASSWORD: ${artifactory_password}

# This is here with the variables because anchors aren't supported across includes
post:
  - command: archive.targz_pack
    params:
      target: src/all-e2e-logs.tgz
      source_dir: src/packages/compass-e2e-tests/.log
      include:
        - '**'
  - command: s3.put
    params:
      <<: *save-artifact-params-private
      local_files_include_filter:
        - src/.deps/.npm/_logs/*.log
        - src/packages/compass-e2e-tests/.log/**/*
        - src/packages/compass-e2e-tests/.nyc_output/coverage.json
        - src/coverage.tgz
        - src/.testserver/logs/*
        - src/.evergreen/logs/*
        - src/all-e2e-logs.tgz
      remote_file: ${project}/${revision}_${revision_order_id}/${build_variant}/${task_name}
      content_type: text/plain
  - command: s3.put
    params:
      <<: *save-artifact-params-private
      local_file: src/.sbom/dependencies.json
      remote_file: ${project}/${revision}_${revision_order_id}/dependencies.json
      content_type: application/json
      optional: true
  - command: s3.put
    params:
      <<: *save-artifact-params-private
      local_file: src/.sbom/snyk-test-result.json
      remote_file: ${project}/${revision}_${revision_order_id}/snyk-test-result.json
      content_type: application/json
      optional: true
  - command: s3.put
    params:
      <<: *save-artifact-params-private
      local_file: src/.sbom/snyk-test-result.html
      remote_file: ${project}/${revision}_${revision_order_id}/snyk-test-result.html
      content_type: text/html
      optional: true
  - command: s3.put
    params:
      <<: *save-artifact-params-private
      local_file: src/.sbom/vulnerability-report.md
      remote_file: ${project}/${revision}_${revision_order_id}/vulnerability-report.md
      content_type: text/markdown
      optional: true
  - command: attach.xunit_results
    params:
      file: src/.logs/*.xml
functions:
  clone:
    - command: git.get_project
      type: system
      params:
        directory: src

  prepare:
    - command: git.get_project
      type: system
      params:
        directory: src

    - command: shell.exec
      type: setup
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
        script: |
          set -e
          eval $(.evergreen/print-compass-env.sh)

          # Make all the dirs
          mkdir -p $ARTIFACTS_PATH
          mkdir -p $NPM_CACHE_DIR
          mkdir -p $NPM_TMP_DIR

    - command: shell.exec
      type: setup
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
        script: |
          set -e
          eval $(.evergreen/print-compass-env.sh)

          .evergreen/preinstall.sh

          # Make sure install worked
          echo "Using node version:";
          node -v;
          echo "Using npm version:";
          npm -v;

          echo "Using gcc version:"
          gcc --version;
          echo "Using g++ version:"
          g++ --version;

  install:
    - command: shell.exec
      type: setup
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
        script: |
          set -e
          eval $(.evergreen/print-compass-env.sh)

          echo "Installing Compass dependencies with the following npm configuration"
          npm config ls -l
          echo "(if npm fails, debug.log will be uploaded to S3)"

          # Install dependencies
          bash ".evergreen/retry-with-backoff.sh" .evergreen/npm_ci.sh

          # Will fail if versions of direct dependencies listed in package-lock
          # are not matching versions defined in package.json file of any of the
          # workspace packages
          # This command is very noisy when running from root with --all, store
          # the output in a file that will be uploaded with rest of the logs
          LS_ALL_STDOUT_FILE="$(npm config get cache)/_logs/$(date -u +"%Y-%m-%dT%H_%M_%SZ")-npm-ls-all.log"
          echo "Validating dependencies with \`npm ls --all\`..."
          (npm ls --all > $LS_ALL_STDOUT_FILE && echo "No mismatched dependency versions") || echo "\nThe \`npm ls\` command failed with mismatched dependencies error. This usually means that the dependency versions listed in package.json are not matching dependencies resolved and recorded in package-lock.json. If you updated package.json files in your PR, inspect the error output and try to re-install offending dependncies to fix the package-lock file."

  bootstrap:
    - command: shell.exec
      type: setup
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
        script: |
          set -e
          eval $(.evergreen/print-compass-env.sh)

          # Pre-built binaries for keytar do not support older RHEL versions.
          # Since we have started importing keytar from top-level scripts in packages,
          # re-built keytar before the bootstrap process so that it is always usable.
          if [[ "$IS_RHEL" == "true" ]]; then
            echo "Rebuilding packages for rhel"
            npm run node-rebuild
          fi

          # Prepare workspaces in provided scope
          npx lerna run bootstrap \
            --stream \
            --scope "${scope}" \
            --include-dependencies
          # If scope is not provided, we're bootstrapping the whole monorepo and
          # should follow the logic in bootstrap npm scripts
          if [ -z "${scope}" ]; then
            npm run compile --workspace=@mongodb-js/testing-library-compass
          fi
  check:
    command: shell.exec
    params:
      working_dir: src
      shell: bash
      env:
        <<: *compass-env
      script: |
        set -e
        eval $(.evergreen/print-compass-env.sh)

        echo "Run static analysis..."
        npm run check-ci

  test:
    - command: shell.exec
      # Fail the task if it's idle for 10 mins
      timeout_secs: 600
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
          DEBUG: ${debug|}
          MONGODB_VERSION: ${mongodb_version|}
          MONGODB_RUNNER_VERSION: ${mongodb_version|}
        script: |
          set -e

          # Load environment variables
          eval $(.evergreen/print-compass-env.sh)

          echo "Running tests in Node.js runtime"

          # compass-e2e-tests are ignored as we are running this test suite
          # separately in the test-packaged-app task
          export IGNORE_TESTS="compass-e2e-tests"

          npm run --unsafe-perm test-ci -- --stream --ignore="$IGNORE_TESTS"

  test-electron:
    - command: shell.exec
      # Fail the task if it's idle for 10 mins
      timeout_secs: 600
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
          DEBUG: ${debug|}
          MONGODB_VERSION: ${mongodb_version|}
          MONGODB_RUNNER_VERSION: ${mongodb_version|}
        script: |
          set -e

          # Load environment variables
          eval $(.evergreen/print-compass-env.sh)

          echo "Running tests in Electron runtime"

          # Preparing native addons for electron runtime
          DEBUG=electron-rebuild* npm run --unsafe-perm electron-rebuild

          npm run --unsafe-perm test-ci-electron -- --stream

  apply-compass-target-expansion:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
          HADRON_DISTRIBUTION: ${compass_distribution}
        script: |
          set -e
          # Load environment variables
          eval $(.evergreen/print-compass-env.sh)
          # Generates and expansion file with build target metadata in packages/compass/expansions.yml
          npm run --workspace mongodb-compass build-info -- ${target_platform} ${target_arch} --format=yaml --flatten --out expansions.raw.yml
          # the 'author' key conflicts with evergreen's own expansion
          grep -v '^author:' < packages/compass/expansions.raw.yml > packages/compass/expansions.yml
    - command: expansions.update
      params:
        # packaging and publishing is using all the *_filename variables
        #
        # e2e tests are using appPath / appName to extract packaged application
        # and be able to find the binary that is used for the tests
        file: src/packages/compass/expansions.yml

  spawn-signing-server:
    # spawn
    - command: host.create
      type: setup
      params:
        provider: ec2
        distro: ubuntu2004-large
        security_group_ids:
          - sg-097bff6dd0d1d31d0 # Magic string that's needed for SSH'ing.
    # write host info (this file will be read by signingtool when connection to ssh server)
    - command: host.list
      params:
        num_hosts: 1
        path: spawned_hosts.json
        timeout_seconds: 1200
        wait: true
    # copy ssh key (this key will be used to connect to ssh server)
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          __project_aws_ssh_key_value: ${__project_aws_ssh_key_value}
        script: |
          set -e
          .evergreen/setup-ssh-key.sh

    # wait for host to be ready
    - command: shell.exec
      params:
        exec_as_string: true
        shell: bash
        script: |
          set -e
          user=ubuntu
          hostname=$(tr -d '"[]{}' < spawned_hosts.json | cut -d , -f 1 | awk -F : '{print $2}')
          identity_file=$(echo ~/.ssh/mcipacker.pem)

          attempts=0
          connection_attempts=25

          ## Check for remote connectivity
          while ! ssh \
            -i "$identity_file" \
            -o ConnectTimeout=10 \
            -o ForwardAgent=yes \
            -o IdentitiesOnly=yes \
            -o StrictHostKeyChecking=no \
            "$(printf "%s@%s" "$user" "$hostname")" \
            exit
          do
            if [ "$attempts" -ge "$connection_attempts" ]; then
              echo "SSH connection failed after $connection_attempts attempts. Exiting..."
              exit 1
            fi
            printf "SSH connection attempt %d/%d failed. Retrying...\n" "$((attempts++))" "$connection_attempts"
            ## sleep for Permission denied (publickey) errors
            sleep 20
          done
          echo "SSH connection established after $attempts attempts"

          # Write the host info so that it can be used by the signing tool
          if [[ $OSTYPE == "cygwin" ]]; then
            identity_file_ospath=$(cygpath -wa "$identity_file")
          else
            identity_file_ospath=$(eval echo "$identity_file")
          fi
          cat <<EOL > signing_host_info.yml
          SIGNING_SERVER_HOSTNAME: $hostname
          SIGNING_SERVER_PRIVATE_KEY: $identity_file_ospath
          SIGNING_SERVER_PRIVATE_KEY_CYGPATH: $identity_file
          SIGNING_SERVER_USERNAME: $user
          SIGNING_SERVER_PORT: 22
          EOL
    # Update the expansions
    - command: expansions.update
      params:
        file: signing_host_info.yml

  package:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
          DEBUG: ${debug}
          npm_config_loglevel: ${npm_loglevel}
          HADRON_DISTRIBUTION: ${compass_distribution}
        script: |
          set -e

          # Ensure .sbom is always created with fresh data
          rm -rvf .sbom && mkdir -pv .sbom

          # Load environment variables
          eval $(.evergreen/print-compass-env.sh)
          cd packages/compass && npm run prepackage-compass
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          ARTIFACTORY_USERNAME: ${artifactory_username}
          ARTIFACTORY_PASSWORD: ${artifactory_password}
          SIGNING_SERVER_HOSTNAME: ${SIGNING_SERVER_HOSTNAME}
          SIGNING_SERVER_PRIVATE_KEY: ${SIGNING_SERVER_PRIVATE_KEY}
          SIGNING_SERVER_PRIVATE_KEY_CYGPATH: ${SIGNING_SERVER_PRIVATE_KEY_CYGPATH}
          SIGNING_SERVER_USERNAME: ${SIGNING_SERVER_USERNAME}
          SIGNING_SERVER_PORT: ${SIGNING_SERVER_PORT}
          # for Silk SBOM integration
          SILK_ASSET_GROUP: ${silk_asset_group}
          SILK_CLIENT_ID: ${silk_client_id}
          SILK_CLIENT_SECRET: ${silk_client_secret}
        script: |
          set -e

          .evergreen/create-sbom.sh
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
          DEBUG: ${debug}
          npm_config_loglevel: ${npm_loglevel}
          HADRON_DISTRIBUTION: ${compass_distribution}
          SIGNING_SERVER_HOSTNAME: ${SIGNING_SERVER_HOSTNAME}
          SIGNING_SERVER_PRIVATE_KEY: ${SIGNING_SERVER_PRIVATE_KEY}
          SIGNING_SERVER_PRIVATE_KEY_CYGPATH: ${SIGNING_SERVER_PRIVATE_KEY_CYGPATH}
          SIGNING_SERVER_USERNAME: ${SIGNING_SERVER_USERNAME}
          SIGNING_SERVER_PORT: ${SIGNING_SERVER_PORT}
          GITHUB_PR_NUMBER: ${github_pr_number}
          PAPERTRAIL_KEY_ID: ${papertrail_key_id}
          PAPERTRAIL_SECRET_KEY: ${papertrail_secret_key}
          COMPASS_WAS_COMPILED_AND_HAS_SBOM: '1'
        script: |
          set -e
          # Load environment variables
          eval $(.evergreen/print-compass-env.sh)
          .evergreen/compass_package.sh

  get_first_party_dependency_list:
    - command: s3.get
      params:
        <<: *get-artifact-params
        local_file: src/.sbom/${filename}
        remote_file: ${project}/${revision}_${revision_order_id}/${filename}
  create_static_analysis_report:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
          DEBUG: ${debug}
          npm_config_loglevel: ${npm_loglevel}
          GITHUB_TOKEN: ${devtoolsbot_github_token}
          GITHUB_PR_NUMBER: ${github_pr_number}
          FIRST_PARTY_DEPENDENCY_FILENAMES: ${first_party_dependency_filenames}
        script: |
          set -e
          # Load environment variables
          eval $(.evergreen/print-compass-env.sh)
          .evergreen/create-static-analysis-report.sh
    - command: s3.put
      params:
        <<: *save-artifact-params-private
        local_file: src/static-analysis-report.tgz
        remote_file: ${project}/${revision}_${revision_order_id}/static-analysis-report.tgz
        content_type: application/x-gzip

  publish:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
        script: |
          set -e
          # Load environment variables
          eval $(.evergreen/print-compass-env.sh)
          echo "Uploading release assets to S3 and GitHub if needed..."
          npm run --workspace mongodb-compass upload

  publish-dev-release-info:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
        script: |
          eval $(.evergreen/print-compass-env.sh)
          .evergreen/build-dev-release-info.sh release.json
    - command: s3.put
      params:
        <<: *save-artifact-params-public
        local_file: src/release.json
        remote_file: ${project}/compass/dev/release.json
        content_type: application/json
        display_name: release.json
        optional: true

  get-packaged-app:
    - command: s3.get
      params:
        <<: *get-artifact-params
        local_file: src/packages/compass/dist/${app_archive_name}
        remote_file: ${project}/${revision}_${revision_order_id}/${app_archive_name}
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
          COMPASS_APP_PATH_ORIGINAL: ${appPath}
        script: |
          set -e
          # Load environment variables
          eval $(.evergreen/print-compass-env.sh)
          set -x

          # Check the app bundle size.
          npm run --workspace mongodb-compass check-bundled-app-size

          if [[ "$IS_WINDOWS" == "true" ]]; then
            COMPASS_OUTDIR="$COMPASS_APP_PATH_ORIGINAL"
          else
            # Unpack outside the Compass working tree to avoid interactions with
            # npm packages from inside it.
            # (This doesn't seem to work on Windows without issues around being
            # able to spawn the extracted executable, unfortunately.)
            COMPASS_OUTDIR="$PWD/../tmp/from-packaged"
          fi

          mkdir -p "$COMPASS_OUTDIR"
          echo "Unpacking ${app_archive_name} to $COMPASS_OUTDIR ..."

          # Unpack the app archive
          if [[ "${app_archive_name}" == *.zip ]]; then
            unzip "packages/compass/dist/${app_archive_name}" -d "$COMPASS_OUTDIR"
          else
            tar -xzf "packages/compass/dist/${app_archive_name}" -C "$COMPASS_OUTDIR"
          fi

          # Print folder content to confirm that it worked
          ls -la "$COMPASS_OUTDIR"

          if [[ "$IS_WINDOWS" == "true" ]]; then
            chmod +x "$COMPASS_OUTDIR"/*.exe
          fi

  e2e-coverage:
    - command: shell.exec
      # Fail the task if it's idle for 10 mins
      timeout_secs: 600
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
          DEBUG: ${debug|}
          MONGODB_VERSION: ${mongodb_version|}
          MONGODB_RUNNER_VERSION: ${mongodb_version|}
          COMPASS_E2E_TEST_GROUPS: ${e2e_test_groups}
          COMPASS_E2E_TEST_GROUP: ${e2e_test_group}
          ATLAS_LOCAL_VERSION: latest
        script: |
          set -e
          # Load environment variables
          eval $(.evergreen/print-compass-env.sh)

          # Start atlas local to test Atlas Search
          source .evergreen/start-atlas-local.sh

          echo "Running E2E tests while collecting coverage..."

          npm run --unsafe-perm --workspace compass-e2e-tests test-ci

          tar czf coverage.tgz packages/compass-e2e-tests/coverage

  test-packaged-app:
    - command: shell.exec
      # Fail the task if it's idle for 10 mins
      timeout_secs: 600
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
          COMPASS_APP_PATH_ORIGINAL: ${appPath}
          COMPASS_APP_NAME: ${packagerOptions.name}
          DEBUG: ${debug|}
          MONGODB_VERSION: ${mongodb_version|}
          MONGODB_RUNNER_VERSION: ${mongodb_version|}
          COMPASS_E2E_TEST_GROUPS: ${e2e_test_groups}
          COMPASS_E2E_TEST_GROUP: ${e2e_test_group}
        script: |
          set -e
          # Load environment variables
          eval $(.evergreen/print-compass-env.sh)

          if [[ "$IS_WINDOWS" == "true" ]]; then
            export COMPASS_APP_PATH="$COMPASS_APP_PATH_ORIGINAL"
          else
            export COMPASS_APP_PATH="$PWD/../tmp/from-packaged/$(basename "$COMPASS_APP_PATH_ORIGINAL")"
          fi
          echo "Running tests against packaged app at $COMPASS_APP_PATH for MongoDB $MONGODB_VERSION..."

          if [[ "$IS_OSX" == "true" ]]; then
            echo "Disabling clipboard usage in e2e tests (TODO: https://jira.mongodb.org/browse/BUILD-14780)"
            export COMPASS_E2E_DISABLE_CLIPBOARD_USAGE="true"
          fi

          npm run --unsafe-perm --workspace compass-e2e-tests test-packaged-ci

  test-web-sandbox:
    - command: shell.exec
      # Fail the task if it's idle for 10 mins
      timeout_secs: 600
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
          COMPASS_APP_PATH_ORIGINAL: ${appPath}
          COMPASS_APP_NAME: ${packagerOptions.name}
          DEBUG: ${debug|}
          MONGODB_VERSION: ${mongodb_version|}
          MONGODB_RUNNER_VERSION: ${mongodb_version|}
          COMPASS_E2E_BROWSER_NAME: ${browser_name}
          COMPASS_E2E_TEST_GROUPS: ${e2e_test_groups}
          COMPASS_E2E_TEST_GROUP: ${e2e_test_group}
        script: |
          set -e
          # Load environment variables
          eval $(.evergreen/print-compass-env.sh)
          npm run --unsafe-perm --workspace compass-e2e-tests test-ci web

    
  test-web-sandbox-atlas-cloud:
    - command: shell.exec
      # It can take a very long time for Atlas cluster to get deployed
      timeout_secs: 2400
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
          DEBUG: ${debug|}
          COMPASS_E2E_ATLAS_CLOUD_SANDBOX_USERNAME: ${e2e_tests_compass_web_atlas_username}
          COMPASS_E2E_ATLAS_CLOUD_SANDBOX_PASSWORD: ${e2e_tests_compass_web_atlas_password}
          MCLI_PUBLIC_API_KEY: ${e2e_tests_mcli_public_api_key}
          MCLI_PRIVATE_API_KEY: ${e2e_tests_mcli_private_api_key}
          MCLI_ORG_ID: ${e2e_tests_mcli_org_id}
          MCLI_PROJECT_ID: ${e2e_tests_mcli_project_id}
          MCLI_OPS_MANAGER_URL: ${e2e_tests_mcli_ops_manager_url}
        script: |
          set -e
          # Load environment variables
          eval $(.evergreen/print-compass-env.sh)
          # Create Atlas cluster for test project
          source .evergreen/start-atlas-cloud-cluster.sh
          # Run the tests
          echo "Starting e2e tests..."
          # We're only running a special subset of tests as provisioning atlas
          # clusters in CI is both pricey and flakey, so we want to limit the
          # coverage to reduce those factors (at least for now)
          npm run --unsafe-perm --workspace compass-e2e-tests test-ci -- -- web \
            --test-atlas-cloud-sandbox \
            --test-filter="atlas-cloud/**/*"

  test-connectivity:
    - command: shell.exec
      # Fail the task if it's idle for 10 mins
      timeout_secs: 600
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
          COMPASS_SKIP_KERBEROS_TESTS: 'true'
          COMPASS_RUN_DOCKER_TESTS: 'true'
          DEBUG: ${debug}
        script: |
          set -e
          # Load environment variables
          eval $(.evergreen/print-compass-env.sh)
          source .evergreen/start-docker-envs.sh
          bash .evergreen/connectivity-tests/run.sh

  test-csfle:
    - command: shell.exec
      # Fail the task if it's idle for 10 mins
      timeout_secs: 600
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
          DEBUG: ${debug}
        script: |
          set -e
          # Load environment variables
          eval $(.evergreen/print-compass-env.sh)
          rm -rf mongodb-crypt && mkdir -p mongodb-crypt
          (cd mongodb-crypt && \
            curl -sSfL $(npx -y mongodb-download-url --enterprise --crypt_shared --version continuous) | \
            tar -xvz)
          export COMPASS_CRYPT_LIBRARY_PATH=$(echo $PWD/mongodb-crypt/lib/mongo_*_v1.*)
          npm run test-csfle --workspace mongodb-data-service

  verify-artifacts:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          # These are set in the apply-compass-target-expansion func
          WINDOWS_EXE_NAME: ${windows_setup_filename}
          WINDOWS_MSI_NAME: ${windows_msi_filename}
          WINDOWS_ZIP_NAME: ${windows_zip_filename}
          WINDOWS_NUPKG_NAME: ${windows_nupkg_full_filename}
          OSX_DMG_NAME: ${osx_dmg_filename}
          OSX_ZIP_NAME: ${osx_zip_filename}
          RHEL_RPM_NAME: ${linux_rpm_filename}
          RHEL_TAR_NAME: ${rhel_tar_filename}
          LINUX_DEB_NAME: ${linux_deb_filename}
          LINUX_TAR_NAME: ${linux_tar_filename}
        script: |
          set -e
          # Load environment variables
          eval $(.evergreen/print-compass-env.sh)
          .evergreen/verify-artifacts.sh

  save-all-artifacts:
    - command: s3.put
      params:
        <<: *save-artifact-params-public
        local_file: src/packages/compass/dist/${windows_setup_filename}
        remote_file: ${project}/${revision}_${revision_order_id}/${windows_setup_filename}
        optional: true
    - command: s3.put
      params:
        <<: *save-artifact-params-public
        local_file: src/packages/compass/dist/${windows_msi_filename}
        remote_file: ${project}/${revision}_${revision_order_id}/${windows_msi_filename}
        optional: true
    - command: s3.put
      params:
        <<: *save-artifact-params-public
        local_file: src/packages/compass/dist/${windows_zip_filename}
        remote_file: ${project}/${revision}_${revision_order_id}/${windows_zip_filename}
        content_type: application/zip
        optional: true
    - command: s3.put
      params:
        <<: *save-artifact-params-public
        local_file: src/packages/compass/dist/${windows_zip_sign_filename}
        remote_file: ${project}/${revision}_${revision_order_id}/${windows_zip_sign_filename}
        content_type: application/pgp-signature
        optional: true
    - command: s3.put
      params:
        <<: *save-artifact-params-public
        local_file: src/packages/compass/dist/${windows_nupkg_full_filename}
        remote_file: ${project}/${revision}_${revision_order_id}/${windows_nupkg_full_filename}
        optional: true
    - command: s3.put
      params:
        <<: *save-artifact-params-public
        local_file: src/packages/compass/dist/${windows_nupkg_full_sign_filename}
        remote_file: ${project}/${revision}_${revision_order_id}/${windows_nupkg_full_sign_filename}
        content_type: application/pgp-signature
        optional: true
    - command: s3.put
      params:
        <<: *save-artifact-params-public
        local_file: src/packages/compass/dist/${windows_releases_filename}
        remote_file: ${project}/${revision}_${revision_order_id}/${windows_releases_filename}
        optional: true
    - command: s3.put
      params:
        <<: *save-artifact-params-public
        local_file: src/packages/compass/dist/${osx_dmg_filename}
        remote_file: ${project}/${revision}_${revision_order_id}/${osx_dmg_filename}
        content_type: application/x-apple-diskimage
        optional: true
    - command: s3.put
      params:
        <<: *save-artifact-params-public
        local_file: src/packages/compass/dist/${osx_zip_filename}
        remote_file: ${project}/${revision}_${revision_order_id}/${osx_zip_filename}
        content_type: application/zip
        optional: true
    - command: s3.put
      params:
        <<: *save-artifact-params-public
        local_file: src/packages/compass/dist/${osx_zip_sign_filename}
        remote_file: ${project}/${revision}_${revision_order_id}/${osx_zip_sign_filename}
        content_type: application/pgp-signature
        optional: true
    - command: s3.put
      params:
        <<: *save-artifact-params-public
        local_file: src/packages/compass/dist/${linux_rpm_filename}
        remote_file: ${project}/${revision}_${revision_order_id}/${linux_rpm_filename}
        content_type: application/x-redhat-package-manager
        optional: true
    - command: s3.put
      params:
        <<: *save-artifact-params-public
        local_file: src/packages/compass/dist/${rhel_tar_filename}
        remote_file: ${project}/${revision}_${revision_order_id}/${rhel_tar_filename}
        content_type: application/x-gzip
        optional: true
    - command: s3.put
      params:
        <<: *save-artifact-params-public
        local_file: src/packages/compass/dist/${rhel_tar_sign_filename}
        remote_file: ${project}/${revision}_${revision_order_id}/${rhel_tar_sign_filename}
        content_type: application/pgp-signature
        optional: true
    - command: s3.put
      params:
        <<: *save-artifact-params-public
        local_file: src/packages/compass/dist/${linux_deb_filename}
        remote_file: ${project}/${revision}_${revision_order_id}/${linux_deb_filename}
        content_type: application/vnd.debian.binary-package
        optional: true
    - command: s3.put
      params:
        <<: *save-artifact-params-public
        local_file: src/packages/compass/dist/${linux_deb_sign_filename}
        remote_file: ${project}/${revision}_${revision_order_id}/${linux_deb_sign_filename}
        content_type: application/pgp-signature
        optional: true
    - command: s3.put
      params:
        <<: *save-artifact-params-public
        local_file: src/packages/compass/dist/${linux_tar_filename}
        remote_file: ${project}/${revision}_${revision_order_id}/${linux_tar_filename}
        content_type: application/x-gzip
        optional: true
    - command: s3.put
      params:
        <<: *save-artifact-params-public
        local_file: src/packages/compass/dist/${linux_tar_sign_filename}
        remote_file: ${project}/${revision}_${revision_order_id}/${linux_tar_sign_filename}
        content_type: application/pgp-signature
        optional: true
    - command: s3.put
      params:
        <<: *save-artifact-params-public
        local_file: src/.sbom/purls.txt
        remote_file: ${project}/${revision}_${revision_order_id}/${task_id}/purls.txt
        content_type: text/plain
        optional: true
    - command: s3.put
      params:
        <<: *save-artifact-params-public
        local_file: src/.sbom/sbom-lite.json
        remote_file: ${project}/${revision}_${revision_order_id}/${task_id}/sbom-lite.json
        content_type: application/json
        optional: true
    - command: s3.put
      params:
        <<: *save-artifact-params-public
        local_file: src/.sbom/sbom.json
        remote_file: ${project}/${revision}_${revision_order_id}/${task_id}/sbom.json
        content_type: application/json
        optional: true
    - command: s3.put
      params:
        <<: *save-artifact-params-public
        local_file: src/.sbom/first-party-deps.json
        remote_file: ${project}/${revision}_${revision_order_id}/first-party-deps-${compass_distribution}-${build_variant}.json
        content_type: application/json
        optional: true

  get-all-artifacts:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
          DEBUG: ${debug}
        script: |
          set -e
          # Load environment variables
          eval $(.evergreen/print-compass-env.sh)
          echo "Downloading release assets from evergreen bucket..."
          npm run --workspace mongodb-compass download

  generate-tasks:
    - command: generate.tasks
      params:
        files:
          - tasks.json

  publish-packages-next:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
          NPM_TOKEN: ${devtoolsbot_npm_token}
        script: |
          # Only package publish for commits on the main evergreen project.
          if [[ "${requester}" == "commit" ]] && [[ "${project}" == "10gen-compass-main" ]]; then
            set -e
            # Load environment variables
            eval $(.evergreen/print-compass-env.sh)
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc
            npm config list
            echo "Publishing packages as $(npm whoami)"
            npm run version-packages-next
            # unstage after lerna staged version
            git reset
            # mark files as unchanged so that lerna can publish
            git update-index --assume-unchanged $(git diff --name-only HEAD)
            bash ".evergreen/retry-with-backoff.sh" npm run publish-packages-next
          fi

  generate-vulnerability-report:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          <<: *compass-env
          DEBUG: ${debug}
          SNYK_TOKEN: ${snyk_token}
          JIRA_API_TOKEN: ${jira_api_token}
          HADRON_DISTRIBUTION: compass
        script: |
          set -e
          # Load environment variables
          eval $(.evergreen/print-compass-env.sh)

          set +e
          npm run generate-vulnerability-report
          return_code=$?
          set -e

          echo

          # Runs for all the commits on main, including nightly builds:
          if [[ "$EVERGREEN_IS_PATCH" != "true" ]] && [[ "${project}" == "10gen-compass-main" ]]; then
            export JIRA_BASE_URL="https://jira.mongodb.org"
            export JIRA_PROJECT="COMPASS"
            export JIRA_VULNERABILITY_BUILD_INFO="- [Evergreen task|$EVERGREEN_TASK_URL]"

            npm run create-vulnerability-tickets
          else
            cat .sbom/vulnerability-report.md
          fi

          echo

          if [[ "$EVERGREEN_IS_PATCH" != "true" ]]; then
              # Run `snyk monitor` to keep `main` tracked
            npx snyk monitor --org=dcd6db53-1532-4e65-beca-55db83f2cd52 --file=package-lock.json
            # Fails if the report failed and is not a patch, including release branches:
            exit $return_code
          fi
