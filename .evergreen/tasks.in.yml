tasks:
  - name: check
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
      - func: check

  - name: test
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
      - func: test
        vars:
          debug: 'hadron*,mongo*'

  - name: test-electron
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
      - func: test-electron
        vars:
          debug: 'hadron*,mongo*'

  - name: test-connectivity
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: clone
      - func: test-connectivity
        vars:
          debug: 'compass*,electron*,hadron*,mongo*'

  - name: test-csfle
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
      - func: test-csfle
        vars:
          debug: 'compass*,electron*,hadron*,mongo*'

  - name: e2e-coverage
    tags: ['run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
      - func: e2e-coverage
        vars:
          debug: 'compass-e2e-tests*,electron*,hadron*,mongo*'

  - name: generate-vulnerability-report
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
      - func: generate-vulnerability-report
        vars:
          debug: 'compass*,electron*,hadron*,mongo*'

  # Publish happens in one go to make sure we are not creating multiple github
  # releases in parallel
  - name: publish
    # Does a dry-run: doesn't actually publishes, but checks that all files
    # exist and we are not trying to do a "broken" publish
    tags: ['run-on-pr']
    depends_on:
      - name: '.required-for-publish'
        variant: '*'
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
        vars:
          scope: mongodb-compass
      - func: get-all-artifacts
      - func: publish

  - name: publish-packages-next
    tags: []
    depends_on:
      - name: '.required-for-publish'
        variant: '*'
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
      - func: publish-packages-next
  - name: publish-dev-release-info
    tags: []
    depends_on:
      - name: 'publish'
        variant: '*'
    commands:
      - func: prepare
      - func: publish-dev-release-info
<% for (const packageTask of tasks.package) { %>
  - name: <% out(packageTask.name) %>
    tags: ['required-for-publish', 'run-on-pr', 'package-task']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
        vars:
          scope: '@mongodb-js/webpack-config-compass'
      - func: apply-compass-target-expansion
        vars:
          compass_distribution: <% out(packageTask.vars.compass_distribution) %>
      - func: spawn-signing-server
      - func: package
        vars:
          debug: 'hadron*,mongo*,compass*,electron*,sign*'
          compass_distribution: <% out(packageTask.vars.compass_distribution) %>
      - func: verify-artifacts
      - func: save-all-artifacts
        vars:
          compass_distribution: <% out(packageTask.vars.compass_distribution) %>
<% } %>
<% for (const testPackagedTask of tasks['test-packaged-app']) { %>
  - name: <% out(testPackagedTask.name) %>
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
        vars:
          scope: 'compass-e2e-tests'
      - func: apply-compass-target-expansion
        vars:
          compass_distribution: compass
      - func: get-packaged-app
        vars:
          compass_distribution: compass
      - func: test-packaged-app
        vars: <% for (const [key, value] of Object.entries(testPackagedTask.vars)) { %>
          <% out(`${key}: '${value}'`) } %>
          compass_distribution: compass
          debug: 'compass-e2e-tests*,electron*,hadron*,mongo*'
<% } %>
<% for (const testPackagedTask of tasks['test-web-sandbox']) { %>
  - name: <% out(testPackagedTask.name) %>
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
        vars:
          scope: 'compass-e2e-tests'
      - func: apply-compass-target-expansion
        vars:
          compass_distribution: compass
      - func: test-web-sandbox
        vars: <% for (const [key, value] of Object.entries(testPackagedTask.vars)) { %>
          <% out(`${key}: '${value}'`) } %>
          compass_distribution: compass
          debug: 'compass-e2e-tests*,electron*,hadron*,mongo*'
<% } %>
  - name: create_static_analysis_report
    tags: ['required-for-publish', 'run-on-pr']
    depends_on:
      - name: ".package-task"
        variant: "*"
    commands:
      - func: prepare
      - func: install
<%
let firstPartyDepsFilenames = [];
for (const packageTask of tasks.package) { 
  const filenames = [
    `first-party-deps-${packageTask.vars.compass_distribution}-ubuntu.json`,
    `first-party-deps-${packageTask.vars.compass_distribution}-windows.json`,
    `first-party-deps-${packageTask.vars.compass_distribution}-macos.json`,
    `first-party-deps-${packageTask.vars.compass_distribution}-macos-arm.json`];
  for (const filename of filenames) {
  firstPartyDepsFilenames.push(filename); %>
      - func: get_first_party_dependency_list
        vars:
          filename: <% out(filename) %>
<% } } %>
      - func: create_static_analysis_report
        vars:
          first_party_dependency_filenames: <% out(firstPartyDepsFilenames.map(f => `.sbom/${f}`).join(',')) %>
