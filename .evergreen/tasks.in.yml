tasks:
  - name: check
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
      - func: check

  - name: test
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
      - func: test
        vars:
          debug: 'hadron*,mongo*'

  - name: test-electron
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
      - func: test-electron
        vars:
          debug: 'hadron*,mongo*'

  - name: test-connectivity
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: clone
      - func: test-connectivity
        vars:
          debug: 'compass*,electron*,hadron*,mongo*'

  - name: test-csfle
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
      - func: test-csfle
        vars:
          debug: 'compass*,electron*,hadron*,mongo*'

  - name: e2e-coverage
    tags: ['run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
      - func: e2e-coverage
        vars:
          debug: 'compass-e2e-tests*,electron*,hadron*,mongo*'

  - name: generate-vulnerability-report
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
      - func: generate-vulnerability-report
        vars:
          debug: 'compass*,electron*,hadron*,mongo*'

  # Publish happens in one go to make sure we are not creating multiple github
  # releases in parallel
  - name: publish
    # Does a dry-run: doesn't actually publishes, but checks that all files
    # exist and we are not trying to do a "broken" publish
    tags: ['run-on-pr']
    depends_on:
      - name: '.required-for-publish'
        variant: '*'
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
        vars:
          scope: mongodb-compass
      - func: get-all-artifacts
      - func: publish

  - name: publish-packages-next
    tags: []
    depends_on:
      - name: '.required-for-publish'
        variant: '*'
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
      - func: publish-packages-next
<% for (const packageTask of tasks.package) { %>
  - name: <% out(packageTask.name) %>
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
        vars:
          scope: '@mongodb-js/webpack-config-compass'
      - func: apply-compass-target-expansion
        vars:
          compass_distribution: <% out(packageTask.vars.compass_distribution) %>
      - func: package
        vars:
          debug: 'hadron*,mongo*,compass*,electron*'
          compass_distribution: <% out(packageTask.vars.compass_distribution) %>
      - func: save-all-artifacts
        vars:
          compass_distribution: <% out(packageTask.vars.compass_distribution) %>
<% };
for (const testPackagedTask of tasks['test-packaged-app']) { %>
  - name: <% out(testPackagedTask.name) %>
    tags: ['required-for-publish', 'run-on-pr']
    commands:
      - func: prepare
      - func: install
      - func: bootstrap
        vars:
          scope: 'compass-e2e-tests'
      - func: apply-compass-target-expansion
        vars:
          compass_distribution: compass
      - func: get-packaged-app
        vars:
          compass_distribution: compass
      - func: test-packaged-app
        vars: <% for (const [key, value] of Object.entries(testPackagedTask.vars)) { %>
          <% out(`${key}: '${value}'`) } %>
          compass_distribution: compass
          debug: 'compass-e2e-tests*,electron*,hadron*,mongo*'
<% } %>